{"config":{"lang":["en","zh"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"ZoomImage","text":"<p>  []min_api_link []license_link []version_link</p> <p>Translations: \u7b80\u4f53\u4e2d\u6587</p> <p>ZoomImage is an gesture zoom viewing of images library specially designed for Compose Multiplatform and Android View. It has the following features and functions:</p> <ul> <li><code>Compose Multiplatform</code>. Support for Compose Multiplatform, which can be used on Android, macOS,   Windows, Linux and other platforms</li> <li><code>Power</code>. Supports basic functions such as double-click scale, two-finger scale, single-finger   scale, mouse wheel scale, keyboard scale, single-finger drag, inertial sliding, and keyboard drag.</li> <li><code>Locate</code>. Support for locate anywhere in the image and keeping it in the center of the screen</li> <li><code>Rotate</code>. Supports 0\u00b0, 90\u00b0, 180\u00b0, 270\u00b0, 360\u00b0 rotation of pictures</li> <li><code>Subsampling</code>. Support for subsampling of very large images to avoid OOM, tile support animation,   and sharpness gradients</li> <li><code>Dynamic scale factor</code>. Automatically calculates the most appropriate double-click scaling factor   based on image size and container size</li> <li><code>Scaling damping</code>. When manually scaled beyond the maximum or minimum scale factor, there is a   damped rubber band effect</li> <li><code>Scroll bar</code>. Supports displaying horizontal and vertical scroll bars to clarify the current   scroll position</li> <li><code>Read Mode</code>. When a long image is displayed in reading mode, the initial state automatically fills   the screen, and the user can immediately start reading the image content, eliminating the need for   the user to double-click to scale in</li> <li><code>Exif</code>. Support reading Exif Orientation information and automatically rotating images</li> <li><code>Image Loader</code>. Provide support for image loaders such as sketch, coil, glide, picasso, etc., and   can also customize support for more image loaders</li> </ul> <p>https://github.com/panpf/zoomimage/assets/3250512/f067bed9-24e4-4ab8-a839-0731e155f4ef</p>"},{"location":"#multiplatform-support","title":"Multiplatform support","text":"Function/Platform Android iOS Desktop Web Zoom \u2705 \u2705 \u2705 \u2705 Subsampling \u2705 \u2705 \u2705 \u2705 Exif Orientation \u2705 \u2705 \u2705 \u2705 Integrated Sketch \u2705 \u2705 \u2705 \u2705 Integrated Coil \u2705 \u2705 \u2705 \u2705 Integrated Glide \u2705 \u274c \u274c \u274c Integrated Picasso \u2705 \u274c \u274c \u274c"},{"location":"#sample-app","title":"Sample App","text":"<ul> <li>For Android, iOS, desktop version, and web deployable packages, please go to   the Releases page to download.</li> <li>Web example\uff1ahttps://panpf.github.io/zoomimage/app</li> </ul>"},{"location":"#download","title":"Download","text":"<p><code>Published to mavenCentral</code></p> <p><code>${LAST_VERSION}</code>:  (Not included 'v')</p> <p>Compose multiplatform:</p> <pre><code>// Integrate Sketch v4+ singleton mode, provides SketchZoomAsyncImage component. (Recommended)\nimplementation(\"io.github.panpf.zoomimage:zoomimage-compose-sketch4:${LAST_VERSION}\")\n\n// Integrate Sketch v4+ koin mode, provides SketchZoomAsyncImage component. (Recommended)\nimplementation(\"io.github.panpf.zoomimage:zoomimage-compose-sketch4-koin:${LAST_VERSION}\")\n\n// Integrate Sketch v4+ core, provides SketchZoomAsyncImage component. (Recommended)\nimplementation(\"io.github.panpf.zoomimage:zoomimage-compose-sketch4-core:${LAST_VERSION}\")\n\n// Integrate Sketch v3 singleton mode, provides SketchZoomAsyncImage component.\nimplementation(\"io.github.panpf.zoomimage:zoomimage-compose-sketch3:${LAST_VERSION}\")\n\n// Integrate Sketch v3 core, provides SketchZoomAsyncImage component.\nimplementation(\"io.github.panpf.zoomimage:zoomimage-compose-sketch3-core:${LAST_VERSION}\")\n\n// Integrate Coil v3+ singleton mode, provides CoilZoomAsyncImage component.\nimplementation(\"io.github.panpf.zoomimage:zoomimage-compose-coil3:${LAST_VERSION}\")\n\n// Integrate Coil v3+ core, provides CoilZoomAsyncImage component.\nimplementation(\"io.github.panpf.zoomimage:zoomimage-compose-coil3-core:${LAST_VERSION}\")\n\n// Integrate Coil v2 singleton mode, provides CoilZoomAsyncImage component.\nimplementation(\"io.github.panpf.zoomimage:zoomimage-compose-coil2:${LAST_VERSION}\")\n\n// Integrate Coil v2 core, provides CoilZoomAsyncImage component.\nimplementation(\"io.github.panpf.zoomimage:zoomimage-compose-coil2-core:${LAST_VERSION}\")\n\n// Provides basic ZoomImage component, does not support network images.\nimplementation(\"io.github.panpf.zoomimage:zoomimage-compose:${LAST_VERSION}\")\n\n// Support loading images from composeResources folder\nimplementation(\"io.github.panpf.zoomimage:zoomimage-compose-resources:${LAST_VERSION}\")\n</code></pre> <p>[!TIP] Just choose one according to the image loader you use or your needs.</p> <p>Only android compose:</p> <pre><code>// Integrate Glide, provides GlideZoomAsyncImage component.\nimplementation(\"io.github.panpf.zoomimage:zoomimage-compose-glide:${LAST_VERSION}\")\n</code></pre> <p>[!TIP] Why is there no picasso version of the compose ZoomImage component? Because Picasso has officially stated that it will not provide support for compose (Original post here)</p> <p>Android view:</p> <pre><code>// Integrate Sketch v4+ singleton mode, provides SketchZoomAsyncImage component. (Recommended)\nimplementation(\"io.github.panpf.zoomimage:zoomimage-view-sketch4:${LAST_VERSION}\")\n\n// Integrate Sketch v4+ koin mode, provides SketchZoomAsyncImage component. (Recommended)\nimplementation(\"io.github.panpf.zoomimage:zoomimage-view-sketch4-koin:${LAST_VERSION}\")\n\n// Integrate Sketch v4+ core, provides SketchZoomAsyncImage component. (Recommended)\nimplementation(\"io.github.panpf.zoomimage:zoomimage-view-sketch4-core:${LAST_VERSION}\")\n\n// Integrate Sketch v3 singleton mode, provides SketchZoomAsyncImage component.\nimplementation(\"io.github.panpf.zoomimage:zoomimage-view-sketch3:${LAST_VERSION}\")\n\n// Integrate Sketch v3 core, provides SketchZoomAsyncImage component.\nimplementation(\"io.github.panpf.zoomimage:zoomimage-view-sketch3-core:${LAST_VERSION}\")\n\n// Integrate Coil v3+ singleton mode, provides CoilZoomAsyncImage component.\nimplementation(\"io.github.panpf.zoomimage:zoomimage-view-coil3:${LAST_VERSION}\")\n\n// Integrate Coil v3+ core, provides CoilZoomAsyncImage component.\nimplementation(\"io.github.panpf.zoomimage:zoomimage-view-coil3-core:${LAST_VERSION}\")\n\n// Integrate Coil v2 singleton mode, provides CoilZoomAsyncImage component.\nimplementation(\"io.github.panpf.zoomimage:zoomimage-view-coil2:${LAST_VERSION}\")\n\n// Integrate Coil v2 core, provides CoilZoomAsyncImage component.\nimplementation(\"io.github.panpf.zoomimage:zoomimage-view-coil2-core:${LAST_VERSION}\")\n\n// Integrate Glide, provides GlideZoomImageView component.\nimplementation(\"io.github.panpf.zoomimage:zoomimage-view-glide:${LAST_VERSION}\")\n\n// Integrate Picasso, provides PicassoZoomImageView component.\nimplementation(\"io.github.panpf.zoomimage:zoomimage-view-picasso:${LAST_VERSION}\")\n\n// Provides basic ZoomImageView component, does not support network images.\nimplementation(\"io.github.panpf.zoomimage:zoomimage-view:${LAST_VERSION}\")\n</code></pre> <p>[!TIP] Just choose one according to the image loader you use or your needs.</p>"},{"location":"#r8-proguard","title":"R8 / Proguard","text":"<p>ZoomImage's own obfuscation is already included in aar, but you may also need to add obfuscation configuration for other libraries that depend indirectly</p>"},{"location":"#quickly-started","title":"Quickly Started","text":"<p>Compose multiplatform:</p> <pre><code>// Use basic ZoomImage components\nval zoomState: ZoomState by rememberZoomState()\nval imageSource = remember {\n    val resUri = Res.getUri(\"files/huge_world.jpeg\")\n  ImageSource.fromComposeResource(resUri)\n}\nzoomState.setSubsamplingImage(imageSource)\nZoomImage(\n    painter = painterResource(Res.drawable.huge_world_thumbnail),\n    contentDescription = \"view image\",\n    modifier = Modifier.fillMaxSize(),\n    zoomState = zoomState,\n)\n\n// Use SketchZoomAsyncImage component\nSketchZoomAsyncImage(\n    uri = \"https://sample.com/sample.jpeg\",\n    contentDescription = \"view image\",\n    modifier = Modifier.fillMaxSize(),\n)\n\n// Use CoilZoomAsyncImage component\nCoilZoomAsyncImage(\n    model = \"https://sample.com/sample.jpeg\",\n    contentDescription = \"view image\",\n    modifier = Modifier.fillMaxSize(),\n)\n</code></pre> <p>[!TIP] The usage of SketchZoomAsyncImage and CoilZoomAsyncImage is the same as their original AsyncImage, except that there is an additional <code>zoomState: ZoomState</code> parameter</p> <p>Only android compose:</p> <pre><code>// Use GlideZoomAsyncImage component\nGlideZoomAsyncImage(\n    model = \"https://sample.com/sample.jpeg\",\n    contentDescription = \"view image\",\n    modifier = Modifier.fillMaxSize(),\n)\n</code></pre> <p>[!TIP] The usage of GlideZoomAsyncImage is the same as its original GlideImage, except that there is an additional <code>zoomState: ZoomState</code> parameter</p> <p>Android view:</p> <pre><code>// Use basis ZoomImageView component\nval zoomImageView = ZoomImageView(context)\nzoomImageView.setImageResource(R.drawable.huge_world_thumbnail)\nzoomImageView.setSubsamplingImage(ImageSource.fromResource(R.raw.huge_world))\n\n// Use SketchZoomAsyncImage component\nval sketchZoomImageView = SketchZoomImageView(context)\nsketchZoomImageView.loadImage(\"https://sample.com/sample.jpeg\")\n\n// Use CoilZoomImageView component\nval coilZoomImageView = CoilZoomImageView(context)\nsketchZoomImageView.loadImage(\"https://sample.com/sample.jpeg\")\n\n// Use GlideZoomImageView component\nval glideZoomImageView = GlideZoomImageView(context)\nGlide.with(this@GlideZoomImageViewFragment)\n    .load(\"https://sample.com/sample.jpeg\")\n    .into(glideZoomImageView)\n\n// Use PicassoZoomImageView component\nval picassoZoomImageView = PicassoZoomImageView(context)\npicassoZoomImageView.loadImage(\"https://sample.com/sample.jpeg\")\n</code></pre>"},{"location":"#document","title":"Document","text":"<ul> <li>Get Started</li> <li>Scale: Scale the image to see clearer details</li> <li>Offset: Move the image to see content outside the container</li> <li>Rotate: Rotate the image to view content from different angles</li> <li>Locate: Locate anywhere in the image</li> <li>Keep Transform: Keep transform when switching images</li> <li>Read Mode: Long images initially fill the screen for easy reading</li> <li>Click: Receive click events</li> <li>Subsampling: Display large images through subsampling to avoid OOM</li> <li>Scroll Bar: Displays horizontal and vertical scroll bars</li> <li>Log: Modify log level and output pipeline</li> <li>Modifier.zoom()</li> </ul>"},{"location":"#samples","title":"Samples","text":"<p>You can find the sample code in the examples directory, or you can go to release page download App experience</p>"},{"location":"#change-log","title":"Change Log","text":"<p>Please review the CHANGELOG file</p>"},{"location":"#test-platform","title":"Test Platform","text":"<ul> <li>Android: Emulator; Arm64; API 21-34</li> <li>Desktop: macOS; 14.6.1; JDK 17</li> <li>iOS: iphone 16 simulator; iOS 18.1</li> <li>Web: Chrome; 130</li> </ul>"},{"location":"#run-sample-app","title":"Run Sample App","text":"<p>Prepare the environment:</p> <ol> <li>Android Studio: Norwhal+ (2025.1.1+)</li> <li>JDK: 17+</li> <li>Use kdoctor to check the running environment and follow the prompts to install the required    software</li> <li>Android Studio installs the <code>Kotlin Multiplatform</code> plugin</li> </ol> <p>Run the sample app:</p> <ol> <li>Clone the project and open it using Android Studio</li> <li>After synchronization is completed, the <code>Kotlin Multiplatform</code> plug-in will automatically create    a running configuration for each platform.</li> <li>Select the corresponding platform's running configuration, and then click Run</li> </ol>"},{"location":"#my-projects","title":"My Projects","text":"<p>The following are my other open source projects. If you are interested, you can learn about them:</p> <ul> <li>sketch: Sketch is an image loading library designed for Compose   Multiplatform and Android View. It is powerful and rich in functions. In addition to basic   functions, it also supports GIF, SVG, video thumbnails, Exif Orientation, etc.</li> <li>assembly-adapter: A library on Android that provides   multi-type Item implementations for various adapters. Incidentally, it also provides the most   powerful divider for RecyclerView.</li> <li>sticky-item-decoration: RecyclerView sticky item   implementation</li> </ul>"},{"location":"#license","title":"License","text":"<p>Apache 2.0. See the LICENSE file for details.</p>"},{"location":"CHANGELOG/","title":"Change Log","text":"<p>Translations: \u7b80\u4f53\u4e2d\u6587</p>"},{"location":"CHANGELOG/#140-rc01","title":"1.4.0-rc01","text":"<ul> <li>fix: Fixed a bug that only existed in version 1.4.0-beta04 for tile mapping misalignment of   ZoomImageView</li> <li>fix: Fixed a bug where the contentOriginSize change would interrupt the user's operation   animation. #105</li> <li>fix: Fixed a bug where the content zoom multiple suddenly changes to the reading mode multiple   when the content zooms to minScale in reading mode and only the containerSize   changes. #106</li> <li>improve: ZoomImageView supports two-finger drag   gestures. #102</li> <li>new: ContinuousTransformType Added ROLLBACK type</li> <li>new: ZoomableState and ZoomableEngine add sourceScaleFactor, sourceVisibleRect property and   sourceToDraw method. #92</li> <li>depend: Update sketch to 4.3.1</li> </ul>"},{"location":"CHANGELOG/#140-beta04","title":"1.4.0-beta04","text":"<ul> <li>fix: Fixed all bugs in which ZoomImageView does not restore subsampling when attached again after   detached. #99</li> <li>fix: Fixed a bug where Sketch's ThumbnailMemoryCacheStateImage crashed due to subsampling tile   cache. #100</li> <li>fix: Fixed a bug where subsampling never decodes pixels in the last column and the last   row. #101</li> <li>break: The return result of RegionDecoder.decodeRegion() is changed from TileImage to TileBitmap</li> <li>break: Remove the key and fromCache properties of TileImage</li> </ul>"},{"location":"CHANGELOG/#140-beta03","title":"1.4.0-beta03","text":"<ul> <li>fix: Fixed the problem that the content size is incorrect when CoilZoomAsyncImage is turned on   crossfade and the placeholder image is larger than the loaded   image. #94</li> <li>fix: Fixed a bug where SketchZoomAsyncImage and SketchZoomImageView do not support parameters such   as downloadCachePolicy and downloadCacheKey. #89</li> <li>fix: Fixed a bug where CoilZoomAsyncImage and CoilZoomImageView do not support parameters such   as diskCachePolicy and networkCachePolicy. #90</li> <li>fix: Fixed a bug where GlideZoomImageView does not support   thumbnail(). #93</li> <li>fix: Now the stopped property of the subsample is also involved in the calculation of   ready. #97</li> <li>improve: GlideZoomAsyncImage and GlideZoomImageView now use asFile to load models of unknown   types. #76</li> <li>new: Added <code>zoomimage-compose-sketch4-koin</code> and <code>zoomimage-view-sketch4-koin</code> modules to adapt to   sketch4's koin mode. #95</li> <li>new: SubsamplingState and SubsamplingEngine add disabled attributes to disable subsampling   feature. #96</li> <li>new: SubsamplingState and SubsamplingEngine add disabledAutoStopWithLifecycle attributes to   disable automatic subsampling stopping according to   Lifecycle. #91</li> <li>depend: Update sketch to 4.2.0</li> </ul>"},{"location":"CHANGELOG/#140-beta02","title":"1.4.0-beta02","text":"<ul> <li>fix: Fixed bug in content position drift in version 1.4.0-beta01</li> </ul>"},{"location":"CHANGELOG/#140-beta01","title":"1.4.0-beta01","text":"<ul> <li>fix: Reading mode in RTL mode should position the initial offset to the   end. #84</li> <li>improve: SketchZoomAsyncImage and CoilZoomAsyncImage are now directly based on the original   AsyncImage component</li> <li>improve: Modifier.zoomable() now reduces one ModifierNodeElement</li> <li>new: ZoomableState adds layoutDirection property, ZoomableEngine adds rtlLayoutDirectionState   property</li> <li>depend: Update sketch to 4.2.0-beta01</li> </ul>"},{"location":"CHANGELOG/#130","title":"1.3.0","text":"<p>[!CAUTION] The compose multiplatform version 1.8.0 must be jvm 11 to compile. Please modify the configuration of sourceCompatibility, targetCompatibility, jvmTarget, etc. to 11+</p> <ul> <li>fix: Fixed the bug where the initial offset is incorrect when the content size is larger than the   container size in read mode</li> <li>improve: Improve the minScale algorithm, and now initialScale is smaller than baseScale or the   difference between the two is too small.</li> <li>depend: Update kotlin to 2.1.10</li> <li>depend: Update compose multiplatform to 1.8.0</li> <li>depend: Update exifinterface to 1.4.1</li> <li>depend: Update accompanist-drawablepainter to 0.37.3</li> <li>depend: Update jetbrains-lifecycle to 2.8.4</li> <li>depend: Update kotlinx-coroutines to 1.10.2</li> <li>depend: Update okio to 3.11.0</li> <li>depend: Update glide to 4.16.0</li> <li>depend: Update coil to 3.2.0</li> <li>depend: Update sketch to 4.1.0</li> <li>depend: Don't replace <code>kotlin-stdlib-jdk7</code> and <code>kotlin-stdlib-jdk8</code> with <code>kotlin-stdlib</code></li> </ul>"},{"location":"CHANGELOG/#120","title":"1.2.0","text":"<p>zoom:</p> <ul> <li>fix: The caller parameter of the reset() methods of ZoomableState and ZoomableEngine is removed   and the transform state is always reset. #81</li> <li>fix: Fixed a bug where the View version component did not have a finger-centric finger when the   single finger zoom exceeded the maximum   boundary. #82</li> <li>fix: Fixed a bug where the zoom center does not have the zoom center as the zoom center when the   double-finger zoom exceeds the maximum   boundary. #83</li> <li>improve: Improve the logic of judging whether it is a thumbnail based on size. Now it can be   correctly judged no matter how many times it is zoomed, and the error range is within 2 pixel.</li> <li>improve: ZoomImage series components recover two-finger moving gestures</li> <li>improve: Reconstruct the mouse wheel scaling calculation logic to make the scaling speeds of   desktop and web platforms consistent, and add the mouseWheelScaleCalculator attribute to customize   the calculation logic</li> <li>new: ZoomableState and ZoomableEngine have added the   keepTransformWhenSameAspectRatioContentSizeChanged parameter. After turning on, you can keep the   transformation state when switching pictures with the same aspect   ratio. #58</li> <li>new: ZoomableState and ZoomableEngine add scaleBy(), scaleByPlus(), offsetBy(), rotateBy() and   other methods.</li> </ul> <p>other:</p> <ul> <li>depend: Upgrade sketch 4.0.5</li> </ul>"},{"location":"CHANGELOG/#112","title":"1.1.2","text":"<p>subsampling:</p> <ul> <li>fix: Catch the close exception. #75</li> </ul>"},{"location":"CHANGELOG/#111","title":"1.1.1","text":"<p>zoom:</p> <ul> <li>improve: Now ZoomableState and ZoomableEngine are both wrappers based on ZoomableCore</li> <li>new: ZoomableState and ZoomableEngine add contentBaseDisplayRectF, contentBaseVisibleRectF,   contentDisplayRectF, contentVisibleRectF, userOffsetBoundsRectF attributes, scale() and   switchScale() methods add centroidContentPointF parameters, and add locate(Offset) and   touchPointToContentPointF methods.</li> </ul> <p>subsampling:</p> <ul> <li>fix: Fixed the bug that the View version of Tile Bounds has incorrect colors</li> <li>improve: Now SubsamplingState and SubsamplingEngine are both wrappers based on SubsamplingCore</li> </ul> <p>other:</p> <ul> <li>improve: Improved logs, now more detailed log information such as animation process, Tile loading,   etc. The log level is adjusted to Verbose</li> <li>depend: Upgrade sketch 4.0.2</li> </ul>"},{"location":"CHANGELOG/#110-stable","title":"1.1.0 Stable","text":"<p>[!CAUTION] To support js and iOS platforms, all <code>remove</code> and <code>change</code> tag changes are destructive</p> <p>zoom:</p> <ul> <li>fix: Fix the inconsistent values returned by the contentSizeState property collect and value of   ZoomableEngine   bug. #37</li> <li>fix: Fixed offset error when LayoutDirection is in RTL mode   bug. #65</li> <li>remove: Remove the logger parameter of the 'remember*ZoomState()' series of functions</li> <li>change: The ZoomImage series components disable two-finger dragging gestures to avoid triggering   fling after rapid two-finger zooming, causing the image to   drift. #28</li> <li>change: The <code>contentSize</code> properties of ZoomableState and ZoomableEngine now no longer return   <code>containerSize</code> when empty</li> <li>change: The minimum length of the scrollbar is now 10.dp</li> <li>improve: The two-finger zoom gesture of ZoomImageView series components can now be triggered by   sliding a relatively short distance. #61</li> <li>improve: Provides LayoutDirection RTL support for the alignment property of all   components. #66</li> <li>new: Added support for mouse wheel zoom   function. #35</li> <li>new: Added support for keyboard zoom and drag   functions. #42</li> <li>new: 'remember*ZoomState()' series of functions add 'logLevel: Level' parameter</li> <li>new: New <code>containerWhitespaceMultiple</code> and <code>containerWhitespace</code> parameters are added to leave a   white space between the edge of the image and the edge of the   container. #45</li> </ul> <p>subsampling:</p> <ul> <li>fix: Fixed a bug that caused the Tile map to calculate abnormally and crash when encountering   images of extreme sizes (one side is extremely large and the other is extremely   small). #32</li> <li>fix: Fixed the bug that coil and glide series components do not support '/sdcard/sample.jpeg' type   model. #34</li> <li>remove: Remove the disallowReuseBitmap parameter of TileBitmapCache's put() method</li> <li>remove: Remove BitmapFrom</li> <li>change: Remove ignoreExifOrientation attribute</li> <li>change: Remove disabledTileBitmapReuse and TileBitmapPool attributes</li> <li>change: Non-Android platforms now use Skia to decode images</li> <li>change: Use Jetbrains Lifecycle instead of StoppedController</li> <li>change: ImageSource now uses okio's Source instead of InputStream</li> <li>change: ImageSource.fromResource() on desktop platform changed to fromKotlinResource()</li> <li>change: ImageSource.fromFile(File) is now a JVM platform-specific extension function</li> <li>change: Remove the suspend modifier of ImageSource's openSource() method. If you need to suspend,   please use ImageSource.Factory</li> <li>change: Decisions about whether to disable Tile's memory cache are now no longer based on the   memory cache setting of the thumbnail's image request</li> <li>change: SubsamplingState.disabledTileBitmapCache renamed to disabledTileImageCache</li> <li>change: SubsamplingState.tileBitmapCache renamed to tileImageCache</li> <li>change: SubsamplingEngine.disabledTileBitmapCacheState renamed to disabledTileImageCacheState</li> <li>change: SubsamplingEngine.tileBitmapCacheState renamed to tileImageCacheState</li> <li>improve: Relax the aspect ratio restrictions between thumbnails and original   images. #22</li> <li>improve: Improved BitmapRegionDecoderDecodeHelper, now only closes the input stream on   destruction. #29</li> <li>improve: Tiles loaded from memory now also animate when displayed</li> <li>improve: Now non-Android platforms will directly ignore gif images when subsampling</li> <li>improve: Now subsampling cannot be used as long as either side of the thumbnail exceeds the   original image</li> <li>improve: Improved SketchZoomImageview, CoilZoomImageView, GlideZoomImageView,   PicassoZoomImageView, now when setting ImageSource, the ImageSource will be cleared whenever it   fails.</li> <li>improve: Improve the sketch series components so that the zoom will no longer be reset after   subsampling initialization is completed. #50</li> <li>improve: Now Sketch, Coil, and Glide series components will actively filter animations when   setting subsampling.</li> <li>new: Added support for js, wasmJs, and iOS platforms</li> <li>new: TileBitmap adds bitmapFrom attribute</li> <li>new: GlideZoomAsyncImage, GlideZoomImageView, and PicassoZoomImageView support extended   ImageSource</li> <li>new: Added ImageSource.Factory interface for creating ImageSource</li> <li>new: ZoomState and ZoomImageView add <code>setSubsamplingImage()</code> method for setting ImageSource</li> </ul> <p>other:</p> <ul> <li>remove: Remove the showThreadName parameter of Logger</li> <li>remove: Remove the module attribute of Logger</li> <li>change: The sketch-compose-coil module is renamed to sketch-compose-coil2, and the   sketch-compose-coil3 module is added</li> <li>change: The sketch-compose-sketch module is renamed to sketch-compose-sketch3, and the   sketch-compose-sketch4 module is added</li> <li>change: The sketch-core-coil module is renamed to sketch-compose-coil2, and the sketch-core-coil3   module is added</li> <li>change: The sketch-core-sketch module is renamed to sketch-compose-sketch3, and the   sketch-core-sketch4 module is added</li> <li>change: The sketch-view-coil module is renamed to sketch-compose-coil2, and the sketch-view-coil3   module is added</li> <li>change: The sketch-view-sketch module is renamed to sketch-compose-sketch3, and the   sketch-view-sketch4 module is added</li> <li>change: Logger.DEBUG changed to Logger.Level.Debug</li> <li>change: Now each component's log tag is separate</li> <li>change: The name of the <code>state: ZoomState</code> parameter of ZoomImage, SketchZoomAsyncImage,   CoilZoomAsyncImage, GlideZoomAsyncImage and other functions has been changed to   <code>zoomState: ZoomState</code></li> <li>depend: Upgrade kotlin 2.0.21, kotlinx coroutines 1.9.0</li> <li>depend: Upgrade jetbrains compose 1.7.0, jetbrains lifecycle 2.8.3</li> <li>depend: Upgrade coil 2.7.0</li> </ul>"},{"location":"CHANGELOG/#110-rc03","title":"1.1.0-rc03","text":"<p>zoom:</p> <ul> <li>fix: Fix containerWhitespace crash bug. #63</li> <li>fix: Fixed the bug of offset error when LayoutDirection is in RTL   mode. #65</li> <li>improve: Provide LayoutDirection RTL support for alignment and containerWhitespace properties of   all components. #66</li> </ul> <p>depend:</p> <ul> <li>depend: Upgrade coil v3.0.4 version</li> </ul>"},{"location":"CHANGELOG/#110-rc02","title":"1.1.0-rc02","text":"<p>zoom:</p> <ul> <li>fix: The SketchZoomAsyncImage component of the 'zoomimage-compose-sketch4' module always displays   the image in the upper left corner first, and then instantly moves the image to the center of the   screen. #60</li> <li>improve: The two-finger zoom gesture of ZoomImageView series components can now be triggered by   sliding a relatively short distance. #61</li> <li>new: The new containerWhitespace attribute is used to set the white space around the container in   pixel values. #59</li> </ul> <p>subsampling:</p> <ul> <li>improve: Improve to determine whether regional decoding is supported based on mimeType. Non-image   types directly return false. On non-Android platforms, based on the skiko version, it is   determined whether heic, heif, and avi types are supported.</li> </ul> <p>depend:</p> <ul> <li>depend: Upgrade sketch to version 4.0.0-rc01</li> </ul>"},{"location":"CHANGELOG/#110-rc01","title":"1.1.0-rc01","text":"<p>zoom:</p> <ul> <li>new: New <code>containerWhitespaceMultiple</code> parameter is added to leave a white space between the edge   of the image and the edge of the container. #45</li> </ul> <p>subsampling:</p> <ul> <li>remove: Remove BitmapFrom</li> <li>change: SubsamplingState.disabledTileBitmapCache rename to disabledTileImageCache</li> <li>change: SubsamplingState.tileBitmapCache rename to tileImageCache</li> <li>change: SubsamplingEngine.disabledTileBitmapCacheState rename to disabledTileImageCacheState</li> <li>change: SubsamplingEngine.tileBitmapCacheState rename to tileImageCacheState</li> <li>improve: Improve the sketch series components so that the zoom will no longer be reset after   subsampling initialization is completed. #50</li> <li>improve: Now Sketch, Coil, Glide series components will actively filter the animation diagram when   setting subsampling.</li> <li>new: *ZoomState and *ZoomImageView add a new setSubsamplingImage() method to replace the   setImageSource() method</li> </ul> <p>other:</p> <ul> <li>change: sketch-compose-coil module renamed to sketch-compose-coil3</li> <li>change: sketch-compose-coil-core module renamed to sketch-compose-coil3-core</li> <li>change: sketch-compose-sketch module renamed to sketch-compose-sketch4</li> <li>change: sketch-compose-sketch-core module renamed to sketch-compose-sketch4-core</li> <li>change: sketch-core-coil module renamed to sketch-core-coil3</li> <li>change: sketch-core-coil-core module renamed to sketch-core-coil3-core</li> <li>change: sketch-core-sketch module renamed to sketch-core-sketch4</li> <li>change: sketch-core-sketch-core module renamed to sketch-core-sketch4-core</li> <li>change: sketch-view-coil module renamed to sketch-view-coil3</li> <li>change: sketch-view-coil-core module renamed to sketch-view-coil3-core</li> <li>change: sketch-view-sketch module renamed to sketch-view-sketch4</li> <li>change: sketch-view-sketch-core module renamed to sketch-view-sketch4-core</li> <li>depend: Upgrade jetbrains compose 1.7.0, jetbrains lifecycle 2.8.3</li> </ul>"},{"location":"CHANGELOG/#110-beta01","title":"1.1.0-beta01","text":"<p>zoom:</p> <ul> <li>change: The <code>contentSize</code> properties of ZoomableState and ZoomableEngine now no longer return   <code>containerSize</code> when empty</li> <li>change: The minimum length of the scrollbar is now 10.dp</li> <li>new: 'remember*ZoomState()' series of functions add 'logLevel: Level' parameter</li> </ul> <p>subsampling:</p> <ul> <li>change: Decisions about whether to disable Tile's memory cache are no longer based on the memory   cache setting of the thumbnail's image request</li> <li>improve: Improve SketchZoomImageview, CoilZoomImageView, GlideZoomImageView, PicassoZoomImageView.   Now when setting ImageSource, the ImageSource will be cleared whenever it fails.</li> <li>new: ZoomState and ZoomImageView add <code>setImageSource()</code> method for setting ImageSource</li> </ul>"},{"location":"CHANGELOG/#110-alpha06","title":"1.1.0-alpha06","text":"<p>zoom:</p> <ul> <li>broken: Remove the logger parameter of the 'remember*ZoomState()' series of functions</li> <li>new: Added support for mouse wheel scale   function. #35</li> <li>new: Added support for keyboard scale and drag   functions. #42</li> </ul> <p>subsampling:</p> <ul> <li>broken: Add the suspend modifier to the *ToImageSource methods of the CoilModelToImageSource,   GlideModelToImageSource, and PicassoDataToImageSource interfaces</li> <li>broken: Remove the view parameter of SubsamplingEngine's constructor</li> </ul>"},{"location":"CHANGELOG/#110-alpha05","title":"1.1.0-alpha05","text":"<p>subsampling:</p> <ul> <li>change: *ModelToImageSource for CoilZomState and GlideZoomState changed to provided at create   time</li> <li>new: coil, glide, picasso series components now support 'android.resource:   //example.package.name/drawable/image' and 'android.resource://example.package.name/4125123' types   of models</li> </ul> <p>zoom:</p> <ul> <li>fix: Fix the bug that the values returned by ZoomableEngine's contentSizeState property collect   and value are inconsistent. #37</li> <li>change: The ZoomImage series components disable two-finger dragging gestures to avoid triggering   fling after rapid two-finger zooming, causing the image to   drift. #28</li> </ul> <p>other:</p> <ul> <li>upgrade: Upgrade sketch to version 4.0.0-alpha05</li> </ul>"},{"location":"CHANGELOG/#110-alpha04","title":"1.1.0-alpha04","text":"<p>images of extreme sizes (one side is extremely large and the other is extremely small). #32</p> <ul> <li>fix: Fix the bug that coil and glide series components do not support '/sdcard/sample.jpeg' type   model. #34</li> <li>fix: Fixed a bug that caused the Tile map to calculate abnormally and crash when encountering</li> <li>fix: Fixed the bug where KotlinResourceImageSource on ios could not load   images. #36</li> <li>improve: Now non-Android platforms will directly ignore gif images when subsampling panpf Moments   ago</li> <li>improve: Now subsampling cannot be used as long as either side of the thumbnail exceeds the   original image</li> </ul>"},{"location":"CHANGELOG/#110-alpha03","title":"1.1.0-alpha03","text":"<p>subsampling:</p> <ul> <li>fix: Fixed the bug that coil series components cannot be subsampling starting from version   1.1.0-alpha02. #31</li> <li>improve: GlideModeToImageSource and PicassoDataToImageSource are now priority for user   registration</li> <li>improve: Improve BitmapRegionDecoderDecodeHelper. Input streams will now only be closed on   destruction. #29</li> <li>improve: Tiles loaded from memory now also animate when displayed</li> </ul> <p>zoom:</p> <ul> <li>remove: Removed GestureType.NONE and ContinuousTransformType.NONE properties</li> <li>change: The pausedContinuousTransformType property name of SubsamplingState is changed to   pausedContinuousTransformTypes, and the pausedContinuousTransformTypeState property name of   SubsamplingEngine is changed to pausedContinuousTransformTypesState</li> <li>change: The disabledGestureType property name of ZoomableState is changed to disabledGestureTypes,   and the disabledGestureTypeState property name of ZoomableEngine is changed to   disabledGestureTypesState</li> </ul>"},{"location":"CHANGELOG/#110-alpha02","title":"1.1.0-alpha02","text":"<p>subsampling:</p> <ul> <li>fix: Fixed a bug that caused the failure of subsampling concurrency control to open ImageSource   multiple times in a short period of time\u3002 #29</li> <li>change: Remove the suspend modifier of ImageSource's openSource() method. If you need to suspend,   please use ImageSource.Factory.</li> <li>improve: Relax the aspect ratio restrictions between thumbnails and original   images. #22</li> <li>improve: SketchImageSource, CoilImageSource, GlideHttpImageSource, PicassoHttpImageSource now   support downloading images from the internet</li> <li>new: Added ImageSource.Factory interface for creating ImageSource</li> </ul>"},{"location":"CHANGELOG/#110-alpha01","title":"1.1.0-alpha01","text":"<p>[!CAUTION] To support js and iOS platforms, all <code>remove</code> and <code>change</code> tag changes are destructive</p> <p>subsampling:</p> <ul> <li>remove: Remove the disallowReuseBitmap parameter of the put() method of TileBitmapCache</li> <li>change: Remove ignoreExifOrientation attribute</li> <li>change: Remove disabledTileBitmapReuse and TileBitmapPool attributes</li> <li>change: Non-Android platforms now use Skia to decode images</li> <li>change: Use Jetbrains Lifecycle instead of StoppedController</li> <li>change: ImageSource now uses okio's Source instead of InputStream</li> <li>change: ImageSource.fromResource() on desktop platform changed to fromKotlinResource()</li> <li>change: ImageSource.fromFile(File) is now a JVM platform-specific extension function</li> <li>new: Added support for js, wasmJs, and iOS platforms</li> <li>new: TileBitmap adds bitmapFrom attribute</li> <li>new: GlideZoomAsyncImage, GlideZoomImageView, and PicassoZoomImageView support extended   ImageSource</li> </ul> <p>other:</p> <ul> <li>remove: Remove the showThreadName parameter of Logger</li> <li>remove: Remove the module attribute of Logger</li> <li>change: Logger.DEBUG change to Logger.Level.Debug</li> <li>change: Now each component's log tag is separate</li> <li>change: zoomimage-view-sketch and zoomimage-compose-sketch modules upgraded to sketch4, while   adding zoomimage-view-sketch3 and zoomimage-compose-sketch3 modules to continue to support sketch3</li> <li>change: zoomimage-view-coil and zoomimage-compose-coil modules are upgraded to coil3, and new   The zoomimage-view-coil2 and zoomimage-compose-coil2 modules continue to support coil2</li> <li>change: The name of the <code>state: ZoomState</code> parameter of ZoomImage, SketchZoomAsyncImage,   CoilZoomAsyncImage, GlideZoomAsyncImage and other functions is changed to <code>zoomState: ZoomState</code></li> </ul>"},{"location":"CHANGELOG/#v102","title":"v1.0.2","text":"<ul> <li>fix: Fix the bug that ZoomImageView crashes due to the TypedArray.close() method in API 30 and   below versions. #15</li> <li>fix: Fix the bug that GlideZoomAsyncImage and GlideZoomImageView do not support 'file:   ///android_asset/' and 'file:///sdcard/sample.jpeg' type   model. #16</li> <li>improve: Improved support for Picasso</li> <li>improve: Improved ScalesCalculator.dynamic(), now when reading mode is available mediumScale is   always the initial scaling multiplier of reading mode</li> </ul>"},{"location":"CHANGELOG/#v101","title":"v1.0.1","text":"<ul> <li>fix: Fixed the bug that the image of ZoomImageView would jump when you do not release your hand   after dragging with one finger and then press another finger to perform a two-finger zoom   gesture. #12</li> </ul>"},{"location":"CHANGELOG/#v100","title":"v1.0.0","text":"<p>Initial stable release</p>"},{"location":"CHANGELOG/#v100-rc01","title":"v1.0.0-rc01","text":"<p>zoom:</p> <ul> <li>improve: Improved ZoomableState, ZoomableEngine, SubsamplingState and SubsamplingEngine, now they   all start working when remembered or attached to a window</li> </ul> <p>other:</p> <ul> <li>depend: Upgrade sketch 3.3.0 stable</li> </ul>"},{"location":"CHANGELOG/#v100-beta11","title":"v1.0.0-beta11","text":"<p>zoom:</p> <ul> <li>change: ZoomableEngine's contentSizeState property now uses containerSizeState when it is empty</li> </ul> <p>other:</p> <ul> <li>depend: Upgrade sketch 3.3.0-beta06</li> <li>change: Rename <code>zoomimage-compose-coil-base</code> module to `zoomimage-compose-coil-core</li> <li>improve: GlideZoomAsyncImage and GlideZoomImageView now support GlideUrl</li> </ul>"},{"location":"CHANGELOG/#100-beta10","title":"1.0.0-beta10","text":"<ul> <li>fix: Fixed a bug where ZoomImage could not display scrollbars</li> <li>fix: Fixed a bug where SketchZoomAsyncImage and CoilZoomAsyncImage would crash when they   encountered a drawable without size</li> <li>fix: Fixed the bug where placeholder would be accidentally shrunk when placeholder and result   transitioned between SketchZoomAsyncImage and CoilZoomAsyncImage.</li> <li>improve: composed migrated to Modifier.Node</li> <li>depend: Upgrade Sketch 3.3.0-beta04</li> </ul>"},{"location":"CHANGELOG/#100-beta09","title":"1.0.0-beta09","text":"<ul> <li>fix: Fixed a crash caused by BitmapFactory.Options.outMimeType being null when Android decodes   unsupported image formats</li> <li>change: <code>zoomimage-core</code> module minSdk changed from 21 to 16</li> </ul>"},{"location":"CHANGELOG/#100-beta08","title":"1.0.0-beta08","text":"<p>other:</p> <ul> <li>fix: Fixed a bug that caused the <code>zoomimage-compose-glide</code> module to crash due to no configuration   confusion.</li> <li>change: Now only the <code>zoomimage-core</code> module generates BuildConfig</li> <li>change: ZoomableEngine's scale(), rotate() and other methods add the suspend modifier</li> <li>new: Added <code>zoomimage-compose-coil-base</code> and <code>zoomimage-compose-sketch-core</code> modules, which depend   on the non-singleton modules of Coil and Sketch respectively.</li> <li>depend: Upgrade Sketch 3.3.0-beta02</li> </ul>"},{"location":"CHANGELOG/#100-beta07","title":"1.0.0-beta07","text":"<p>zoom:</p> <ul> <li>fix: Now the one-finger scale and long press callbacks will no longer be triggered at the same   time.</li> <li>fix: Fixed a bug where the View version's double-tap event, long-press event, and two-finger scale   event would be triggered at the same time</li> <li>fix: Fixed the bug that when the Compose version of the component is enlarged in the Pager and   triggers the Pager's sliding at the edge position, sliding back will interrupt the Pager's   sliding.</li> <li>change: The one-finger zoom gesture has been changed to double-click and then drag up and down,   and is now enabled by default</li> <li>change: The x, y parameters of OnViewTapListener and OnViewLongPressListener are combined into one   OffsetCompat</li> <li>improve: Improve the calculateTiles() function, now the right and bottom of the last cell are   always <code>width-1</code> and <code>height -1</code></li> <li>improve: Improve gesture</li> </ul> <p>subsampling:</p> <ul> <li>fix: Fixed a bug with gaps between tiles on desktop platforms</li> </ul>"},{"location":"CHANGELOG/#100-beta06","title":"1.0.0-beta06","text":"<p>zoom:</p> <ul> <li>fix: Fixed the issue where the image can be seen quickly moving from the top to the center in the   initial View version.</li> <li>fix: Fixed the issue where the image can be seen quickly moving from the top to the center in the   initial Compose version.</li> <li>fix: Fixed a bug where weird flashing image content would appear at the edge of the   SketchZoomAsyncImage and CoilZoomAsyncImage components when they are quickly switched in Pager.</li> <li>new: Added HeartbeatHapticFeedback, which will have a heartbeat-like effect when triggering   single-finger zoom.</li> </ul> <p>subsampling:</p> <ul> <li>fix: Fixed a bug where the same tile would be loaded multiple times due to failure to cancel   unfinished background tiles in time when double-clicking to enlarge.</li> <li>fix: Fixed a bug where the View version of the subsampling tile did not set the display count   correctly, causing the image at the corresponding position to appear black.</li> <li>fix: Fixed a bug where the tiles read from the memory cache in the View version were accidentally   discarded, causing the image at the corresponding position to be blurred.</li> </ul> <p>other:</p> <ul> <li>change: rememberZoomImageLogger() function adds level and pipeline parameters</li> </ul>"},{"location":"CHANGELOG/#100-beta05","title":"1.0.0-beta05","text":"<p>zoom:</p> <ul> <li>fix: Fixed a bug where the content did not change with the window due to a slight difference   between the user and the initial value when the user operated and returned to the starting state   and then adjusted the window size</li> </ul> <p>subsampling:</p> <ul> <li>remove: Remove the size property of TileBitmap</li> <li>improve: Subsampling tiles are drawn on separate components</li> <li>improve: Reduce the frequency of TileManager due to containerSize changes</li> <li>new: The Desktop platform supports subsampling</li> <li>new: The Desktop platform supports exif orientation</li> </ul>"},{"location":"CHANGELOG/#100-beta04","title":"1.0.0-beta04","text":"<p>zoom:</p> <ul> <li>change: LongPressSlide rename to OneFingerScale</li> <li>improve: Now keep the scale and visible center unchanged of content only when the container size   changes</li> <li>new: Support for disabling gestures</li> <li>new: Added the Modifier.zoom() function to easily add zoom functionality to other components</li> </ul> <p>subsampling:</p> <ul> <li>change: Added stoppedController attribute instead of setLifecycle() method</li> <li>change: Improved some API names</li> </ul> <p>other:</p> <ul> <li>new: Support for Compose Multiplatform</li> <li>change: The rememberZoomImageLogger function removes the level parameters</li> </ul>"},{"location":"CHANGELOG/#100-beta03","title":"1.0.0-beta03","text":"<p>zoom:</p> <ul> <li>fix: Fixed a bug where the calculateUserOffsetBounds function could return the wrong bounds when   zooming to a full screen, causing a crash</li> <li>fix: Fixed a bug where GlideZoomAsyncImage would load bitmaps larger than the view, causing a   crash</li> <li>improve: Upgrade GlideImage 1.0.0-beta01</li> <li>improve: NoClipImage rename to NoClipContentImage</li> </ul>"},{"location":"CHANGELOG/#100-beta02","title":"1.0.0-beta02","text":"<p>zoom:</p> <p>fix: Fixed a bug where ZoomImage could not be scaled after switching in Pager new: Supports one finger scale function</p>"},{"location":"CHANGELOG/#100-beta01","title":"1.0.0-beta01","text":"<p>zoom:</p> <ul> <li>fix: Fixed a bug where ZoomImageView sometimes did not animate when double-clicking to zoom</li> <li>change: The external properties of ZoomableEngine are now wrapped in StateFlow and can be listened   to directly</li> <li>improve: Avoid triggering Pager's swipe at the smallest zoom factor and multi-finger touch</li> </ul> <p>subsampling:</p> <ul> <li>fix: Fixed a bug where subsampling could fail</li> <li>fix: The tileGridSizeMap property now returns the correct size</li> <li>fix: Fixed a bug where the calculateTileGridMap() function raised OutOfMemoryError when it   encountered a particularly small tileMaxSize</li> <li>change: The external properties of SubsamplingEngine are now wrapped in StateFlow and can be   listened to directly</li> <li>change: The ImageSource.openInputStream() method removes the suspend modifier</li> <li>change: pauseWhenTransforming change to pausedContinuousTransformType</li> <li>improve: Improved calculateImageLoadRect() calculations that now do not exceed imageSize</li> <li>improve: Tile concurrent loads reduced from 4 to 2 to reduce memory footprint and improve UI   performance</li> <li>new: SubsamplingState and SubsamplingEngine add tileGridSizeMap properties</li> <li>new: Subsampling now changes in sharpness continuously when switching sampleSize and no longer   always transitions from the base image</li> </ul> <p>other:</p> <ul> <li>fix: Fixed the bug that the level judgment error caused the log not to be printed</li> <li>build: Upgrade compileSdk to 34, kotlinx-coroutines to 1.7.3, compose to 1.5.0</li> </ul>"},{"location":"CHANGELOG/#100-alpha03","title":"1.0.0-alpha03","text":"<p>zoom:</p> <ul> <li>fix: Fixed a bug where ZoomImageView would significantly pan the image after lifting one finger   when zooming with two fingers</li> <li>fix: Fixed a bug where the rotate method was unusually when it encountered a negative rotation   angle</li> <li>fix: Fixed a bug where zoom animation time could crash when the animation time was 0</li> <li>change: ScalesCalculator is now compatible with ReadMode</li> <li>change: onViewTapListener and onViewLongPressListener replace registerOnViewTapListener and   registerOnViewLongPressListener</li> <li>change: ZoomImageView's zoomAbility property rename to zoomable, subsamplingAbility rename to   subsampling</li> <li>improve: Compatible with models MIX4, ROM version 14.0.6.0, Android version 13 environment when   the navigation bar is enabled but the app does not actively adapt to the navigation bar, an issue   that triggers a reset due to a change in View size after the screen is unlocked</li> <li>improve: ZoomImageView now supports scaleType is MATRIX</li> <li>new: ZoomImageView adds xml attribute support</li> </ul> <p>other:</p> <ul> <li>change: The logger parameter for ZoomableState, SubsamplingState, ZoomableEngine, and   SubsamplingEngine was changed to private</li> </ul>"},{"location":"CHANGELOG/#100-alpha02","title":"1.0.0-alpha02","text":"<p>zoom:</p> <ul> <li>change: The location() methods of ZoomableState and ZoomAbility rename to locate()</li> <li>new: ZoomImageView added OnResetListener</li> </ul> <p>subsampling:</p> <ul> <li>change: SubsamplingAbility's registerOnTileChangedListener(), unregisterOnTileChangedListener()   methods renamed to registerOnTileChangeListener(), unregisterOnTileChangeListener()</li> <li>change: Subsampling's paused property rename to stopped</li> <li>new: Subsampling supports tile animation</li> <li>new: Subsampling added the pauseWhenTransforming property</li> </ul>"},{"location":"CHANGELOG/#100-alpha01","title":"1.0.0-alpha01","text":"<p>Initial release</p>"},{"location":"click/","title":"Click","text":""},{"location":"click/#click-events","title":"Click Events","text":"<p>Translations: \u7b80\u4f53\u4e2d\u6587</p> <p>[!TIP] * The following example takes precedence over the Compose version component for demonstration * ZoomState.zoomable is equivalent to ZoomImageView.zoomable * ZoomState.subsampling is equivalent to ZoomImageView.subsampling</p> <p>ZoomImage needs to receive double-click events, so it has to intercept click and long press events, and you can receive both events through the provided interface</p>"},{"location":"click/#examples","title":"Examples","text":"<p>compose\uff1a</p> <pre><code>SketchZoomAsyncImage(\n    uri = \"https://sample.com/sample.jpeg\",\n    contentDescription = \"view image\",\n    modifier = Modifier.fillMaxSize(),\n    onTap = { touch: Offset -&gt;\n        // Click Events\n    },\n    onLongPress = { touch: Offset -&gt;\n        // Long press event    \n    },\n)\n</code></pre> <p>view\uff1a</p> <p>View's setOnClickListener and setOnLongClickListener methods are still available Additional OnViewTapListener and OnViewLongPressListener interfaces with touch location are provided</p> <pre><code>val sketchZoomImageView = SketchZoomImageView(context)\n\nsketchZoomImageView.onViewTapListener = { view: android.view.View, x: Float, y: Float -&gt;\n    // Click Events\n}\n\nsketchZoomImageView.onViewLongPressListener = { view: android.view.View, x: Float, y: Float -&gt;\n    // Long press event      \n}\n</code></pre>"},{"location":"getting_started/","title":"Getting Started","text":""},{"location":"getting_started/#get-started","title":"Get Started","text":"<p>Translations: \u7b80\u4f53\u4e2d\u6587</p>"},{"location":"getting_started/#components","title":"Components","text":"<p>The ZoomImage library includes several components to choose from, so you can choose the right one for your needs.</p> <p>Compose multiplatform\uff1a</p> <ul> <li>SketchZoomAsyncImage\uff1aIntegrated Sketch image loading library, support network images and   subsampling. Example: SketchZoomAsyncImageSample. <code>Recommended</code></li> <li>CoilZoomAsyncImage\uff1aIntegrated Coil   image loading library, support network images and subsampling. Example: CoilZoomAsyncImageSample</li> <li>ZoomImage\uff1aThe basic zoom component does not integrate the image loading library and does not   support network images. You need to call <code>subsampling.setImageResource()</code>   method to support subsampling. Example: ZoomImageSample</li> </ul> <p>Only android compose\uff1a</p> <ul> <li>GlideZoomAsyncImage\uff1aIntegrated Glide   image loading library, support network images and subsampling.   Example: GlideZoomAsyncImageSample</li> </ul> <p>Android view\uff1a</p> <ul> <li>SketchZoomImageView\uff1aIntegrated Sketch   image loading library, support network images and subsampling.   Example: SketchZoomImageViewFragment. <code>Recommended</code></li> <li>CoilZoomImageView\uff1aIntegrated Coil   image loading library, support network images and subsampling.   Example: CoilZoomImageViewFragment</li> <li>GlideZoomImageView\uff1aIntegrated Glide   image loading library, support network images and subsampling.   Example: GlideZoomImageViewFragment</li> <li>PicassoZoomImageView\uff1aIntegrated Picasso   image loading library, support network images and subsampling.   Example: PicassoZoomImageViewFragment</li> <li>ZoomImageView   \uff1aThe basic zoom component does not integrate the image loading library and does not support   network images. You need to call <code>subsampling.setImageResource()</code>   method to support subsampling. Example: ZoomImageViewFragment</li> </ul> <p>[!TIP] * Different components need to import different dependencies, please refer     to README to import the corresponding dependencies* * Components with integrated image loaders can support image and subsampling from any source     without any additional work * Components that do not integrate an image loader can only display local images and require an     additional call to the <code>setSubsamplingImage()</code> method to support subsampling     functionality</p>"},{"location":"getting_started/#examples","title":"Examples","text":"<p>Compose multiplatform\uff1a</p> <pre><code>// Using the basic ZoomImage component\nval zoomState: ZoomState by rememberZoomState()\nval imageSource = remember {\n    val resUri = Res.getUri(\"files/huge_world.jpeg\")\n  ImageSource.fromComposeResource(resUri)\n}\nzoomState.setSubsamplingImage(imageSource)\nZoomImage(\n    painter = painterResource(Res.drawable.huge_world_thumbnail),\n    contentDescription = \"view image\",\n    modifier = Modifier.fillMaxSize(),\n    zoomState = zoomState,\n)\n\n// Using the SketchZoomAsyncImage component\nSketchZoomAsyncImage(\n    uri = \"https://sample.com/sample.jpeg\",\n    contentDescription = \"view image\",\n    modifier = Modifier.fillMaxSize(),\n)\n\n// Using the CoilZoomAsyncImage component\nCoilZoomAsyncImage(\n    model = \"https://sample.com/sample.jpeg\",\n    contentDescription = \"view image\",\n    modifier = Modifier.fillMaxSize(),\n)\n</code></pre> <p>Only android compose\uff1a</p> <pre><code>// Using the GlideZoomAsyncImage component\nGlideZoomAsyncImage(\n    model = \"https://sample.com/sample.jpeg\",\n    contentDescription = \"view image\",\n    modifier = Modifier.fillMaxSize(),\n)\n</code></pre> <p>Android view\uff1a</p> <pre><code>// Using the basic ZoomImageImage component\nval zoomImageView = ZoomImageView(context)\nzoomImageView.setImageResource(R.drawable.huge_world_thumbnail)\nval imageSource = ImageSource.fromResource(context, R.raw.huge_world)\nzoomImageView.setSubsamplingImage(imageSource)\n\n// Using the SketchZoomImageView component\nval sketchZoomImageView = SketchZoomImageView(context)\nsketchZoomImageView.loadImage(\"https://sample.com/sample.jpeg\")\n\n// Using the CoilZoomImageView component\nval coilZoomImageView = CoilZoomImageView(context)\ncoilZoomImageView.load(\"https://sample.com/sample.jpeg\")\n\n// Using the GlideZoomImageView component\nval glideZoomImageView = GlideZoomImageView(context)\nGlide.with(this@GlideZoomImageViewFragment)\n    .load(\"https://sample.com/sample.jpeg\")\n    .into(glideZoomImageView)\n\n// Using the PicassoZoomImageView component\nval picassoZoomImageView = PicassoZoomImageView(context)\npicassoZoomImageViewImage.loadImage(\"https://sample.com/sample.jpeg\")\n</code></pre> <p>[!TIP] * PicassoZoomImageView provides a set of specialized APIs to listen for load results and get URIs,     to support subsampling, so please don't load images directly using the official API * For more usage methods related to image loading of each component, please refer to the usage of     its original component.</p>"},{"location":"getting_started/#zoom-and-subsampling","title":"Zoom And Subsampling","text":"<p>The scaling and subsampling APIs are encapsulated in different classes. You can directly control scaling and subsampling or obtain related information through them, as follows:</p> <ul> <li>compose versions are ZoomableState and SubsamplingState</li> <li>view versions are ZoomableEngine and SubsamplingEngine</li> </ul> <p>Example:</p> <pre><code>// compose\nval zoomState: ZoomState by rememberSketchZoomState()\nSketchZoomAsyncImage(\n    uri = \"https://sample.com/sample.jpeg\",\n    contentDescription = \"view image\",\n    modifier = Modifier.fillMaxSize(),\n    zoomState = zoomState,\n)\nval zoomable: ZoomableState = zoomState.zoomable\nval subsampling: SubsamplingState = zoomState.subsampling\n\n// view\nval sketchZoomImageView = SketchZoomImageView(context)\nval zoomable: ZoomableEngine = sketchZoomImageView.zoomable\nval subsampling: SubsamplingEngine = sketchZoomImageView.subsampling\n</code></pre>"},{"location":"getting_started/#public-properties","title":"Public Properties","text":"<p>[!TIP] Note: The relevant properties of the view version are wrapped in StateFlow, so its name is suffixed with State compared to the compose version</p> <p>Properties that can be read or set:</p> <ul> <li><code>zoomable.contentScale: ContentScale</code>: The default scaling method of content is ContentScale.Fit</li> <li><code>zoomable.alignment: Alignment</code>: The alignment of content in container is Alignment.TopStart by   default</li> <li><code>zoomable.layoutDirection: LayoutDirection</code>: The layout direction of container, the default is   LayoutDirection.Ltr</li> <li><code>zoomable.readMode: ReadMode?</code>: Reading mode configuration, default is null</li> <li><code>zoomable.scalesCalculator: ScalesCalculator</code>: The minScale, mediumScale, and maxScale   calculators, the default is ScalesCalculator.Dynamic</li> <li><code>zoomable.threeStepScale: Boolean</code>: Whether to zoom in between minScale, mediumScale and maxScale   when double-clicking to zoom, default is false</li> <li><code>zoomable.rubberBandScale: Boolean</code>: Whether to enable the rubber band effect, the default is true</li> <li><code>zoomable.oneFingerScaleSpec: OneFingerScaleSpec</code>: Single-referential scaling configuration,   default is OneFingerScaleSpec.Default</li> <li><code>zoomable.animationSpec: ZoomAnimationSpec</code>: Animation configurations such as zoom, offset, etc.,   default is ZoomAnimationSpec.Default</li> <li><code>zoomable.limitOffsetWithinBaseVisibleRect: Boolean</code>: Whether to limit the offset to   contentBaseVisibleRect, the default is false</li> <li><code>zoomable.containerWhitespaceMultiple: Float</code>: Add blank space around the container based on   multiples of the container size, the default is 0f</li> <li><code>zoomable.containerWhitespace: ContainerWhitespace</code>: The configuration of blank areas around the   container has higher priority than containerWhitespaceMultiple, and the default is   ContainerWhitespace.Zero</li> <li><code>zoomable.keepTransformWhenSameAspectRatioContentSizeChanged: Boolean</code>: Whether to keep transform   unchanged when the contentSize of the same aspect ratio is changed, the default is false</li> <li><code>zoomable.disabledGestureTypes: Int</code>: Configure the disabled gesture type, the default is 0 (no   gesture is disabled), and multiple gesture types can be combined using the bits or actions of   GestureType</li> <li><code>zoomable.reverseMouseWheelScale: Boolean</code>: Whether to reverse the direction of the mouse wheel,   the default is false</li> <li><code>zoomable.mouseWheelScaleCalculator: MouseWheelScaleCalculator</code>: Mouse wheel zoom calculator, the   default is MouseWheelScaleCalculator.Default</li> <li><code>subsampling.disabled: Boolean</code>: Whether to disable subsampling function</li> <li><code>subsampling.tileImageCache: TileImageCache?</code>: The memory cache of Tile tile is null by default.   The components that integrate the image loader will automatically set it.</li> <li><code>subsampling.disabledTileImageCache: Boolean</code>: Whether to disable the memory cache of Tile tile,   default to false</li> <li><code>subsampling.tileAnimationSpec: TileAnimationSpec</code>: The configuration of tile animation is default   to TileAnimationSpec.Default</li> <li><code>subsampling.pausedContinuousTransformTypes: Int</code>: Pauses the configuration of continuous   transformation types for loading tiles. Multiple types can be combined by bits or operators. The   default is TileManager.DefaultPausedContinuousTransformType</li> <li><code>subsampling.disabledBackgroundTiles: Boolean</code>: Whether to disable background tile, default to   false</li> <li><code>subsampling.stopped: Boolean</code>: Whether to stop loading tiles, default to false</li> <li><code>subsampling.disabledAutoStopWithLifecycle: Boolean</code>: Whether to disable automatic stop loading of   tiles based on Lifecycle, default to false</li> <li><code>subsampling.regionDecoders: List&lt;RegionDecoder.Factory&gt;</code>: Add a custom RegionDecoder, default to   an empty list</li> <li><code>subsampling.showTileBounds: Boolean</code>: Whether to display the boundary of Tile, default to false</li> </ul> <p>Readable properties:</p> <ul> <li><code>zoomable.containerSize: IntSize</code>: The size of the container that holds the content</li> <li><code>zoomable.contentSize: IntSize</code>: The size of the content, usually Painter.intrinsicSize.round()</li> <li><code>zoomable.contentOriginSize: IntSize</code>: The original size of the content</li> <li><code>zoomable.transform.scale: ScaleFactor</code>: Current scaling (baseTransform.scale *   userTransform.scale)</li> <li><code>zoomable.baseTransform.scale: ScaleFactor</code>: The current underlying scale, affected by the   contentScale and alignment parameter</li> <li><code>zoomable.userTransform.scale: ScaleFactor</code>: The current user scaling factor is affected by   scale(), locate(), user gesture scale, double-click and other operations</li> <li><code>zoomable.minScale: Float</code>: Minimum scale factor, for limits the final scale factor, and as a   target value for one of when switch scale</li> <li><code>zoomable.mediumScale: Float</code>: Medium scale factor, only as a target value for one of when switch   scale</li> <li><code>zoomable.maxScale: Float</code>: Maximum scale factor, for limits the final scale factor, and as a   target value for one of when switch scale</li> <li><code>zoomable.continuousTransformType: Int</code>: If true, a transformation is currently in progress,   possibly in a continuous gesture operation, or an animation is in progress</li> <li><code>zoomable.contentBaseDisplayRectF: Rect</code>: The content region in the container after the   baseTransform transformation</li> <li><code>zoomable.contentBaseDisplayRect: IntRect</code>: The content region in the container after the   baseTransform transformation</li> <li><code>zoomable.contentBaseVisibleRectF: Rect</code>: The content is visible region to the user after the   baseTransform transformation</li> <li><code>zoomable.contentBaseVisibleRect: IntRect</code>: The content is visible region to the user after the   baseTransform transformation</li> <li><code>zoomable.contentDisplayRectF: Rect</code>: The content region in the container after the final   transform transformation</li> <li><code>zoomable.contentDisplayRect: IntRect</code>: The content region in the container after the final   transform transformation</li> <li><code>zoomable.contentVisibleRectF: Rect</code>: The content is visible region to the user after the final   transform transformation</li> <li><code>zoomable.contentVisibleRect: IntRect</code>: The content is visible region to the user after the final   transform transformation</li> <li><code>zoomable.sourceScaleFactor: ScaleFactor</code>: Scaling ratio based on the original image</li> <li><code>zoomable.sourceVisibleRectF: Rect</code>: contentVisibleRect maps to the area on the original image</li> <li><code>zoomable.sourceVisibleRect: IntRect</code>: contentVisibleRect maps to the area on the original image</li> <li><code>zoomable.scrollEdge: ScrollEdge</code>: Edge state for the current offset</li> <li><code>subsampling.ready: Boolean</code>: Whether the image is ready for subsampling</li> <li><code>subsampling.imageInfo: ImageInfo</code>: The information of the image, including width, height, format,   exif information, etc</li> <li><code>subsampling.tileGridSizeMap: Map&lt;Int, IntOffset&gt;</code>: Tile grid size map</li> <li><code>subsampling.sampleSize: Int</code>: The sample size of the image</li> <li><code>subsampling.imageLoadRect: IntRect</code>: The image load rect</li> <li><code>subsampling.foregroundTiles: List&lt;TileSnapshot&gt;</code>: List of current foreground tiles</li> <li><code>subsampling.backgroundTiles: List&lt;TileSnapshot&gt;</code>: List of current background tiles</li> </ul> <p>Interactive methods:</p> <ul> <li><code>zoomable.scale()</code>: Scaling content to the specified multiple</li> <li><code>zoomable.scaleBy()</code>: Incrementally scale the multiple specified by content by multiplication</li> <li><code>zoomable.scaleByPlus()</code>: Incrementally scale content specified multiples by addition</li> <li><code>zoomable.switchScale()</code>: Switch the scaling multiple of the content, loop between minScale and   mediumScale by default, if threeStepScale is true, loop between minScale, mediumScale and maxScale</li> <li><code>zoomable.offset()</code>: Offset content to the specified location</li> <li><code>zoomable.offsetBy()</code>: Offset as incremental content specified offset</li> <li><code>zoomable.locate()</code>: Position to a specified position on the content, or scale to a specified   multiple when used.</li> <li><code>zoomable.rotate()</code>: Rotate content to the specified angle, the angle can only be multiples of 90</li> <li><code>zoomable.rotateBy()</code>: Rotate the angle specified by content in incremental manner, the angle can   only be multiples of 90.</li> <li><code>zoomable.getNextStepScale(): Float</code>: Get the next scaling multiple, loop between minScale and   mediumScale by default, if threeStepScale is true, loop between minScale, mediumScale and maxScale</li> <li><code>zoomable.touchPointToContentPoint(): IntOffset</code>: Convert the touch point to a point on the   content, the origin is the upper left corner of the content</li> <li><code>zoomable.touchPointToContentPointF(): Offset</code>: Convert the touch point to a point on the content,   the origin is the upper left corner of the content</li> <li><code>zoomable.sourceToDraw(Offset): Offset</code>: Convert the points on the original image to the points at   the time of drawing, the origin is the upper left corner of the container</li> <li><code>zoomable.sourceToDraw(Rect): Rect</code>: Convert the rectangle on the original image to the rectangle   when drawing, the origin is the upper left corner of the container</li> <li><code>zoomable.canScroll(): Boolean</code>: Determine whether the current content can scroll in the specified   direction</li> <li><code>subsampling.setImage(): Boolean</code>: Set the subsampling image, return whether it is successful, the   components that integrate the image loader will automatically set the subsampling image</li> </ul>"},{"location":"getting_started/#listen-property-changed","title":"Listen property changed","text":"<ul> <li>The relevant properties of the compose version are wrapped in State and can be read directly in   the Composable function to implement listening</li> <li>The relevant properties of the view are wrapped in StateFlow, and its collect function can be   called to implement the listening</li> </ul> <p>[!TIP] For more detailed information about scale, offset, rotation, subsampling, read mode, scroll bar and other functions, please refer to the documentation at the end of the page*</p>"},{"location":"getting_started/#document","title":"Document","text":"<ul> <li>Scale: Scale the image to see clearer details</li> <li>Offset: Move the image to see content outside the container</li> <li>Rotate: Rotate the image to view content from different angles</li> <li>Locate: Locate anywhere in the image</li> <li>Keep Transform: Keep transform when switching images</li> <li>Read Mode: Long images initially fill the screen for easy reading</li> <li>Click: Receive click events</li> <li>Subsampling: Display large images through subsampling to avoid OOM</li> <li>Scroll Bar: Displays horizontal and vertical scroll bars</li> <li>Log: Modify log level and output pipeline</li> <li>Modifier.zoom()</li> </ul>"},{"location":"keep_transform/","title":"Keep Transform","text":""},{"location":"keep_transform/#keep-transform","title":"Keep Transform","text":"<p>Translations: \u7b80\u4f53\u4e2d\u6587</p> <p>ZoomImage will directly reset the transformation state when the following properties are changed:</p> <ul> <li>rotation</li> <li>contentScale</li> <li>alignment</li> <li>readMode</li> <li>scalesCalculator</li> <li>limitOffsetWithinBaseVisibleRect</li> <li>containerWhitespaceMultiple</li> <li>containerWhitespace</li> </ul>"},{"location":"keep_transform/#containersize-changed","title":"containerSize Changed","text":"<p>Only when the containerSize property changes, ZoomImage will restore the transform state according to the new containerSize and the current transform state, ensuring that the center point currently visible to the user is always in the center of the screen. This way, when you change the window size on the desktop platform, ZoomImage will automatically adapt to the new window size and keep the visible center unchanged, and the visible range will also change.</p> <p>[!TIP] When the containerSize property changes while the above other properties also change, ZoomImage will directly reset the transformation state</p>"},{"location":"keep_transform/#contentsize-or-contentoriginsize-changed","title":"contentSize or contentOriginSize changed","text":"<p>By default, ZoomImage will reset the transform state directly only when the contentSize or contentOriginSize attributes changed.</p> <p>But after you set the <code>keepTransformWhenSameAspectRatioContentSizeChanged</code> property to true, ZoomImage will restore the transform state, ensuring that the range visible to the user remains unchanged. In this way, the thumbnail is displayed first, then the user operates the transformation, and finally displays the original image, the transformation state will not be reset.</p> <p>The <code>keepTransformWhenSameAspectRatioContentSizeChanged</code> property only works when switching images with the same aspect ratio, so this feature is only suitable for scenes when switching thumbnails and original images, so it is not enabled by default.</p> <p>[!TIP] When the contentSize or contentOriginSize property changes, the above other properties also change, ZoomImage will directly reset the transformation state</p>"},{"location":"locate/","title":"Locate","text":""},{"location":"locate/#locate","title":"Locate","text":"<p>Translations: \u7b80\u4f53\u4e2d\u6587</p> <p>[!TIP] * The following example takes precedence over the Compose version component for demonstration * ZoomState.zoomable is equivalent to ZoomImageView.zoomable * ZoomState.subsampling is equivalent to ZoomImageView.subsampling</p>"},{"location":"locate/#locate_1","title":"locate()","text":"<p>ZoomImage provides a modified <code>locate()</code> method to locate the specified position of the image, which is displayed in the middle of the screen (except for the edge position), which has three parameters:</p> <ul> <li>contentPoint: IntOffset: The anchor on the content, the origin is the upper-left corner of the   content</li> <li>targetScale: Float = transform.scaleX: The target magnification, which defaults to the current   magnification</li> <li>animated: Boolean = false: Whether to use animation, the default is false</li> </ul> <p>Example:</p> <pre><code>val zoomState: ZoomState by rememberSketchZoomState()\n\nSketchZoomAsyncImage(\n  uri = \"https://sample.com/sample.jpeg\",\n    contentDescription = \"view image\",\n    modifier = Modifier.fillMaxSize(),\n    zoomState = zoomState,\n)\n\nval coroutineScope = rememberCoroutineScope()\nButton(\n    onClick = {\n        // Locate to the center of the content and zoom to mediumScale if the current zoom factor is less than MediumScale\n        coroutineScope.launch {\n            zoomState.zoomable.locate(\n                contentPoint = zoomState.zoomable.contentSize.center,\n                targetScale = zoomState.zoomable.transform.scaleX.coerceAtLeast(zoomState.zoomable.mediumScale),\n                animated = true,\n            )\n        }\n    }\n) {\n    Text(text = \"locate to center\")\n}\n</code></pre>"},{"location":"log/","title":"Log","text":""},{"location":"log/#log","title":"Log","text":"<p>Translations: \u7b80\u4f53\u4e2d\u6587</p> <p>[!TIP] * The following example takes precedence over the Compose version component for demonstration * ZoomState.zoomable is equivalent to ZoomImageView.zoomable * ZoomState.subsampling is equivalent to ZoomImageView.subsampling</p> <p>ZoomImage generates some logs during its run, which can help you find the problem when something goes wrong and help you understand it How ZoomImage works.</p>"},{"location":"log/#logger","title":"Logger","text":"<p>The Logger class encapsulates the print, level control, and output pipelines of logs</p>"},{"location":"log/#level","title":"level","text":"<p>The Logger.level property controls the print level of the log, the default is INFO, you can modify it to expand the output range of the log</p> <p>Example:</p> <pre><code>val zoomState: ZoomState by rememberSketchZoomState()\n\nzoomState.logger.level = Logger.DEBUG\n\nSketchZoomAsyncImage(\n    uri = \"https://sample.com/sample.jpeg\",\n    contentDescription = \"view image\",\n    modifier = Modifier.fillMaxSize(),\n    zoomState = zoomState,\n)\n</code></pre>"},{"location":"log/#pipeline","title":"pipeline","text":"<p>The Logger.pipeline property controls the output pipeline of the log, and the default is AndroidLogPipeline to output to Android console, you can modify it to output logs elsewhere</p> <p>Example:</p> <pre><code>val zoomState: ZoomState by rememberSketchZoomState()\n\nzoomState.logger.pipeline = MyLoggerPipeline()\n\nSketchZoomAsyncImage(\n    uri = \"https://sample.com/sample.jpeg\",\n    contentDescription = \"view image\",\n    modifier = Modifier.fillMaxSize(),\n    zoomState = zoomState,\n)\n</code></pre>"},{"location":"modifier_zoom/","title":"Modifier.zoom()","text":""},{"location":"modifier_zoom/#modifierzoom","title":"Modifier.zoom()","text":"<p>Translations: \u7b80\u4f53\u4e2d\u6587</p> <p>The Compose version of the ZoomImage component relies on <code>Modifier.zoom()</code> for scaling, and it can also be used on any Compose component</p> <p>Example:</p> <pre><code>val zoomableState = rememberZoomableState()\nval text = remember {\n    \"\"\"\n    \u516d\u738b\u6bd5\uff0c\u56db\u6d77\u4e00\uff0c\u8700\u5c71\u5140\uff0c\u963f\u623f\u51fa\u3002\u8986\u538b\u4e09\u767e\u4f59\u91cc\uff0c\u9694\u79bb\u5929\u65e5\u3002\u9a8a\u5c71\u5317\u6784\u800c\u897f\u6298\uff0c\u76f4\u8d70\u54b8\u9633\u3002\u4e8c\u5ddd\u6eb6\u6eb6\uff0c\u6d41\u5165\u5bab\u5899\u3002\u4e94\u6b65\u4e00\u697c\uff0c\u5341\u6b65\u4e00\u9601\uff1b\u5eca\u8170\u7f26\u56de\uff0c\u6a90\u7259\u9ad8\u5544\uff1b\u5404\u62b1\u5730\u52bf\uff0c\u94a9\u5fc3\u6597\u89d2\u3002\u76d8\u76d8\u7109\uff0c\u56f7\u56f7\u7109\uff0c\u8702\u623f\u6c34\u6da1\uff0c\u77d7\u4e0d\u77e5\u5176\u51e0\u5343\u4e07\u843d\u3002\u957f\u6865\u5367\u6ce2\uff0c\u672a\u4e91\u4f55\u9f99\uff1f\u590d\u9053\u884c\u7a7a\uff0c\u4e0d\u9701\u4f55\u8679\uff1f\u9ad8\u4f4e\u51a5\u8ff7\uff0c\u4e0d\u77e5\u897f\u4e1c\u3002\u6b4c\u53f0\u6696\u54cd\uff0c\u6625\u5149\u878d\u878d\uff1b\u821e\u6bbf\u51b7\u8896\uff0c\u98ce\u96e8\u51c4\u51c4\u3002\u4e00\u65e5\u4e4b\u5185\uff0c\u4e00\u5bab\u4e4b\u95f4\uff0c\u800c\u6c14\u5019\u4e0d\u9f50\u3002\u3000\u3000\n\n    \u5983\u5ad4\u5ab5\u5af1\uff0c\u738b\u5b50\u7687\u5b59\uff0c\u8f9e\u697c\u4e0b\u6bbf\uff0c\u8f87\u6765\u4e8e\u79e6\u3002\u671d\u6b4c\u591c\u5f26\uff0c\u4e3a\u79e6\u5bab\u4eba\u3002\u660e\u661f\u8367\u8367\uff0c\u5f00\u5986\u955c\u4e5f\uff1b\u7eff\u4e91\u6270\u6270\uff0c\u68b3\u6653\u9b1f\u4e5f\uff1b\u6e2d\u6d41\u6da8\u817b\uff0c\u5f03\u8102\u6c34\u4e5f\uff1b\u70df\u659c\u96fe\u6a2a\uff0c\u711a\u6912\u5170\u4e5f\u3002\u96f7\u9706\u4e4d\u60ca\uff0c\u5bab\u8f66\u8fc7\u4e5f\uff1b\u8f98\u8f98\u8fdc\u542c\uff0c\u6773\u4e0d\u77e5\u5176\u6240\u4e4b\u4e5f\u3002\u4e00\u808c\u4e00\u5bb9\uff0c\u5c3d\u6001\u6781\u598d\uff0c\u7f26\u7acb\u8fdc\u89c6\uff0c\u800c\u671b\u5e78\u7109\u3002\u6709\u4e0d\u89c1\u8005\u4e09\u5341\u516d\u5e74\u3002\u71d5\u8d75\u4e4b\u6536\u85cf\uff0c\u97e9\u9b4f\u4e4b\u7ecf\u8425\uff0c\u9f50\u695a\u4e4b\u7cbe\u82f1\uff0c\u51e0\u4e16\u51e0\u5e74\uff0c\u527d\u63a0\u5176\u4eba\uff0c\u501a\u53e0\u5982\u5c71\u3002\u4e00\u65e6\u4e0d\u80fd\u6709\uff0c\u8f93\u6765\u5176\u95f4\u3002\u9f0e\u94db\u7389\u77f3\uff0c\u91d1\u5757\u73e0\u783e\uff0c\u5f03\u63b7\u9026\u8fe4\uff0c\u79e6\u4eba\u89c6\u4e4b\uff0c\u4ea6\u4e0d\u751a\u60dc\u3002\n\u3000  \n    \u55df\u4e4e\uff01\u4e00\u4eba\u4e4b\u5fc3\uff0c\u5343\u4e07\u4eba\u4e4b\u5fc3\u4e5f\u3002\u79e6\u7231\u7eb7\u5962\uff0c\u4eba\u4ea6\u5ff5\u5176\u5bb6\u3002\u5948\u4f55\u53d6\u4e4b\u5c3d\u9531\u94e2\uff0c\u7528\u4e4b\u5982\u6ce5\u6c99\uff1f\u4f7f\u8d1f\u680b\u4e4b\u67f1\uff0c\u591a\u4e8e\u5357\u4ea9\u4e4b\u519c\u592b\uff1b\u67b6\u6881\u4e4b\u693d\uff0c\u591a\u4e8e\u673a\u4e0a\u4e4b\u5de5\u5973\uff1b\u9489\u5934\u78f7\u78f7\uff0c\u591a\u4e8e\u5728\u5ebe\u4e4b\u7c9f\u7c92\uff1b\u74e6\u7f1d\u53c2\u5dee\uff0c\u591a\u4e8e\u5468\u8eab\u4e4b\u5e1b\u7f15\uff1b\u76f4\u680f\u6a2a\u69db\uff0c\u591a\u4e8e\u4e5d\u571f\u4e4b\u57ce\u90ed\uff1b\u7ba1\u5f26\u5455\u54d1\uff0c\u591a\u4e8e\u5e02\u4eba\u4e4b\u8a00\u8bed\u3002\u4f7f\u5929\u4e0b\u4e4b\u4eba\uff0c\u4e0d\u6562\u8a00\u800c\u6562\u6012\u3002\u72ec\u592b\u4e4b\u5fc3\uff0c\u65e5\u76ca\u9a84\u56fa\u3002\u620d\u5352\u53eb\uff0c\u51fd\u8c37\u4e3e\uff0c\u695a\u4eba\u4e00\u70ac\uff0c\u53ef\u601c\u7126\u571f\uff01\u3000\u3000\n\n    \u545c\u547c\uff01\u706d\u516d\u56fd\u8005\u516d\u56fd\u4e5f\uff0c\u975e\u79e6\u4e5f\uff1b\u65cf\u79e6\u8005\u79e6\u4e5f\uff0c\u975e\u5929\u4e0b\u4e5f\u3002\u55df\u4e4e\uff01\u4f7f\u516d\u56fd\u5404\u7231\u5176\u4eba\uff0c\u5219\u8db3\u4ee5\u62d2\u79e6\uff1b\u4f7f\u79e6\u590d\u7231\u516d\u56fd\u4e4b\u4eba\uff0c\u5219\u9012\u4e09\u4e16\u53ef\u81f3\u4e07\u4e16\u800c\u4e3a\u541b\uff0c\u8c01\u5f97\u800c\u65cf\u706d\u4e5f\uff1f\u79e6\u4eba\u4e0d\u6687\u81ea\u54c0\uff0c\u800c\u540e\u4eba\u54c0\u4e4b\uff1b\u540e\u4eba\u54c0\u4e4b\u800c\u4e0d\u9274\u4e4b\uff0c\u4ea6\u4f7f\u540e\u4eba\u800c\u590d\u54c0\u540e\u4eba\u4e5f\u3002\n\n                                \u2014\u2014\u5510\u4ee3\u00b7\u675c\u7267\u300a\u963f\u623f\u5bab\u8d4b\u300b\n\"\"\".trimIndent()\n}\nBox(\n    modifier = Modifier\n        .fillMaxSize()\n        .zoom(zoomableState)\n) {\n    Text(\n        text = text,\n        modifier = Modifier\n            .background(MaterialTheme.colorScheme.secondaryContainer)\n            .padding(10.dp)\n    )\n}\n</code></pre>"},{"location":"offset/","title":"Offset","text":""},{"location":"offset/#offset","title":"Offset","text":"<p>Translations: \u7b80\u4f53\u4e2d\u6587</p> <p>[!TIP] * The following example takes precedence over the Compose version component for demonstration * ZoomState.zoomable is equivalent to ZoomImageView.zoomable * ZoomState.subsampling is equivalent to ZoomImageView.subsampling</p> <p>ZoomImage supports one-finger drag, inertial swipe, keyboard drag, and the <code>offset()</code> method to move the image.</p>"},{"location":"offset/#one-finger-drag","title":"One Finger Drag","text":"<p>ZoomImage enables one finger drag gestures by default, but you can turn it off as follows:</p> <pre><code>val zoomState: ZoomState by rememberSketchZoomState()\n\nzoomState.zoomable.disabledGestureTypes =\n    zoomState.zoomable.disabledGestureTypes or GestureType.ONE_FINGER_DRAG\n\nSketchZoomAsyncImage(\n    uri = \"https://sample.com/sample.jpeg\",\n    contentDescription = \"view image\",\n    modifier = Modifier.fillMaxSize(),\n    zoomState = zoomState,\n)\n</code></pre>"},{"location":"offset/#keyboard-drag","title":"Keyboard drag","text":"<p>ZoomImage supports drag images through the keyboard, supports both short press and long press operations. And the following keys are registered by default:</p> <ul> <li>move up: Key.DirectionUp</li> <li>move down: Key.DirectionDown</li> <li>move left: Key.DirectionLeft</li> <li>move right: Key.DirectionRight</li> </ul> <p>Since the keyboard drag function must rely on focus, and focus management is very complex, it is not enabled by default. You need to actively configure and request focus, as follows:</p> <pre><code>val focusRequester = remember { FocusRequester() }\nval zoomState = rememberSketchZoomState()\nSketchZoomAsyncImage(\n    uri = \"https://sample.com/sample.jpeg\",\n    contentDescription = \"view image\",\n    zoomState = zoomState,\n    modifier = Modifier.fillMaxSize()\n        .focusRequester(focusRequester)\n        .focusable()\n        .keyZoom(zoomState.zoomable),\n)\nLaunchedEffect(Unit) {\n    focusRequester.requestFocus()\n}\n</code></pre> <p>[!TIP] When requesting focus in HorizontalPager, you need to note that you can only request focus for the current page, otherwise it will cause unexpected accidents.</p> <p>You can also turn it off dynamically via gesture control, as follows:</p> <pre><code>val zoomState: ZoomState by rememberSketchZoomState()\n\nzoomState.zoomable.disabledGestureTypes =\n    zoomState.zoomable.disabledGestureTypes or GestureType.KEYBOARD_DRAG\n\nSketchZoomAsyncImage(\n    uri = \"https://sample.com/sample.jpeg\",\n    contentDescription = \"view image\",\n    modifier = Modifier.fillMaxSize(),\n    zoomState = zoomState,\n)\n</code></pre>"},{"location":"offset/#offset_1","title":"offset()","text":"<p>ZoomImage provides a modified <code>offset()</code> method to move the image to a specified position, which has two parameters:</p> <ul> <li><code>targetOffset: Offset</code>: The target offset, with the offset origin being the upper-left corner of   the component</li> <li><code>animated: Boolean = false</code>: Whether to use animation, the default is false</li> </ul> <p>Example:</p> <pre><code>val zoomState: ZoomState by rememberSketchZoomState()\n\nSketchZoomAsyncImage(\n    uri = \"https://sample.com/sample.jpeg\",\n    contentDescription = \"view image\",\n    modifier = Modifier.fillMaxSize(),\n    zoomState = zoomState,\n)\n\nval coroutineScope = rememberCoroutineScope()\nButton(\n    onClick = {\n        coroutineScope.launch {\n            val targetOffset = zoomState.zoomable.transform.offset + Offset(x = 100, y = 200)\n            zoomState.zoomable.offset(targetOffset = targetOffset, animated = true)\n        }\n    }\n) {\n    Text(text = \"offset + Offset(100, 200)\")\n}\n\nButton(\n    onClick = {\n        coroutineScope.launch {\n            val targetOffset = zoomState.zoomable.transform.offset - Offset(x = 100, y = 200)\n            zoomState.zoomable.offset(targetOffset = targetOffset, animated = true)\n        }\n    }\n) {\n    Text(text = \"offset - Offset(100, 200)\")\n}\n</code></pre>"},{"location":"offset/#limit-the-bounds-of-offset","title":"Limit the bounds of offset","text":"<p>By default, zoomImage can drag to view the entire content of the image regardless of what you set ContentScale, for example, if you set ContentScale to Crop and Alignment to Center, then only the middle part of the image is displayed by default, and then you can also drag with one or two fingers to view the entire content of the image</p> <p>If you want the image to be moved only within the area restricted by ContentScale and Alignment, and not the entire content, you can modify the <code>limitOffsetWithinBaseVisibleRect parameter</code> to true to achieve this</p> <p>Example:</p> <pre><code>val zoomState: ZoomState by rememberSketchZoomState()\n\nzoomState.zoomable.limitOffsetWithinBaseVisibleRect = true\n\nSketchZoomAsyncImage(\n    uri = \"https://sample.com/sample.jpeg\",\n    contentDescription = \"view image\",\n    modifier = Modifier.fillMaxSize(),\n    zoomState = zoomState,\n)\n</code></pre>"},{"location":"offset/#container-whitespace","title":"Container Whitespace","text":"<p>By default, ZoomImage always aligns the edge of the image with the edge of the container when dragging the image, and there will be no white space between them (except in the initial state of the image). When you need to leave a white space between the image and the container, you can pass To achieve this, set the <code>containerWhitespace</code> or <code>containerWhitespaceMultiple</code> parameter to</p> <p>Example:</p> <pre><code>val zoomState: ZoomState by rememberSketchZoomState()\n\n// Set the specific size through the containerWhitespace property\nzoomState.zoomable.containerWhitespace = ContainerWhitespace(\n    left = 4f, top = 3f, right = 2f, bottom = 1f\n)\n// or\nzoomState.zoomable.containerWhitespace = ContainerWhitespace(horizontal = 2f, vertical = 1f)\n// or\nzoomState.zoomable.containerWhitespace = ContainerWhitespace(size = 1f)\n\n// Leave 50% of the container size white space between the edge of the image and the edge of the container\nzoomState.zoomable.containerWhitespaceMultiple = 0.5f\n\nSketchZoomAsyncImage(\n    uri = \"https://sample.com/sample.jpeg\",\n    contentDescription = \"view image\",\n    modifier = Modifier.fillMaxSize(),\n    zoomState = zoomState,\n)\n</code></pre>"},{"location":"offset/#public-properties","title":"Public Properties","text":"<pre><code>// compose\nval zoomState: ZoomState by rememberSketchZoomState()\nSketchZoomAsyncImage(zoomState = zoomState)\nval zoomable: ZoomableState = zoomState.zoomable\n\n// view\nval sketchZoomImageView = SketchZoomImageView(context)\nval zoomable: ZoomableEngine = sketchZoomImageView.zoomable\n</code></pre> <p>[!TIP] Note: The relevant properties of the view version are wrapped in StateFlow, so its name is suffixed with State compared to the compose version</p> <ul> <li><code>zoomable.transform.offset: Offset</code>: Current offset (baseTransform.offset + userTransform.offset)</li> <li><code>zoomable.baseTransform.offset: Offset</code>: The current base offset, affected by the alignment   parameter and the rotate method</li> <li><code>zoomable.userTransform.offset: Offset</code>: The current user offset, affected by offset(), locate(),   and user gesture dragging</li> <li><code>zoomable.scrollEdge: ScrollEdge</code>: Edge state for the current offset</li> </ul>"},{"location":"offset/#listen-property-changed","title":"Listen property changed","text":"<ul> <li>The relevant properties of the compose version are wrapped in State and can be read directly in   the Composable function to implement listening</li> <li>The relevant properties of the view are wrapped in StateFlow, and its collect function can be   called to implement the listening</li> </ul>"},{"location":"readmode/","title":"Read Mode","text":""},{"location":"readmode/#read-mode","title":"Read Mode","text":"<p>Translations: \u7b80\u4f53\u4e2d\u6587</p> <p>[!TIP] * The following example takes precedence over the Compose version component for demonstration * ZoomState.zoomable is equivalent to ZoomImageView.zoomable * ZoomState.subsampling is equivalent to ZoomImageView.subsampling</p> <p>For long text images, their height is usually very large, if the initial state shows the full image, then the text content in the image is not clear, the user must double-click to zoom in and slide to the start position to start reading</p> <p>For such images, ZoomImage provides a reading mode to fill the screen at the initial state of the image and locate it to the beginning position, similar to ContentScale .Crop plus Alignment.TopStart, so that users can directly start reading the content of the long text image</p>"},{"location":"readmode/#enabled-read-mode","title":"Enabled Read Mode","text":"<pre><code>val zoomState: ZoomState by rememberSketchZoomState()\n\nzoomState.zoomable.readMode = ReadMode.Default\n\nSketchZoomAsyncImage(\n    uri = \"https://sample.com/sample.jpeg\",\n    contentDescription = \"view image\",\n    modifier = Modifier.fillMaxSize(),\n    zoomState = zoomState,\n)\n</code></pre>"},{"location":"readmode/#readmode","title":"ReadMode","text":"<p>The ReadMode class is used to control the read mode, and it has two parameters:</p> <ul> <li><code>sizeType: Int = ReadMode.SIZE_TYPE_HORIZONTAL or ReadMode.SIZE_TYPE_VERTICAL</code>: The reading mode   can be used to control which size type of image, the default is both   horizontal and vertical charts, and the value is  <code>ReadMode.SIZE_TYPE_HORIZONTA</code>   or <code>ReadMode.SIZE_TYPE_VERTICAL</code></li> <li><code>decider: ReadMode.Decider = ReadMode.Decider.Default</code>: decider determines whether read mode can   be used based on contentSize and containerSize, and the default implementation is   ReadMode.LongImageDecider, which uses read mode only for long images</li> </ul> <p>[!TIP] * The default configuration for ReadMode is ReadMode.Default * You can implement the ReadMode.Decider interface to implement your own decision rules</p>"},{"location":"rotate/","title":"Rotate","text":""},{"location":"rotate/#rotate","title":"Rotate","text":"<p>Translations: \u7b80\u4f53\u4e2d\u6587</p> <p>[!TIP] * The following example takes precedence over the Compose version component for demonstration * ZoomState.zoomable is equivalent to ZoomImageView.zoomable * ZoomState.subsampling is equivalent to ZoomImageView.subsampling</p>"},{"location":"rotate/#rotate_1","title":"rotate()","text":"<p>ZoomImage provides a modified <code>rotate()</code> method to rotate the image to a specified angle, which has one parameter:</p> <ul> <li><code>targetRotation: Int</code>: Target rotation angle, which can only be a multiple of 90, such as 0, 90,   180, 270, 360, etc</li> </ul> <p>Example:</p> <pre><code>val zoomState: ZoomState by rememberSketchZoomState()\n\nSketchZoomAsyncImage(\n  uri = \"https://sample.com/sample.jpeg\",\n    contentDescription = \"view image\",\n    modifier = Modifier.fillMaxSize(),\n    zoomState = zoomState,\n)\n\nval coroutineScope = rememberCoroutineScope()\nButton(\n    onClick = {\n        coroutineScope.launch {\n            val targetRotation = zoomState.zoomable.transform.rotation.roundToInt() + 90\n            zoomState.zoomable.rotate(targetRotation = targetRotation)\n        }\n    }\n) {\n    Text(text = \"right rotate 90\")\n}\n\nButton(\n    onClick = {\n        coroutineScope.launch {\n            val targetRotation = zoomState.zoomable.transform.rotation.roundToInt() - 90\n            zoomState.zoomable.rotate(targetRotation = targetRotation)\n        }\n    }\n) {\n    Text(text = \"left rotate 90\")\n}\n</code></pre>"},{"location":"rotate/#public-properties","title":"Public Properties","text":"<pre><code>// compose\nval zoomState: ZoomState by rememberSketchZoomState()\nSketchZoomAsyncImage(zoomState = zoomState)\nval zoomable: ZoomableState = zoomState.zoomable\n\n// view\nval sketchZoomImageView = SketchZoomImageView(context)\nval zoomable: ZoomableEngine = sketchZoomImageView.zoomable\n</code></pre> <p>Note: The relevant properties of the view version are wrapped in StateFlow, so its name is suffixed with State compared to the compose version</p> <ul> <li><code>zoomable.transform.rotation: Float</code>: Current rotation angle (base rotation angle + user rotation   angle)</li> <li><code>zoomable.baseTransform.rotation: Float</code>: The current base rotation angle, affected by the   rotate() method</li> <li><code>zoomable.userTransform.rotation: Float</code>: The current user rotation angle, which is always 0</li> </ul>"},{"location":"rotate/#listen-property-changed","title":"Listen property changed","text":"<ul> <li>The relevant properties of the compose version are wrapped in State and can be read directly in   the Composable function to implement listening</li> <li>The relevant properties of the view are wrapped in StateFlow, and its collect function can be   called to implement the listening</li> </ul>"},{"location":"scale/","title":"Scale","text":""},{"location":"scale/#scaling-image","title":"Scaling Image","text":"<p>Translations: \u7b80\u4f53\u4e2d\u6587</p> <p>[!TIP] * The following example takes precedence over the Compose version component for demonstration * ZoomState.zoomable is equivalent to ZoomImageView.zoomable * ZoomState.subsampling is equivalent to ZoomImageView.subsampling</p> <p>ZoomImage supports multiple ways to scale images, such as two-finger scale, single-finger scale, double-click scale, mouse wheel scale, keyboard scale, scale(), etc.</p>"},{"location":"scale/#features","title":"Features","text":"<ul> <li>Support One-Finger Scale, Two-Finger Scale,   Double-click Scale, Mouse Wheel Scale, Keyboard Scale   and scaling to a specified multiple by   the scale(), scaleBy(), scaleByPlus() method</li> <li>Supports rubber band effect.   When the gesture is continuously zoomed (one-finger/two-finger scale) exceeds the maximum or   minimum range, zooming can continue, but there is a damping effect, and it will rollback to the   maximum or minimum scale multiplier when released</li> <li>Dynamic scaling range. Default based on   containerSize, contentSize, contentOriginSize dynamically calculate mediumScale and maxScale</li> <li>Support for animation. Both the scale() method and double-click scaling support   animation</li> <li>All ContentScale and Alignment are supported\uff0cZoomImageView also   supports ContentScale and Alignment</li> <li>Disabling gestures. Supports disabling gestures such as   double-click scale, two-finger scale, one-finger scale, mouse wheel scale, and drag</li> <li>Only when the containerSize changes (dragging to resize the window on the desktop), ZoomImage will   keep the scale factor and content visible center point unchanged</li> <li>When the page is rebuilt (the screen rotates, the app is recycled in the background), the scale   and offset are reset</li> <li>Supports reading related information. You can read   scale-related information such as the current scale multiplier and the minimum, middle, and   maximum scale multiples</li> </ul>"},{"location":"scale/#contentscale-alignment","title":"ContentScale, Alignment","text":"<p>ZoomImage supports all ContentScale and Alignment, and because the compose version and the view version use the same algorithm, view The version of the component supports ContentScale and Alignment in addition to ScaleType</p> <p>Example:</p> <pre><code>val sketchZoomImageView = SketchZoomImageView(context)\n\nsketchZoomImageView.zoomable.contentScaleState.value = ContentScaleCompat.None\nsketchZoomImageView.zoomable.alignmentState.value = AlignmentCompat.BottomEnd\n</code></pre>"},{"location":"scale/#minscale-mediumscale-maxscale","title":"minScale, mediumScale, maxScale","text":"<p>The ZoomImage is always controlled by three parameters in the process of scaling: minScale, mediumScale, and maxScale:</p> <ul> <li><code>minScale</code>\uff1aThe minimum scale multiplier, which limits the minimum value of ZoomImage during   scaling,   is calculated as:     <pre><code>ContentScale.computeScaleFactor(srcSize, dstSize).scaleX\n</code></pre></li> <li><code>mediumScale</code>\uff1aThe intermediate scale multiplier is specially used for double-click scaling, and   the   value is controlled by the scalesCalculator parameter</li> <li><code>maxScale</code>\uff1aThe maximum scale multiplier is used to limit the maximum value of ZoomImage during   scaling, and the value is controlled by the scalesCalculator parameter</li> </ul>"},{"location":"scale/#scalescalculator","title":"ScalesCalculator","text":"<p>ScalesCalculator is specially used to calculate mediumScale and maxScale. ZoomImage has two built-in ScalesCalculator:</p> <p>[!TIP] * minMediumScale = <code>minScale * multiple</code> * fillContainerScale = <code>max(containerSize.width / contentSize.width.toFloat(),     containerSize.height / contentSize.height.toFloat())</code> * contentOriginScale = <code>max(contentOriginSize.width / contentSize.width.toFloat(),     contentOriginSize.height / contentSize.height.toFloat())</code> * initialScale usually calculated by ReadMode * multiple default value is 3f</p> <ul> <li>ScalesCalculator.Dynamic\uff1a<ul> <li>mediumScale calculation rules are as follows:<ul> <li>If contentScale is FillBounds, it is always minMediumScale</li> <li>Always initialScale if initialScale is greater than minScale</li> <li>Otherwise, take the largest among minMediumScale, fillContainerScale, and   contentOriginScale.</li> </ul> </li> <li>maxScale calculation rules are as follows:<ul> <li>If contentScale is FillBounds, it is always <code>mediumScale * multiple</code></li> <li>Otherwise, take the largest among <code>mediumScale * multiple</code>, contentOriginScale</li> </ul> </li> </ul> </li> <li>ScalesCalculator.Fixed\uff1a<ul> <li>mediumScale calculation rules are as follows:<ul> <li>If contentScale is FillBounds, it is always minMediumScale</li> <li>Always initialScale if initialScale is greater than minScale</li> <li>Otherwise always minMediumScale</li> </ul> </li> <li>maxScale is always <code>mediumScale * multiple</code></li> </ul> </li> </ul> <p>scalesCalculator defaults to ScalesCalculator. Dynamic, which you can modify into a Fixed or custom implementation</p> <p>Example:</p> <pre><code>val zoomState: ZoomState by rememberSketchZoomState()\n\nzoomState.zoomable.scalesCalculator = ScalesCalculator.Fixed\n// or\nzoomState.zoomable.scalesCalculator = MyScalesCalculator()\n\nSketchZoomAsyncImage(\n    uri = \"https://sample.com/sample.jpeg\",\n    contentDescription = \"view image\",\n    modifier = Modifier.fillMaxSize(),\n    zoomState = zoomState,\n)\n</code></pre>"},{"location":"scale/#two-finger-scale","title":"Two-Finger Scale","text":"<p>You can pinch the scale image with two fingers, and ZoomImage will calculate the scale factor based on the distance between the two fingers. The pinch-to-scale feature is on by default, but you can turn it off as follows:</p> <pre><code>val zoomState: ZoomState by rememberSketchZoomState()\n\nzoomState.zoomable.disabledGestureTypes =\n    zoomState.zoomable.disabledGestureTypes or GestureType.TWO_FINGER_SCALE\n\nSketchZoomAsyncImage(\n    uri = \"https://sample.com/sample.jpeg\",\n    contentDescription = \"view image\",\n    modifier = Modifier.fillMaxSize(),\n    zoomState = zoomState,\n)\n</code></pre>"},{"location":"scale/#double-click-scale","title":"Double-click Scale","text":"<p>ZoomImage supports double-clicking the image to switch the scale factor</p>"},{"location":"scale/#threestepscale","title":"threeStepScale","text":"<p>By default, it always cycles between minScale and mediumScale. If you want to cycle between minScale, mediumScale and maxScale, you can modify it. The threeStepScale property is true, as follows:</p> <pre><code>val zoomState: ZoomState by rememberSketchZoomState()\n\nzoomState.zoomable.threeStepScale = true\n\nSketchZoomAsyncImage(\n    uri = \"https://sample.com/sample.jpeg\",\n    contentDescription = \"view image\",\n    modifier = Modifier.fillMaxSize(),\n    zoomState = zoomState,\n)\n</code></pre>"},{"location":"scale/#switchscale","title":"switchScale()","text":"<p>Double-clicking to scale invokes ZoomImage's <code>switchScale()</code> method, or you can call <code>switchScale()</code> when needed The method toggles the scale factor, which has two parameters:</p> <ul> <li><code>centroidContentPoint: IntOffset = contentVisibleRect.center</code>: The scale center point on Content,   the origin is the upper-left corner of Content, and the default is the center of Content's   currently visible area</li> <li><code>animated: Boolean = false</code>: Whether to use animation, the default is false</li> </ul> <p>[!TIP] Note: centroidContentPoint must be a point on content</p> <p>Example:</p> <pre><code>val zoomState: ZoomState by rememberSketchZoomState()\n\nSketchZoomAsyncImage(\n    uri = \"https://sample.com/sample.jpeg\",\n    contentDescription = \"view image\",\n    modifier = Modifier.fillMaxSize(),\n    zoomState = zoomState,\n)\n\nval coroutineScope = rememberCoroutineScope()\nButton(\n    onClick = {\n        coroutineScope.launch {\n            zoomState.zoomable.switchScale(animated = true)\n        }\n    }\n) {\n    Text(text = \"switch scale\")\n}\n</code></pre>"},{"location":"scale/#getnextstepscale","title":"getNextStepScale()","text":"<p>You can also call the <code>getNextStepScale()</code> method to get the next scale multiplier</p> <p>Example:</p> <pre><code>val zoomState: ZoomState by rememberSketchZoomState()\n\nzoomState.zoomable.getNextStepScale()\n</code></pre>"},{"location":"scale/#turn-off-double-click-scale","title":"Turn off double-click scale","text":"<p>The double-click scale feature is on by default, but you can turn it off as follows:</p> <pre><code>val zoomState: ZoomState by rememberSketchZoomState()\n\nzoomState.zoomable.disabledGestureTypes =\n    zoomState.zoomable.disabledGestureTypes or GestureType.DOUBLE_TAP_SCALE\n\nSketchZoomAsyncImage(\n    uri = \"https://sample.com/sample.jpeg\",\n    contentDescription = \"view image\",\n    modifier = Modifier.fillMaxSize(),\n    zoomState = zoomState,\n)\n</code></pre>"},{"location":"scale/#one-finger-scale","title":"One Finger Scale","text":"<p>ZoomImage supports zooming images with one finger. Double-click and hold the screen and slide up and down to scale the image. This feature is enabled by default, but you can turn it off as follows:</p> <pre><code>val zoomState: ZoomState by rememberSketchZoomState()\n\nzoomState.zoomable.disabledGestureTypes =\n    zoomState.zoomable.disabledGestureTypes or GestureType.ONE_FINGER_SCALE\n\nSketchZoomAsyncImage(\n    uri = \"https://sample.com/sample.jpeg\",\n    contentDescription = \"view image\",\n    modifier = Modifier.fillMaxSize(),\n    zoomState = zoomState,\n)\n</code></pre>"},{"location":"scale/#mouse-wheel-scale","title":"Mouse Wheel Scale","text":"<p>ZoomImage supports scaling images through the mouse wheel. ZoomImage takes the current mouse position as the scale center and calculates the scale factor based on the rolling direction and distance of the mouse wheel.</p> <p>You can reverse mouse wheel scaling by setting the <code>reverseMouseWheelScale</code> property, as follows:</p> <pre><code>val zoomState: ZoomState by rememberSketchZoomState()\n\nzoomState.zoomable.reverseMouseWheelScale = true\n\nSketchZoomAsyncImage(\n    uri = \"https://sample.com/sample.jpeg\",\n    contentDescription = \"view image\",\n    modifier = Modifier.fillMaxSize(),\n    zoomState = zoomState,\n)\n</code></pre> <p>The mouse wheel scale function is enabled by default, but you can turn it off as follows:</p> <pre><code>val zoomState: ZoomState by rememberSketchZoomState()\n\nzoomState.zoomable.disabledGestureTypes =\n    zoomState.zoomable.disabledGestureTypes or GestureType.MOUSE_WHEEL_SCALE\n\nSketchZoomAsyncImage(\n    uri = \"https://sample.com/sample.jpeg\",\n    contentDescription = \"view image\",\n    modifier = Modifier.fillMaxSize(),\n    zoomState = zoomState,\n)\n</code></pre> <p>You can also customize the calculation method of mouse wheel scaling through the <code>mouseWheelScaleCalculator</code> property. The default is <code>MouseWheelScaleCalculator.Default</code>, as follows:</p> <pre><code>val zoomState: ZoomState by rememberSketchZoomState()\n\nzoomState.zoomable.mouseWheelScaleCalculator =\n    MouseWheelScaleCalculator { currentScale, scrollDelta -&gt;\n        // return new scale\n    }\n\nSketchZoomAsyncImage(\n    uri = \"https://sample.com/sample.jpeg\",\n    contentDescription = \"view image\",\n    modifier = Modifier.fillMaxSize(),\n    zoomState = zoomState,\n)\n</code></pre>"},{"location":"scale/#keyboard-scale","title":"Keyboard scale","text":"<p>ZoomImage supports scaling images through the keyboard, supports both short press and long press operations. And the following keys are registered by default:</p> <ul> <li>scale in: Key.ZoomIn, Key.Equals + (meta/ctrl)/alt, Key.DirectionUp + (meta/ctrl)/alt</li> <li>scale out: Key.ZoomOut, Key.Minus + (meta/ctrl)/alt, Key.DirectionDown + (meta/ctrl)/alt</li> </ul> <p>Since the keyboard zoom function must rely on focus, and focus management is very complex, it is not enabled by default. You need to actively configure and request focus, as follows:</p> <pre><code>val focusRequester = remember { FocusRequester() }\nval zoomState = rememberSketchZoomState()\nSketchZoomAsyncImage(\n    uri = \"https://sample.com/sample.jpeg\",\n    contentDescription = \"view image\",\n    zoomState = zoomState,\n    modifier = Modifier.fillMaxSize()\n        .focusRequester(focusRequester)\n        .focusable()\n        .keyZoom(zoomState.zoomable),\n)\nLaunchedEffect(Unit) {\n    focusRequester.requestFocus()\n}\n</code></pre> <p>[!TIP] When requesting focus in HorizontalPager, you need to note that you can only request focus for the current page, otherwise it will cause unexpected accidents.</p> <p>You can also turn it off dynamically via gesture control, as follows:</p> <pre><code>val zoomState: ZoomState by rememberSketchZoomState()\n\nzoomState.zoomable.disabledGestureTypes =\n    zoomState.zoomable.disabledGestureTypes or GestureType.KEYBOARD_SCALE\n\nSketchZoomAsyncImage(\n    uri = \"https://sample.com/sample.jpeg\",\n    contentDescription = \"view image\",\n    modifier = Modifier.fillMaxSize(),\n    zoomState = zoomState,\n)\n</code></pre>"},{"location":"scale/#scale","title":"scale()","text":"<p>ZoomImage provides the scale() method to scale the image to a specified multiple, which has three parameters:</p> <ul> <li><code>targetScale: Float</code>: Target scale multiple</li> <li><code>centroidContentPoint: IntOffset = contentVisibleRect.center</code>: The scale center point on the   content, the origin is the upper-left corner of the content, and   the default is the center of the currently visible area of the content</li> <li><code>animated: Boolean = false</code>: Whether to use animation, the default is false</li> </ul> <p>[!TIP] Note: centroidContentPoint must be a point on content</p> <p>Example:</p> <pre><code>val zoomState: ZoomState by rememberSketchZoomState()\n\nSketchZoomAsyncImage(\n    uri = \"https://sample.com/sample.jpeg\",\n    contentDescription = \"view image\",\n    modifier = Modifier.fillMaxSize(),\n    zoomState = zoomState,\n)\n\nval coroutineScope = rememberCoroutineScope()\nButton(\n    onClick = {\n        coroutineScope.launch {\n            zoomState.zoomable.scale(targetScale = 8f, animated = true)\n        }\n    }\n) {\n    Text(text = \"scale to 8f\")\n}\n\nButton(\n    onClick = {\n        coroutineScope.launch {\n            zoomState.zoomable.scale(targetScale = 4f, animated = true)\n        }\n    }\n) {\n    Text(text = \"scale to 4f\")\n}\n</code></pre>"},{"location":"scale/#scaleby","title":"scaleBy()","text":"<p>ZoomImage provides the scaleBy() method used to incrementally scale the image to a specified multiple by multiplication. It has three parameters:</p> <ul> <li><code>addScale: Float</code>: Incremental scaling multiple</li> <li><code>centroidContentPoint: IntOffset = contentVisibleRect.center</code>: The scale center point on the   content, the origin is the upper-left corner of the content, and   the default is the center of the currently visible area of the content</li> <li><code>animated: Boolean = false</code>: Whether to use animation, the default is false</li> </ul> <p>[!TIP] Note: centroidContentPoint must be a point on content</p> <p>Example:</p> <pre><code>val zoomState: ZoomState by rememberSketchZoomState()\n\nSketchZoomAsyncImage(\n    uri = \"https://sample.com/sample.jpeg\",\n    contentDescription = \"view image\",\n    modifier = Modifier.fillMaxSize(),\n    zoomState = zoomState,\n)\n\nval coroutineScope = rememberCoroutineScope()\nButton(\n    onClick = {\n        coroutineScope.launch {\n            zoomState.zoomable.scaleBy(addScale = 1.5f, animated = true)\n        }\n    }\n) {\n    Text(text = \"scale * 1.5\")\n}\n\nButton(\n    onClick = {\n        coroutineScope.launch {\n            zoomState.zoomable.scaleBy(addScale = 0.67f, animated = true)\n        }\n    }\n) {\n    Text(text = \"scale * 0.67\")\n}\n</code></pre>"},{"location":"scale/#scalebyplus","title":"scaleByPlus()","text":"<p>ZoomImage provides the scaleByPlus() method used to scale the image to a specified multiple by addition, and it has three parameters:</p> <ul> <li><code>addScale: Float</code>: Incremental scaling multiple</li> <li><code>centroidContentPoint: IntOffset = contentVisibleRect.center</code>: The scale center point on the   content, the origin is the upper-left corner of the content, and   the default is the center of the currently visible area of the content</li> <li><code>animated: Boolean = false</code>: Whether to use animation, the default is false</li> </ul> <p>[!TIP] Note: centroidContentPoint must be a point on content</p> <p>Example:</p> <pre><code>val zoomState: ZoomState by rememberSketchZoomState()\n\nSketchZoomAsyncImage(\n    uri = \"https://sample.com/sample.jpeg\",\n    contentDescription = \"view image\",\n    modifier = Modifier.fillMaxSize(),\n    zoomState = zoomState,\n)\n\nval coroutineScope = rememberCoroutineScope()\nButton(\n    onClick = {\n        coroutineScope.launch {\n            zoomState.zoomable.scaleByPlus(addScale = 0.2f, animated = true)\n        }\n    }\n) {\n    Text(text = \"scale + 0.2\")\n}\n\nButton(\n    onClick = {\n        coroutineScope.launch {\n            zoomState.zoomable.scaleByPlus(addScale = -0.2f, animated = true)\n        }\n    }\n) {\n    Text(text = \"scale - 0.2\")\n}\n</code></pre>"},{"location":"scale/#rubber-band-scale","title":"Rubber Band Scale","text":"<p>ZoomImage will limit the zoom factor to between <code>minScale</code> and <code>maxScale</code>. If you zoom beyond this range with one or two fingers, you can still zoom, but there will be a damping effect similar to a rubber band, and it will rebound to <code>minScale</code> or <code>maxScale</code> after releasing the finger. This feature is enabled by default, and you can turn it off with the <code>rubberBandScale</code> property</p> <p>Example:</p> <pre><code>val zoomState: ZoomState by rememberSketchZoomState()\n\nzoomState.zoomable.rubberBandScale = false\n\nSketchZoomAsyncImage(\n    uri = \"https://sample.com/sample.jpeg\",\n    contentDescription = \"view image\",\n    modifier = Modifier.fillMaxSize(),\n    zoomState = zoomState,\n)\n</code></pre>"},{"location":"scale/#animation","title":"Animation","text":"<p>ZoomImage provides <code>animationSpec</code> parameters to modify the duration, Ease, and initial speed of the scale animation</p> <p>Example:</p> <pre><code>val zoomState: ZoomState by rememberSketchZoomState()\n\nzoomState.animationSpec = ZoomAnimationSpec(\n    durationMillis = 500,\n    easing = LinearOutSlowInEasing,\n    initialVelocity = 10f\n)\n\n// Or modify some parameters based on the default values\nzoomState.animationSpec = ZoomAnimationSpec.Default.copy(durationMillis = 500)\n\nSketchZoomAsyncImage(\n    uri = \"https://sample.com/sample.jpeg\",\n    contentDescription = \"view image\",\n    modifier = Modifier.fillMaxSize(),\n    zoomState = zoomState,\n)\n</code></pre>"},{"location":"scale/#public-properties-and-methods","title":"Public Properties and Methods","text":"<pre><code>// compose\nval zoomState: ZoomState by rememberSketchZoomState()\nSketchZoomAsyncImage(zoomState = zoomState)\nval zoomable: ZoomableState = zoomState.zoomable\n\n// view\nval sketchZoomImageView = SketchZoomImageView(context)\nval zoomable: ZoomableEngine = sketchZoomImageView.zoomable\n</code></pre> <p>[!TIP] Note: The relevant properties of the view version are wrapped in StateFlow, so its name is suffixed with State compared to the compose version</p> <p>Properties that can be read or set:</p> <ul> <li><code>zoomable.contentScale: ContentScale</code>: The default scaling method of content is ContentScale.Fit</li> <li><code>zoomable.alignment: Alignment</code>: The alignment of content in container is Alignment.TopStart by   default</li> <li><code>zoomable.layoutDirection: LayoutDirection</code>: The layout direction of container, the default is   LayoutDirection.Ltr</li> <li><code>zoomable.readMode: ReadMode?</code>: Reading mode configuration, default is null</li> <li><code>zoomable.scalesCalculator: ScalesCalculator</code>: The minScale, mediumScale, and maxScale   calculators, the default is ScalesCalculator.Dynamic</li> <li><code>zoomable.threeStepScale: Boolean</code>: Whether to zoom in between minScale, mediumScale and maxScale   when double-clicking to zoom, default is false</li> <li><code>zoomable.rubberBandScale: Boolean</code>: Whether to enable the rubber band effect, the default is true</li> <li><code>zoomable.oneFingerScaleSpec: OneFingerScaleSpec</code>: Single-referential scaling configuration,   default is OneFingerScaleSpec.Default</li> <li><code>zoomable.animationSpec: ZoomAnimationSpec</code>: Animation configurations such as zoom, offset, etc.,   default is ZoomAnimationSpec.Default</li> <li><code>zoomable.limitOffsetWithinBaseVisibleRect: Boolean</code>: Whether to limit the offset to   contentBaseVisibleRect, the default is false</li> <li><code>zoomable.containerWhitespaceMultiple: Float</code>: Add blank space around the container based on   multiples of the container size, the default is 0f</li> <li><code>zoomable.containerWhitespace: ContainerWhitespace</code>: The configuration of blank areas around the   container has higher priority than containerWhitespaceMultiple, and the default is   ContainerWhitespace.Zero</li> <li><code>zoomable.keepTransformWhenSameAspectRatioContentSizeChanged: Boolean</code>: Whether to keep transform   unchanged when the contentSize of the same aspect ratio is changed, the default is false</li> <li><code>zoomable.disabledGestureTypes: Int</code>: Configure the disabled gesture type, the default is 0 (no   gesture is disabled), and multiple gesture types can be combined using the bits or actions of   GestureType</li> <li><code>zoomable.reverseMouseWheelScale: Boolean</code>: Whether to reverse the direction of the mouse wheel,   the default is false</li> <li><code>zoomable.mouseWheelScaleCalculator: MouseWheelScaleCalculator</code>: Mouse wheel zoom calculator, the   default is MouseWheelScaleCalculator.Default</li> </ul> <p>Readable properties:</p> <ul> <li><code>zoomable.containerSize: IntSize</code>: The size of the container that holds the content</li> <li><code>zoomable.contentSize: IntSize</code>: The size of the content, usually Painter.intrinsicSize.round()</li> <li><code>zoomable.contentOriginSize: IntSize</code>: The original size of the content</li> <li><code>zoomable.transform.scale: ScaleFactor</code>: Current scaling (baseTransform.scale *   userTransform.scale)</li> <li><code>zoomable.baseTransform.scale: ScaleFactor</code>: The current underlying scale, affected by the   contentScale and alignment parameter</li> <li><code>zoomable.userTransform.scale: ScaleFactor</code>: The current user scaling factor is affected by   scale(), locate(), user gesture scale, double-click and other operations</li> <li><code>zoomable.minScale: Float</code>: Minimum scale factor, for limits the final scale factor, and as a   target value for one of when switch scale</li> <li><code>zoomable.mediumScale: Float</code>: Medium scale factor, only as a target value for one of when switch   scale</li> <li><code>zoomable.maxScale: Float</code>: Maximum scale factor, for limits the final scale factor, and as a   target value for one of when switch scale</li> <li><code>zoomable.continuousTransformType: Int</code>: If true, a transformation is currently in progress,   possibly in a continuous gesture operation, or an animation is in progress</li> <li><code>zoomable.contentBaseDisplayRectF: Rect</code>: The content region in the container after the   baseTransform transformation</li> <li><code>zoomable.contentBaseDisplayRect: IntRect</code>: The content region in the container after the   baseTransform transformation</li> <li><code>zoomable.contentBaseVisibleRectF: Rect</code>: The content is visible region to the user after the   baseTransform transformation</li> <li><code>zoomable.contentBaseVisibleRect: IntRect</code>: The content is visible region to the user after the   baseTransform transformation</li> <li><code>zoomable.contentDisplayRectF: Rect</code>: The content region in the container after the final   transform transformation</li> <li><code>zoomable.contentDisplayRect: IntRect</code>: The content region in the container after the final   transform transformation</li> <li><code>zoomable.contentVisibleRectF: Rect</code>: The content is visible region to the user after the final   transform transformation</li> <li><code>zoomable.contentVisibleRect: IntRect</code>: The content is visible region to the user after the final   transform transformation</li> <li><code>zoomable.sourceScaleFactor: ScaleFactor</code>: Scaling ratio based on the original image</li> <li><code>zoomable.sourceVisibleRectF: Rect</code>: contentVisibleRect maps to the area on the original image</li> <li><code>zoomable.sourceVisibleRect: IntRect</code>: contentVisibleRect maps to the area on the original image</li> <li><code>zoomable.scrollEdge: ScrollEdge</code>: Edge state for the current offset</li> </ul> <p>Interactive methods:</p> <ul> <li><code>zoomable.scale()</code>: Scaling content to the specified multiple</li> <li><code>zoomable.scaleBy()</code>: Incrementally scale the multiple specified by content by multiplication</li> <li><code>zoomable.scaleByPlus()</code>: Incrementally scale content specified multiples by addition</li> <li><code>zoomable.switchScale()</code>: Switch the scaling multiple of the content, loop between minScale and   mediumScale by default, if threeStepScale is true, loop between minScale, mediumScale and maxScale</li> <li><code>zoomable.offset()</code>: Offset content to the specified location</li> <li><code>zoomable.offsetBy()</code>: Offset as incremental content specified offset</li> <li><code>zoomable.locate()</code>: Position to a specified position on the content, or scale to a specified   multiple when used.</li> <li><code>zoomable.rotate()</code>: Rotate content to the specified angle, the angle can only be multiples of 90</li> <li><code>zoomable.rotateBy()</code>: Rotate the angle specified by content in incremental manner, the angle can   only be multiples of 90.</li> <li><code>zoomable.getNextStepScale(): Float</code>: Get the next scaling multiple, loop between minScale and   mediumScale by default, if threeStepScale is true, loop between minScale, mediumScale and maxScale</li> <li><code>zoomable.touchPointToContentPoint(): IntOffset</code>: Convert the touch point to a point on the   content, the origin is the upper left corner of the content</li> <li><code>zoomable.touchPointToContentPointF(): Offset</code>: Convert the touch point to a point on the content,   the origin is the upper left corner of the content</li> <li><code>zoomable.sourceToDraw(Offset): Offset</code>: Convert the points on the original image to the points at   the time of drawing, the origin is the upper left corner of the container</li> <li><code>zoomable.sourceToDraw(Rect): Rect</code>: Convert the rectangle on the original image to the rectangle   when drawing, the origin is the upper left corner of the container</li> <li><code>zoomable.canScroll(): Boolean</code>: Determine whether the current content can scroll in the specified   direction</li> </ul>"},{"location":"scale/#listen-property-changed","title":"Listen property changed","text":"<ul> <li>The relevant properties of the compose version are wrapped in State and can be read directly in   the Composable function to implement listening</li> <li>The relevant properties of the view are wrapped in StateFlow, and its collect function can be   called to implement the listening</li> </ul>"},{"location":"scrollbar/","title":"Scroll Bar","text":""},{"location":"scrollbar/#scrollbar","title":"Scrollbar/\u6eda\u52a8\u6761","text":"<p>Translations: \u7b80\u4f53\u4e2d\u6587</p> <p>[!TIP] * The following example takes precedence over the Compose version component for demonstration * ZoomState.zoomable is equivalent to ZoomImageView.zoomable * ZoomState.subsampling is equivalent to ZoomImageView.subsampling</p> <p>ZoomImage supports displaying scroll bars that clearly tell the user where they are and how far they have reached the bottom or top. The scroll bar will have no action Auto-hide after 800 milliseconds and automatically displayed when the user takes action again</p>"},{"location":"scrollbar/#configure","title":"Configure","text":"<p>ScrollBarSpec is used to describe the style of the scroll bar and has three parameters:</p> <ul> <li><code>color: Color = Color(0xB2888888)</code>: The color of the scroll bar, which defaults to gray.</li> <li><code>size: Dp = 3.dp</code>: The size of the scroll bar, which defaults to 3 dp. The height for the   horizontal   scroll bar and the width for the vertical scroll bar.</li> <li><code>margin: Dp = 6.dp</code>: The distance of the scroll bar from the edge, which defaults to 6 dp.</li> </ul> <p>compose:</p> <pre><code>val scrollBar = remember {\n    ScrollBarSpec(\n        color = androidx.compose.ui.graphics.Color.Red,\n        size = 6.dp,\n        margin = 12.dp,\n    )\n}\nSketchZoomAsyncImage(\n    uri = \"https://sample.com/sample.jpeg\",\n    contentDescription = \"view image\",\n    modifier = Modifier.fillMaxSize(),\n    scrollBar = scrollBar,\n)\n</code></pre> <p>view:</p> <pre><code>val sketchImageView = SketchZoomImageView(context)\nsketchImageView.scrollBar = ScrollBarSpec(\n    color = androidx.compose.ui.graphics.Color.Red,\n    size = 6.dp,\n    margin = 12.dp,\n)\n</code></pre>"},{"location":"scrollbar/#close-the-scroll-bar","title":"Close the scroll bar","text":"<p>ZoomImage displays the scroll bar by default, and you can turn it off</p> <p>compose:</p> <pre><code>SketchZoomAsyncImage(\n    uri = \"https://sample.com/sample.jpeg\",\n    contentDescription = \"view image\",\n    modifier = Modifier.fillMaxSize(),\n    scrollBar = null,\n)\n</code></pre> <p>view:</p> <pre><code>val sketchImageView = SketchZoomImageView(context)\nsketchImageView.scrollBar = null\n</code></pre>"},{"location":"subsampling/","title":"Subsampling","text":""},{"location":"subsampling/#subsampling","title":"Subsampling","text":"<p>Translations: \u7b80\u4f53\u4e2d\u6587</p> <p>[!TIP] * The following example takes precedence over the Compose version component for demonstration * ZoomState.zoomable is equivalent to ZoomImageView.zoomable * ZoomState.subsampling is equivalent to ZoomImageView.subsampling</p> <p>Some images are huge in size, if they are read completely into memory will make the app crash due to insufficient memory, the image loading framework will usually sample and then load, then the size of the image will become smaller, but the content of the image will also become blurry</p> <p>Therefore, it is necessary that ZoomImage can support subsampling when zooming, and the user can subsampling wherever he slides, and then display the clear original image fragments on the screen, so that it can display a clear image when zooming without crashing the app</p>"},{"location":"subsampling/#features","title":"Features","text":"<ul> <li>Exif Orientation. Support reading the Exif Orientation information of the   image and then rotating the image</li> <li>Tile Animation. Support transparency animation when displaying Tile, making   the transition more natural</li> <li>Background tiles. When switching sampleSize, the image   clarity changes step by step, making the transition more natural.</li> <li>Pause load tiles. Pause loading of tiles   during continuous transformations to improve performance</li> <li>Stop load tiles. Listen to Lifecycle, stop loading tiles and release loaded   tiles at stop to improve performance</li> <li>Memory cache. Avoid repeated decoding and improve performance</li> <li>Public Properties. Can read sampling size, image   information, tile list and other information</li> </ul>"},{"location":"subsampling/#prefix","title":"Prefix","text":"<p>When will subsampling be enabled?</p> <ul> <li>contentSize is smaller than contentOriginSize</li> <li>The scaling factor of the sides of contentSize and contentOriginSize does not differ by more than   1f</li> <li>On Android, it must be a type supported by BitmapRegionDecoder, non-Android platforms are fine as   long as they are not GIFs</li> </ul>"},{"location":"subsampling/#use-the-subsampling-feature","title":"Use the subsampling feature","text":"<p>Components that integrate the image loading library can use the subsampling function without any additional work</p> <p>ZoomImage and ZoomImageView do not have an integrated image loading library and require an additional call to the <code>setSubsamplingImage()</code> method to use the subsampling function</p> <p>example:</p> <pre><code>val zoomState: ZoomState by rememberZoomState()\nval imageSource = remember {\n    val resUri = Res.getUri(\"files/huge_world.jpeg\")\n    ImageSource.fromComposeResource(resUri)\n}\nzoomState.setSubsamplingImage(imageSource)\nZoomImage(\n    painter = painterResource(Res.drawable.huge_world_thumbnail),\n    contentDescription = \"view image\",\n    modifier = Modifier.fillMaxSize(),\n    zoomState = zoomState,\n)\n</code></pre> <p>view:</p> <pre><code>val zoomImageView = ZoomImageView(context)\nzoomImageView.setImageResource(R.drawable.huge_world_thumbnail)\n\nval imageSource = ImageSource.fromResource(context, R.raw.huge_world)\nzoomImageView.setSubsamplingImage(imageSource)\n</code></pre>"},{"location":"subsampling/#imagesource","title":"ImageSource","text":"<p>ImageSource is responsible for providing image data to ZoomImage for decoding. ZoomImage provides a variety of ImageSource implementations to support loading images from various sources, as follows:</p> <ul> <li>AssetImageSource: Load images from Android's assets   directory.ImageSource.fromAsset(context, \"huge_world.jpeg\")</li> <li>ByteArrayImageSource: Load images from   ByteArray. ImageSource.fromByteArray(byteArray)</li> <li>ComposeResourceImageSource: Load images from Compose's resource   directory. ImageSource.fromComposeResource(Res.getUri(\"files/huge_world.jpeg\"))</li> <li>ContentImageSource: Load images from Android's   ContentProvider. ImageSource.fromContent(context, contentUri)</li> <li>FileImageSource: Load image from file. ImageSource.fromFile(file)</li> <li>KotlinResourceImageSource: Load images from the Kotlin resource directory on desktop or ios   platforms. ImageSource.fromKotlinResource(\"huge_world.jpeg\")</li> <li>ResourceImageSource: Load images from Android's res   directory. ImageSource.fromResource(context, R.raw.huge_world)</li> </ul>"},{"location":"subsampling/#subsamplingimagegenerator","title":"*SubsamplingImageGenerator","text":"<p>The components of the Sketch, Coil, Glide, and Picasso series must create a SubsamplingImage based on data or uri after the image is loaded successfully. To support subsampling functionality, they all have their default SubsamplingImageGenerator implementation</p> <p>If the default implementation cannot correctly convert model or data to ImageSource when creating SubsamplingImage or you need to intercept the creation process, then you can customize a SubsamplingImageGenerator and apply it. The following takes the Sketch component as an example. Other components are similar:</p> <pre><code>class MySketchComposeSubsamplingImageGenerator : SketchComposeSubsamplingImageGenerator {\n\n    override fun generateImage(\n        sketch: Sketch,\n        request: ImageRequest,\n        result: ImageResult.Success,\n        painter: Painter\n    ): SubsamplingImageGenerateResult? {\n        // If the conditions are not met, skip the current SubsamplingImageGenerator\n        if (true) {\n            return null\n        }\n\n        // If the conditions are not met, the generation fails and a failure result is returned.\n        if (true) {\n            return SubsamplingImageGenerateResult.Error(\"message\")\n        }\n\n        // Success\n        val imageSource: ImageSource = ...\n        val imageInfo: ImageInfo = ...\n        val subsamplingImage = SubsamplingImage(imageSource, imageInfo)\n        return SubsamplingImageGenerateResult.Success(subsamplingImage)\n    }\n\n    override fun equals(other: Any?): Boolean {\n        if (this === other) return true\n        return other != null &amp;&amp; this::class == other::class\n    }\n\n    override fun hashCode(): Int {\n        return this::class.hashCode()\n    }\n\n    override fun toString(): String {\n        return \"MySketchComposeSubsamplingImageGenerator\"\n    }\n}\n\nval subsamplingImageGenerators =\n    remember { listOf(MySketchComposeSubsamplingImageGenerator()).toImmutableList() }\nval sketchZoomState = rememberSketchZoomState(subsamplingImageGenerators)\nSketchAsyncZoomImage(\n    zoomState = sketchZoomState,\n    ...\n)\n\n\nclass MySketchViewSubsamplingImageGenerator : SketchViewSubsamplingImageGenerator {\n\n    override fun generateImage(\n        sketch: Sketch,\n        request: ImageRequest,\n        result: ImageResult.Success,\n        drawable: Drawable\n    ): SubsamplingImageGenerateResult? {\n        // If the conditions are not met, skip the current SubsamplingImageGenerator\n        if (true) {\n            return null\n        }\n\n        // If the conditions are not met, the generation fails and a failure result is returned.\n        if (true) {\n            return SubsamplingImageGenerateResult.Error(\"message\")\n        }\n\n        // Success\n        val imageSource: ImageSource = ...\n        val imageInfo: ImageInfo = ...\n        val subsamplingImage = SubsamplingImage(imageSource, imageInfo)\n        return SubsamplingImageGenerateResult.Success(subsamplingImage)\n    }\n\n    override fun equals(other: Any?): Boolean {\n        if (this === other) return true\n        return other != null &amp;&amp; this::class == other::class\n    }\n\n    override fun hashCode(): Int {\n        return this::class.hashCode()\n    }\n\n    override fun toString(): String {\n        return \"MySketchViewSubsamplingImageGenerator\"\n    }\n}\n\nval sketchZoomImageView = SketchZoomImageView(context)\nsketchZoomImageView.setSubsamplingImageGenerators(MySketchViewSubsamplingImageGenerator())\n</code></pre> <p>[!TIP] If you customize mode or data, you must customize a SubsamplingImageGenerator and apply it, otherwise you will not be able to use the subsampling function</p>"},{"location":"subsampling/#exif-orientation","title":"Exif Orientation","text":"<p>By default, ZoomImage will read the Exif Orientation information of the image, and then rotate the image, you can't disable it</p>"},{"location":"subsampling/#tile-animation","title":"Tile Animation","text":"<p>ZoomImage supports transparency animation when displaying Tile. The animation is enabled by default, with a duration of 200 milliseconds and a refresh interval of 8 milliseconds. You can pass <code>tileAnimationSpec</code> parameters to turn off animation or modify animation duration and refresh interval</p> <p>example:</p> <pre><code>val zoomState: ZoomState by rememberSketchZoomState()\n\n// Turn off animations\nzoomState.subsampling.tileAnimationSpec = TileAnimationSpec.None\n\n// Modify the duration and refresh interval of the animation\nzoomState.subsampling.tileAnimationSpec = TileAnimationSpec(duration = 400, interval = 16)\n\nSketchZoomAsyncImage(\n    uri = \"https://sample.com/sample.jpeg\",\n    contentDescription = \"view image\",\n    modifier = Modifier.fillMaxSize(),\n    zoomState = zoomState,\n)\n</code></pre>"},{"location":"subsampling/#pause-load-tiles","title":"Pause load tiles","text":"<p>ZoomImage divides the continuous transformation behavior into five types: <code>SCALE</code>, <code>OFFSET</code>, <code>LOCATE</code>, <code>GESTURE</code>, <code>FLING</code>, and supports configuring the specified type of continuous transformation to pause loading tiles, which can improve performance</p> <p>The default configuration of ZoomImage is 'SCALE', 'OFFSET', 'LOCATE' three types of continuous transformations that pause the loading of tiles, 'GESTURE', The 'FLING' two types load tiles in real time, which you can configure via the <code>pausedContinuousTransformTypes</code> property</p> <p>example:</p> <pre><code>val zoomState: ZoomState by rememberSketchZoomState()\n\n// All continuous transform types load tiles in real time\nzoomState.subsampling.pausedContinuousTransformTypes = 0\n\n// All continuous transform types pause loading of tiles\nzoomState.subsampling.pausedContinuousTransformTypes =\n    TileManager.DefaultPausedContinuousTransformType or ContinuousTransformType.GESTURE or ContinuousTransformType.FLING\n\nSketchZoomAsyncImage(\n    uri = \"https://sample.com/sample.jpeg\",\n    contentDescription = \"view image\",\n    modifier = Modifier.fillMaxSize(),\n    zoomState = zoomState,\n)\n</code></pre>"},{"location":"subsampling/#stop-load-tiles","title":"Stop load tiles","text":"<p>ZoomImage supports stopping subsampling, which free the loaded tile after stopping and no new tiles are loaded, and automatically reloads the tiles after restarting, you can configure it via the <code>stopped</code> attribute</p> <p>example:</p> <pre><code>val zoomState: ZoomState by rememberSketchZoomState()\n\n// stop\nzoomState.subsampling.stopped = true\n// restart\nzoomState.subsampling.stopped = false\n\nSketchZoomAsyncImage(\n    uri = \"https://sample.com/sample.jpeg\",\n    contentDescription = \"view image\",\n    modifier = Modifier.fillMaxSize(),\n    zoomState = zoomState,\n)\n</code></pre>"},{"location":"subsampling/#lifecycle","title":"Lifecycle","text":"<p>By default, ZoomImage automatically fetches the most recent Lifecycle and listens to its state, pausing or resuming subsampling at the Lifecycle stop or start</p> <p>Get the latest Lifecycle in View through View.findViewTreeLifecycleOwner() API; in Compose, get Lifecycle through LocalLifecycleOwner.current API</p> <p>If you do not need this feature, you can turn it off via the <code>disabledAutoStopWithLifecycle</code> property as follows:</p> <pre><code>val zoomState: ZoomState by rememberSketchZoomState()\n\nzoomState.subsampling.disabledAutoStopWithLifecycle = true\n\nSketchZoomAsyncImage(\n    uri = \"https://sample.com/sample.jpeg\",\n    contentDescription = \"view image\",\n    modifier = Modifier.fillMaxSize(),\n    zoomState = zoomState,\n)\n</code></pre>"},{"location":"subsampling/#background-tiles","title":"Background tiles","text":"<p>ZoomImage uses background tiles to change sampleSize when switching sampleSize The change in the clarity of the image also changes step by step, and the basemap will not be exposed during the process of loading new tiles, which ensures the continuity of the clarity change and the user experience is better</p> <p>However, this feature uses more memory, which may affect fluency on devices with poor performance, and this feature is turned on by default, you can pass <code>disabledBackgroundTiles</code> property to close it</p> <p>example:</p> <pre><code>val zoomState: ZoomState by rememberSketchZoomState()\n\nzoomState.subsampling.disabledBackgroundTiles = true\n\nSketchZoomAsyncImage(\n    uri = \"https://sample.com/sample.jpeg\",\n    contentDescription = \"view image\",\n    modifier = Modifier.fillMaxSize(),\n    zoomState = zoomState,\n)\n</code></pre>"},{"location":"subsampling/#memory-cache","title":"Memory Cache","text":"<p>The subsampling feature supports memory caching, which can cache Bitmap in memory, which can avoid repeated decoding and improve performance</p> <p>Components that integrate the image loading library can use the memory caching feature without any additional work, while components that do not integrate the image loading library need to implement their own first TileImageCache Then set the <code>tileImageCache</code> property to use the memory cache feature</p> <p>example:</p> <pre><code>val zoomState: ZoomState by rememberSketchZoomState()\n\nzoomState.subsampling.tileImageCache = remember { MyTileImageCache() }\n\nSketchZoomAsyncImage(\n    uri = \"https://sample.com/sample.jpeg\",\n    contentDescription = \"view image\",\n    modifier = Modifier.fillMaxSize(),\n    zoomState = zoomState,\n)\n</code></pre> <p>After setting the tileImageCache property, the memory caching function is turned on, and it can be passed without modifying the tileImageCache property The <code>disabledTileImageCache</code> property controls the use of the memory cache feature</p> <p>example:</p> <pre><code>val zoomState: ZoomState by rememberSketchZoomState()\n\n// Disable memory caching\nzoomState.subsampling.disabledTileImageCache = true\n// Memory caching is allowed\nzoomState.subsampling.disabledTileImageCache = false\n\nSketchZoomAsyncImage(\n    uri = \"https://sample.com/sample.jpeg\",\n    contentDescription = \"view image\",\n    modifier = Modifier.fillMaxSize(),\n    zoomState = zoomState,\n)\n</code></pre>"},{"location":"subsampling/#regiondecoder","title":"RegionDecoder","text":"<p>ZoomImage uses BitmapRegionDecoder on the Android platform to decode images, and non-Android platforms use Skia to decode images, but they support limited image types. You can expand the supported image types through the RegionDecoder interface.</p> <p>First implement the RegionDecoder interface and its Factory interface to define your RegionDecoder, refer to SkiaRegionDecoder and AndroidRegionDecoder</p> <p>Then apply your RegionDecoder on SubsamplingState or SubsamplingEngine as follows:</p> <pre><code>val zoomState: ZoomState by rememberSketchZoomState()\n\nzoomState.subsampling.regionDecoders = listOf(MyRegionDecoder.Factory())\n\nSketchZoomAsyncImage(\n    uri = \"https://sample.com/sample.jpeg\",\n    contentDescription = \"view image\",\n    modifier = Modifier.fillMaxSize(),\n    zoomState = zoomState,\n)\n\nval sketchZoomImageView = SketchZoomImageView(context)\nsketchZoomImageView.subsampling.regionDecodersState.value = listOf(MyRegionDecoder.Factory())\n</code></pre>"},{"location":"subsampling/#disable-subsampling","title":"Disable subsampling","text":"<p>The subsampling function is enabled by default, you can disable it through the disabled property, as follows:</p> <pre><code>val zoomState: ZoomState by rememberSketchZoomState()\n\nzoomState.subsampling.disabled = true\n\nSketchZoomAsyncImage(\n    uri = \"https://sample.com/sample.jpeg\",\n    contentDescription = \"view image\",\n    modifier = Modifier.fillMaxSize(),\n    zoomState = zoomState,\n)\n</code></pre>"},{"location":"subsampling/#public-properties-and-methods","title":"Public Properties and Methods","text":"<pre><code>// compose\nval zoomState: ZoomState by rememberSketchZoomState()\nSketchZoomAsyncImage(zoomState = zoomState)\nval subsampling: SubsamplingState = zoomState.subsampling\n\n// view\nval sketchZoomImageView = SketchZoomImageView(context)\nval subsampling: SubsamplingEngine = sketchZoomImageView.subsampling\n</code></pre> <p>[!TIP] * Note: The relevant properties of the view version are wrapped in StateFlow, so its name is     suffixed with State compared to the compose version</p> <p>Properties that can be read or set:</p> <ul> <li><code>subsampling.disabled: Boolean</code>: Whether to disable subsampling function</li> <li><code>subsampling.tileImageCache: TileImageCache?</code>: The memory cache of Tile tile is null by default.   The components that integrate the image loader will automatically set it.</li> <li><code>subsampling.disabledTileImageCache: Boolean</code>: Whether to disable the memory cache of Tile tile,   default to false</li> <li><code>subsampling.tileAnimationSpec: TileAnimationSpec</code>: The configuration of tile animation is default   to TileAnimationSpec.Default</li> <li><code>subsampling.pausedContinuousTransformTypes: Int</code>: Pauses the configuration of continuous   transformation types for loading tiles. Multiple types can be combined by bits or operators. The   default is TileManager.DefaultPausedContinuousTransformType</li> <li><code>subsampling.disabledBackgroundTiles: Boolean</code>: Whether to disable background tile, default to   false</li> <li><code>subsampling.stopped: Boolean</code>: Whether to stop loading tiles, default to false</li> <li><code>subsampling.disabledAutoStopWithLifecycle: Boolean</code>: Whether to disable automatic stop loading of   tiles based on Lifecycle, default to false</li> <li><code>subsampling.regionDecoders: List&lt;RegionDecoder.Factory&gt;</code>: Add a custom RegionDecoder, default to   an empty list</li> <li><code>subsampling.showTileBounds: Boolean</code>: Whether to display the boundary of Tile, default to false</li> </ul> <p>Readable properties:</p> <ul> <li><code>subsampling.ready: Boolean</code>: Whether the image is ready for subsampling</li> <li><code>subsampling.imageInfo: ImageInfo</code>: The information of the image, including width, height, format,   exif information, etc</li> <li><code>subsampling.tileGridSizeMap: Map&lt;Int, IntOffset&gt;</code>: Tile grid size map</li> <li><code>subsampling.sampleSize: Int</code>: The sample size of the image</li> <li><code>subsampling.imageLoadRect: IntRect</code>: The image load rect</li> <li><code>subsampling.foregroundTiles: List&lt;TileSnapshot&gt;</code>: List of current foreground tiles</li> <li><code>subsampling.backgroundTiles: List&lt;TileSnapshot&gt;</code>: List of current background tiles</li> </ul> <p>Interactive methods:</p> <ul> <li><code>subsampling.setImage(): Boolean</code>: Set the subsampling image, return whether it is successful, the   components that integrate the image loader will automatically set the subsampling image</li> </ul>"},{"location":"subsampling/#listen-property-changed","title":"Listen property changed","text":"<ul> <li>The relevant properties of the compose version are wrapped in State and can be read directly in   the Composable function to implement listening</li> <li>The relevant properties of the view are wrapped in StateFlow, and its collect function can be   called to implement the listening</li> </ul>"},{"location":"zh/","title":"ZoomImage","text":"<p>  []min_api_link []license_link []version_link</p> <p>\u7ffb\u8bd1\uff1aEnglish</p> <p>ZoomImage \u662f\u4e00\u4e2a\u4e13\u4e3a Compose Multiplatform \u548c Android View \u8bbe\u8ba1\u7684\u624b\u52bf\u7f29\u653e\u67e5\u770b\u56fe\u7247\u7684\u5e93\uff0c\u5b83\u6709\u4ee5\u4e0b\u7279\u70b9\u548c\u529f\u80fd\uff1a</p> <ul> <li><code>Compose Multiplatform</code>. \u652f\u6301 Compose Multiplatform\uff0c\u53ef\u5728 Android\u3001macOS\u3001Windows\u3001Linux \u7b49\u5e73\u53f0\u4f7f\u7528</li> <li><code>\u529f\u80fd\u9f50\u5168</code>. \u652f\u6301\u53cc\u51fb\u7f29\u653e\u3001\u53cc\u6307\u7f29\u653e\u3001\u5355\u6307\u7f29\u653e\u3001\u9f20\u6807\u6eda\u8f6e\u7f29\u653e\u3001\u952e\u76d8\u7f29\u653e\u3001\u5355\u6307\u62d6\u52a8\u3001\u60ef\u6027\u6ed1\u52a8\u3001\u952e\u76d8\u62d6\u52a8\u7b49\u57fa\u7840\u529f\u80fd</li> <li><code>\u5b9a\u4f4d</code>. \u652f\u6301\u5b9a\u4f4d\u5230\u56fe\u7247\u7684\u4efb\u610f\u4f4d\u7f6e\u5e76\u4fdd\u6301\u5728\u5c4f\u5e55\u4e2d\u592e</li> <li><code>\u65cb\u8f6c</code>. \u652f\u6301 0\u00b0, 90\u00b0, 180\u00b0, 270\u00b0, 360\u00b0 \u65cb\u8f6c\u56fe\u7247</li> <li><code>\u5b50\u91c7\u6837</code>. \u652f\u6301\u5bf9\u8d85\u5927\u56fe\u8fdb\u884c\u5b50\u91c7\u6837\u663e\u793a\uff0c\u907f\u514d OOM\uff0c\u788e\u7247\u652f\u6301\u52a8\u753b\u4ee5\u53ca\u6e05\u6670\u5ea6\u6e10\u53d8</li> <li><code>\u52a8\u6001\u7f29\u653e\u6bd4\u4f8b</code>. \u6839\u636e\u56fe\u7247\u5c3a\u5bf8\u548c\u5bb9\u5668\u5c3a\u5bf8\u81ea\u52a8\u8ba1\u7b97\u51fa\u6700\u5408\u9002\u7684\u53cc\u51fb\u7f29\u653e\u6bd4\u4f8b</li> <li><code>\u7f29\u653e\u963b\u5c3c</code>. \u624b\u52a8\u7f29\u653e\u8d85\u8fc7\u6700\u5927\u6216\u6700\u5c0f\u7f29\u653e\u6bd4\u4f8b\u540e\u4f1a\u6709\u5e26\u963b\u5c3c\u611f\u7684\u6a61\u76ae\u7b4b\u6548\u679c</li> <li><code>\u6eda\u52a8\u6761</code>. \u652f\u6301\u663e\u793a\u6c34\u5e73\u548c\u5782\u76f4\u6eda\u52a8\u6761\uff0c\u660e\u786e\u5f53\u524d\u6eda\u52a8\u4f4d\u7f6e</li> <li><code>\u9605\u8bfb\u6a21\u5f0f</code>. \u9605\u8bfb\u6a21\u5f0f\u4e0b\u663e\u793a\u957f\u56fe\u65f6\u521d\u59cb\u72b6\u6001\u4f1a\u81ea\u52a8\u5145\u6ee1\u5c4f\u5e55\uff0c\u7528\u6237\u53ef\u7acb\u5373\u5f00\u59cb\u9605\u8bfb\u56fe\u7247\u5185\u5bb9\uff0c\u7701\u53bb\u7528\u6237\u53cc\u51fb\u653e\u5927\u7684\u64cd\u4f5c</li> <li><code>Exif</code>. \u652f\u6301\u8bfb\u53d6 Exif Orientation \u4fe1\u606f\u5e76\u81ea\u52a8\u65cb\u8f6c\u56fe\u7247</li> <li><code>\u56fe\u7247\u52a0\u8f7d\u5668</code>. \u63d0\u4f9b\u5bf9 sketch\u3001coil\u3001glide\u3001picasso \u7b49\u56fe\u7247\u52a0\u8f7d\u5668\u7684\u652f\u6301\uff0c\u4e5f\u53ef\u4ee5\u81ea\u5b9a\u4e49\u652f\u6301\u66f4\u591a\u56fe\u7247\u52a0\u8f7d\u5668</li> </ul> <p>https://github.com/panpf/zoomimage/assets/3250512/f067bed9-24e4-4ab8-a839-0731e155f4ef</p>"},{"location":"zh/#_1","title":"\u591a\u5e73\u53f0\u652f\u6301","text":"\u529f\u80fd/\u5e73\u53f0 Android iOS Desktop Web \u7f29\u653e \u2705 \u2705 \u2705 \u2705 \u5b50\u91c7\u6837 \u2705 \u2705 \u2705 \u2705 Exif Orientation \u2705 \u2705 \u2705 \u2705 \u96c6\u6210 Sketch \u2705 \u2705 \u2705 \u2705 \u96c6\u6210 Coil \u2705 \u2705 \u2705 \u2705 \u96c6\u6210 Glide \u2705 \u274c \u274c \u274c \u96c6\u6210 Picasso \u2705 \u274c \u274c \u274c"},{"location":"zh/#app","title":"\u793a\u4f8b App","text":"<ul> <li>Android\u3001iOS\u3001\u684c\u9762\u7248\u3001Web \u53ef\u90e8\u7f72\u5305\u8bf7\u5230 Releases   \u9875\u9762\u4e0b\u8f7d\u6700\u65b0\u7248\u672c</li> <li>Web \u793a\u4f8b\uff1ahttps://panpf.github.io/zoomimage/app</li> </ul>"},{"location":"zh/#_2","title":"\u4e0b\u8f7d","text":"<p><code>\u5df2\u53d1\u5e03\u5230 mavenCentral</code></p> <p><code>${LAST_VERSION}</code>:  (\u4e0d\u5305\u542b 'v')</p> <p>Compose multiplatform\uff1a</p> <pre><code>// \u96c6\u6210 Sketch v4+ \u5355\u4f8b\u6a21\u5f0f\uff0c\u63d0\u4f9b SketchZoomAsyncImage \u7ec4\u4ef6\uff08\u63a8\u8350\u4f7f\u7528\uff09\nimplementation(\"io.github.panpf.zoomimage:zoomimage-compose-sketch4:${LAST_VERSION}\")\n\n// \u96c6\u6210 Sketch v4+ koin \u6a21\u5f0f\uff0c\u63d0\u4f9b SketchZoomAsyncImage \u7ec4\u4ef6\uff08\u63a8\u8350\u4f7f\u7528\uff09\nimplementation(\"io.github.panpf.zoomimage:zoomimage-compose-sketch4-koin:${LAST_VERSION}\")\n\n// \u96c6\u6210 Sketch v4+ core\uff0c\u63d0\u4f9b SketchZoomAsyncImage \u7ec4\u4ef6\uff08\u63a8\u8350\u4f7f\u7528\uff09\nimplementation(\"io.github.panpf.zoomimage:zoomimage-compose-sketch4-core:${LAST_VERSION}\")\n\n// \u96c6\u6210 Sketch v3 \u5355\u4f8b\u6a21\u5f0f\uff0c\u63d0\u4f9b SketchZoomAsyncImage \u7ec4\u4ef6\nimplementation(\"io.github.panpf.zoomimage:zoomimage-compose-sketch3:${LAST_VERSION}\")\n\n// \u96c6\u6210 Sketch v3 core\uff0c\u63d0\u4f9b SketchZoomAsyncImage \u7ec4\u4ef6\nimplementation(\"io.github.panpf.zoomimage:zoomimage-compose-sketch3-core:${LAST_VERSION}\")\n\n// \u96c6\u6210 Coil v3+ \u5355\u4f8b\u6a21\u5f0f\uff0c\u63d0\u4f9b CoilZoomAsyncImage \u7ec4\u4ef6\nimplementation(\"io.github.panpf.zoomimage:zoomimage-compose-coil3:${LAST_VERSION}\")\n\n// \u96c6\u6210 Coil v3+ core\uff0c\u63d0\u4f9b CoilZoomAsyncImage \u7ec4\u4ef6\nimplementation(\"io.github.panpf.zoomimage:zoomimage-compose-coil3-core:${LAST_VERSION}\")\n\n// \u96c6\u6210 Coil v2 \u5355\u4f8b\u6a21\u5f0f\uff0c\u63d0\u4f9b CoilZoomAsyncImage \u7ec4\u4ef6\nimplementation(\"io.github.panpf.zoomimage:zoomimage-compose-coil2:${LAST_VERSION}\")\n\n// \u96c6\u6210 Coil v2 core\uff0c\u63d0\u4f9b CoilZoomAsyncImage \u7ec4\u4ef6\nimplementation(\"io.github.panpf.zoomimage:zoomimage-compose-coil2-core:${LAST_VERSION}\")\n\n// \u63d0\u4f9b\u57fa\u7840\u7684 ZoomImage \u7ec4\u4ef6\uff0c\u4e0d\u652f\u6301\u7f51\u7edc\u56fe\u7247\nimplementation(\"io.github.panpf.zoomimage:zoomimage-compose:${LAST_VERSION}\")\n\n// \u652f\u6301\u4ece composeResources \u6587\u4ef6\u5939\u4e0b\u52a0\u8f7d\u56fe\u7247\nimplementation(\"io.github.panpf.zoomimage:zoomimage-compose-resources:${LAST_VERSION}\")\n</code></pre> <p>[!TIP] \u6839\u636e\u4f60\u7528\u7684\u56fe\u7247\u52a0\u8f7d\u5668\u6216\u9700\u6c42\u4efb\u9009\u5176\u4e00\u5373\u53ef</p> <p>Only android compose\uff1a</p> <pre><code>// \u96c6\u6210 Glide\uff0c\u63d0\u4f9b GlideZoomAsyncImage \u7ec4\u4ef6\nimplementation(\"io.github.panpf.zoomimage:zoomimage-compose-glide:${LAST_VERSION}\")\n</code></pre> <p>[!TIP] \u4e3a\u4ec0\u4e48\u6ca1\u6709 picasso \u7248\u672c\u7684 compose ZoomImage \u7ec4\u4ef6\uff1f\u56e0\u4e3a Picasso \u5b98\u65b9\u5df2\u7ecf\u8bf4\u660e\u4e0d\u4f1a\u63d0\u4f9b\u5bf9 compose \u7684\u652f\u6301\uff08\u539f\u6587\u5728\u6b64\uff09</p> <p>Android view\uff1a</p> <pre><code>// \u96c6\u6210 Sketch v4+ \u5355\u4f8b\u6a21\u5f0f\uff0c\u63d0\u4f9b SketchZoomImageView \u7ec4\u4ef6\uff08\u63a8\u8350\u4f7f\u7528\uff09\nimplementation(\"io.github.panpf.zoomimage:zoomimage-view-sketch4:${LAST_VERSION}\")\n\n// \u96c6\u6210 Sketch v4+ koin \u6a21\u5f0f\uff0c\u63d0\u4f9b SketchZoomImageView \u7ec4\u4ef6\uff08\u63a8\u8350\u4f7f\u7528\uff09\nimplementation(\"io.github.panpf.zoomimage:zoomimage-view-sketch4-koin:${LAST_VERSION}\")\n\n// \u96c6\u6210 Sketch v4+ core\uff0c\u63d0\u4f9b SketchZoomImageView \u7ec4\u4ef6\uff08\u63a8\u8350\u4f7f\u7528\uff09\nimplementation(\"io.github.panpf.zoomimage:zoomimage-view-sketch4-core:${LAST_VERSION}\")\n\n// \u96c6\u6210 Sketch v3 \u5355\u4f8b\u6a21\u5f0f\uff0c\u63d0\u4f9b SketchZoomImageView \u7ec4\u4ef6\nimplementation(\"io.github.panpf.zoomimage:zoomimage-view-sketch3:${LAST_VERSION}\")\n\n// \u96c6\u6210 Sketch v3 core\uff0c\u63d0\u4f9b SketchZoomImageView \u7ec4\u4ef6\nimplementation(\"io.github.panpf.zoomimage:zoomimage-view-sketch3-core:${LAST_VERSION}\")\n\n// \u96c6\u6210 Coil v3+ \u5355\u4f8b\u6a21\u5f0f\uff0c\u63d0\u4f9b CoilZoomImageView \u7ec4\u4ef6\nimplementation(\"io.github.panpf.zoomimage:zoomimage-view-coil3:${LAST_VERSION}\")\n\n// \u96c6\u6210 Coil v3+ core\uff0c\u63d0\u4f9b CoilZoomImageView \u7ec4\u4ef6\nimplementation(\"io.github.panpf.zoomimage:zoomimage-view-coil3-core:${LAST_VERSION}\")\n\n// \u96c6\u6210 Coil v2 \u5355\u4f8b\u6a21\u5f0f\uff0c\u63d0\u4f9b CoilZoomImageView \u7ec4\u4ef6\nimplementation(\"io.github.panpf.zoomimage:zoomimage-view-coil2:${LAST_VERSION}\")\n\n// \u96c6\u6210 Coil v2 core\uff0c\u63d0\u4f9b CoilZoomImageView \u7ec4\u4ef6\nimplementation(\"io.github.panpf.zoomimage:zoomimage-view-coil2-core:${LAST_VERSION}\")\n\n// \u96c6\u6210 Glide\uff0c\u63d0\u4f9b GlideZoomImageView \u7ec4\u4ef6\nimplementation(\"io.github.panpf.zoomimage:zoomimage-view-glide:${LAST_VERSION}\")\n\n// \u96c6\u6210 Picasso\uff0c\u63d0\u4f9b PicassoZoomImageView \u7ec4\u4ef6\nimplementation(\"io.github.panpf.zoomimage:zoomimage-view-picasso:${LAST_VERSION}\")\n\n// \u63d0\u4f9b\u57fa\u7840\u7684 ZoomImageView \u7ec4\u4ef6\uff0c\u4e0d\u652f\u6301\u7f51\u7edc\u56fe\u7247\nimplementation(\"io.github.panpf.zoomimage:zoomimage-view:${LAST_VERSION}\")\n</code></pre> <p>[!TIP] \u6839\u636e\u4f60\u7528\u7684\u56fe\u7247\u52a0\u8f7d\u5668\u6216\u9700\u6c42\u4efb\u9009\u5176\u4e00\u5373\u53ef</p>"},{"location":"zh/#r8-proguard","title":"R8 / Proguard","text":"<p>ZoomImage \u81ea\u5df1\u7684\u6df7\u6dc6\u5df2\u7ecf\u5305\u542b\u5728\u4e86 aar \u4e2d\uff0c\u4f46\u4f60\u53ef\u80fd\u8fd8\u9700\u8981\u4e3a\u95f4\u63a5\u4f9d\u8d56\u7684\u5176\u5b83\u5e93\u6dfb\u52a0\u6df7\u6dc6\u914d\u7f6e</p>"},{"location":"zh/#_3","title":"\u5feb\u901f\u4e0a\u624b","text":"<p>Compose multiplatform\uff1a</p> <pre><code>// \u4f7f\u7528\u57fa\u7840\u7684 ZoomImage \u7ec4\u4ef6\nval zoomState: ZoomState by rememberZoomState()\nval imageSource = remember {\n    val resUri = Res.getUri(\"files/huge_world.jpeg\")\n  ImageSource.fromComposeResource(resUri)\n}\nzoomState.setSubsamplingImage(imageSource)\nZoomImage(\n    painter = painterResource(Res.drawable.huge_world_thumbnail),\n    contentDescription = \"view image\",\n    modifier = Modifier.fillMaxSize(),\n    zoomState = zoomState,\n)\n\n// \u4f7f\u7528 SketchZoomAsyncImage \u7ec4\u4ef6\nSketchZoomAsyncImage(\n    uri = \"https://sample.com/sample.jpeg\",\n    contentDescription = \"view image\",\n    modifier = Modifier.fillMaxSize(),\n)\n\n// \u4f7f\u7528 CoilZoomAsyncImage \u7ec4\u4ef6\nCoilZoomAsyncImage(\n    model = \"https://sample.com/sample.jpeg\",\n    contentDescription = \"view image\",\n    modifier = Modifier.fillMaxSize(),\n)\n</code></pre> <p>[!TIP] SketchZoomAsyncImage \u548c CoilZoomAsyncImage \u7684\u7528\u6cd5\u548c\u5b83\u4eec\u539f\u672c\u7684 AsyncImage \u4e00\u6837\uff0c\u53ea\u662f\u591a\u4e86\u4e00\u4e2a <code>zoomState: ZoomState</code> \u53c2\u6570</p> <p>Only android compose\uff1a</p> <pre><code>// \u4f7f\u7528 GlideZoomAsyncImage \u7ec4\u4ef6\nGlideZoomAsyncImage(\n    model = \"https://sample.com/sample.jpeg\",\n    contentDescription = \"view image\",\n    modifier = Modifier.fillMaxSize(),\n)\n</code></pre> <p>[!TIP] GlideZoomAsyncImage \u7684\u7528\u6cd5\u548c\u5b83\u539f\u672c\u7684 GlideImage \u4e00\u6837\uff0c\u53ea\u662f\u591a\u4e86\u4e00\u4e2a <code>zoomState: ZoomState</code> \u53c2\u6570</p> <p>Android view\uff1a</p> <pre><code>// \u4f7f\u7528\u57fa\u7840\u7684 ZoomImageView \u7ec4\u4ef6\nval zoomImageView = ZoomImageView(context)\nzoomImageView.setImageResource(R.drawable.huge_world_thumbnail)\nzoomImageView.setSubsamplingImage(ImageSource.fromResource(R.raw.huge_world))\n\n// \u4f7f\u7528 SketchZoomAsyncImage \u7ec4\u4ef6\nval sketchZoomImageView = SketchZoomImageView(context)\nsketchZoomImageView.loadImage(\"https://sample.com/sample.jpeg\")\n\n// \u4f7f\u7528 CoilZoomImageView \u7ec4\u4ef6\nval coilZoomImageView = CoilZoomImageView(context)\nsketchZoomImageView.loadImage(\"https://sample.com/sample.jpeg\")\n\n// \u4f7f\u7528 GlideZoomImageView \u7ec4\u4ef6\nval glideZoomImageView = GlideZoomImageView(context)\nGlide.with(this@GlideZoomImageViewFragment)\n    .load(\"https://sample.com/sample.jpeg\")\n    .into(glideZoomImageView)\n\n// \u4f7f\u7528 PicassoZoomImageView \u7ec4\u4ef6\nval picassoZoomImageView = PicassoZoomImageView(context)\npicassoZoomImageView.loadImage(\"https://sample.com/sample.jpeg\")\n</code></pre>"},{"location":"zh/#_4","title":"\u6587\u6863","text":"<ul> <li>\u5f00\u59cb\u4f7f\u7528</li> <li>Scale: \u7f29\u653e\u56fe\u7247\u4ee5\u67e5\u770b\u66f4\u6e05\u6670\u7684\u7ec6\u8282</li> <li>Offset: \u79fb\u52a8\u56fe\u7247\u4ee5\u67e5\u770b\u5bb9\u5668\u4e4b\u5916\u7684\u5185\u5bb9</li> <li>Rotate: \u65cb\u8f6c\u56fe\u7247\u4ee5\u4e0d\u540c\u89d2\u5ea6\u67e5\u770b\u5185\u5bb9</li> <li>Locate: \u5b9a\u4f4d\u5230\u56fe\u7247\u7684\u4efb\u610f\u4f4d\u7f6e</li> <li>Keep Transform: \u5207\u6362\u56fe\u50cf\u65f6\u4fdd\u6301\u53d8\u6362\u72b6\u6001</li> <li>Read Mode: \u957f\u56fe\u521d\u59cb\u65f6\u5145\u6ee1\u5c4f\u5e55\u65b9\u4fbf\u9605\u8bfb</li> <li>Click: \u63a5\u6536\u70b9\u51fb\u4e8b\u4ef6</li> <li>Subsampling: \u901a\u8fc7\u5b50\u91c7\u6837\u7684\u65b9\u5f0f\u663e\u793a\u5927\u56fe\u907f\u514d OOM</li> <li>Scroll Bar: \u663e\u793a\u6c34\u5e73\u548c\u5782\u76f4\u6eda\u52a8\u6761</li> <li>Log: \u4fee\u6539\u65e5\u5fd7\u7b49\u7ea7\u4ee5\u53ca\u8f93\u51fa\u7ba1\u9053</li> <li>Modifier.zoom()</li> </ul>"},{"location":"zh/#_5","title":"\u793a\u4f8b","text":"<p>\u4f60\u53ef\u4ee5\u5728 examples \u76ee\u5f55\u4e0b\u627e\u5230\u793a\u4f8b\u4ee3\u7801\uff0c\u4e5f\u53ef\u4ee5\u5230 release \u9875\u9762\u4e0b\u8f7d App \u4f53\u9a8c</p>"},{"location":"zh/#_6","title":"\u66f4\u65b0\u65e5\u5fd7","text":"<p>\u8bf7\u67e5\u770b CHANGELOG \u6587\u4ef6</p>"},{"location":"zh/#_7","title":"\u6d4b\u8bd5\u5e73\u53f0","text":"<ul> <li>Android: Emulator; Arm64; API 21-34</li> <li>Desktop: macOS; 14.6.1; JDK 17</li> <li>iOS: iphone 16 simulator; iOS 18.1</li> <li>Web: Chrome; 130</li> </ul>"},{"location":"zh/#app_1","title":"\u8fd0\u884c\u793a\u4f8b App","text":"<p>\u51c6\u5907\u73af\u5883\uff1a</p> <ol> <li>Android Studio: Norwhal+ (2025.1.1+)</li> <li>JDK: 17+</li> <li>\u4f7f\u7528 kdoctor \u68c0\u67e5\u8fd0\u884c\u73af\u5883\uff0c\u5e76\u6309\u7167\u63d0\u793a\u5b89\u88c5\u9700\u8981\u7684\u8f6f\u4ef6</li> <li>Android Studio \u5b89\u88c5 <code>Kotlin Multiplatform</code> \u63d2\u4ef6</li> </ol> <p>\u8fd0\u884c\u793a\u4f8b App\uff1a</p> <ol> <li>\u514b\u9686\u9879\u76ee\u5e76\u4f7f\u7528 Android Studio \u6253\u5f00</li> <li>\u540c\u6b65\u5b8c\u6210\u540e <code>Kotlin Multiplatform</code> \u63d2\u4ef6\u4f1a\u81ea\u52a8\u4e3a\u5404\u4e2a\u5e73\u53f0\u521b\u5efa\u8fd0\u884c\u914d\u7f6e</li> <li>\u9009\u62e9\u5bf9\u5e94\u5e73\u53f0\u7684\u8fd0\u884c\u914d\u7f6e\uff0c\u7136\u540e\u70b9\u51fb\u8fd0\u884c\u5373\u53ef</li> </ol>"},{"location":"zh/#_8","title":"\u6211\u7684\u9879\u76ee","text":"<p>\u4ee5\u4e0b\u662f\u6211\u7684\u5176\u5b83\u5f00\u6e90\u9879\u76ee\uff0c\u611f\u5174\u8da3\u7684\u53ef\u4ee5\u4e86\u89e3\u4e00\u4e0b\uff1a</p> <ul> <li>sketch\uff1aSketch \u662f\u4e00\u4e2a\u4e3a Compose Multiplatform \u548c Android View   \u8bbe\u8ba1\u7684\u56fe\u50cf\u52a0\u8f7d\u5e93\u3002\u5b83\u529f\u80fd\u5f3a\u5927\u4e14\u4e30\u5bcc\uff0c\u9664\u4e86\u57fa\u672c\u529f\u80fd\u5916\uff0c\u8fd8\u652f\u6301GIF\u3001SVG\u3001\u89c6\u9891\u7f29\u7565\u56fe\u3001Exif Orientation \u7b49\u3002</li> <li>assembly-adapter\uff1aAndroid \u4e0a\u7684\u4e00\u4e2a\u4e3a\u5404\u79cd Adapter \u63d0\u4f9b\u591a\u7c7b\u578b   Item \u5b9e\u73b0\u7684\u5e93\u3002\u8fd8\u987a\u5e26\u4e3a RecyclerView \u63d0\u4f9b\u4e86\u6700\u5f3a\u5927\u7684 divider\u3002</li> <li>sticky-item-decoration\uff1aRecyclerView \u9ecf\u6027 item \u5b9e\u73b0</li> </ul>"},{"location":"zh/#license","title":"License","text":"<p>Apache 2.0. \u6709\u5173\u8be6\u7ec6\u4fe1\u606f\uff0c\u8bf7\u53c2\u9605 LICENSE \u6587\u4ef6.</p>"},{"location":"zh/CHANGELOG/","title":"\u66f4\u65b0\u65e5\u5fd7","text":"<p>\u7ffb\u8bd1\uff1aEnglish</p>"},{"location":"zh/CHANGELOG/#140-rc01","title":"1.4.0-rc01","text":"<ul> <li>fix: \u4fee\u590d\u4ec5\u5728 1.4.0-beta04 \u7248\u672c\u5b58\u5728\u7684 ZoomImageView \u7684 tile \u6620\u5c04\u9519\u4f4d\u7684 bug</li> <li>fix: \u4fee\u590d contentOriginSize \u6539\u53d8\u4f1a\u6253\u65ad\u7528\u6237\u7684\u64cd\u4f5c\u52a8\u753b\u7684   bug\u3002#105</li> <li>fix: \u4fee\u590d\u9605\u8bfb\u6a21\u5f0f\u4e0b\u5185\u5bb9\u7f29\u653e\u81f3 minScale \u4e14\u4ec5 containerSize \u53d8\u5316\u65f6\u5185\u5bb9\u7f29\u653e\u500d\u6570\u7a81\u7136\u53d8\u5316\u81f3\u9605\u8bfb\u6a21\u5f0f\u500d\u6570\u7684   bug\u3002#106</li> <li>improve: ZoomImageView \u652f\u6301\u53cc\u6307\u62d6\u52a8\u624b\u52bf\u3002#102</li> <li>new: ContinuousTransformType \u65b0\u589e ROLLBACK \u7c7b\u578b</li> <li>new: ZoomableState \u548c ZoomableEngine \u65b0\u589e sourceScaleFactor\u3001 sourceVisibleRect \u5c5e\u6027\u548c sourceToDraw   \u65b9\u6cd5\u3002#92</li> <li>depend: \u66f4\u65b0 sketch 4.3.1</li> </ul>"},{"location":"zh/CHANGELOG/#140-beta04","title":"1.4.0-beta04","text":"<ul> <li>fix: \u4fee\u590d\u6240\u6709 ZoomImageView \u5728 detached \u4e4b\u540e\u518d\u6b21 attached \u65f6\u4e0d\u4f1a\u6062\u590d\u5b50\u91c7\u6837\u7684   bug\u3002#99</li> <li>fix: \u4fee\u590d Sketch \u7684 ThumbnailMemoryCacheStateImage \u4f1a\u56e0\u4e3a\u5b50\u91c7\u6837\u7684 tile \u7f13\u5b58\u800c\u5d29\u6e83\u7684   bug\u3002#100</li> <li>fix: \u4fee\u590d\u5b50\u91c7\u6837\u59cb\u7ec8\u4e0d\u4f1a\u89e3\u7801\u6700\u540e\u4e00\u5217\u548c\u6700\u540e\u4e00\u884c\u7684\u50cf\u7d20\u7684   bug\u3002#101</li> <li>break: RegionDecoder.decodeRegion() \u7684\u8fd4\u56de\u7ed3\u679c\u4ece TileImage \u6539\u4e3a TileBitmap</li> <li>break: \u79fb\u9664 TileImage \u7684 key \u548c fromCache \u5c5e\u6027</li> </ul>"},{"location":"zh/CHANGELOG/#140-beta03","title":"1.4.0-beta03","text":"<ul> <li>fix: \u4fee\u590d CoilZoomAsyncImage \u5f00\u542f crossfade   \u5e76\u4e14\u5360\u4f4d\u56fe\u50cf\u6bd4\u52a0\u8f7d\u56fe\u50cf\u5927\u65f6\u5185\u5bb9\u5927\u5c0f\u4e0d\u6b63\u786e\u7684\u95ee\u9898\u3002#94</li> <li>fix: \u4fee\u590d SketchZoomAsyncImage \u548c SketchZoomImageView \u4e0d\u652f\u6301 downloadCachePolicy \u548c   downloadCacheKey \u7b49\u53c2\u6570\u7684 bug\u3002 #89</li> <li>fix: \u4fee\u590d CoilZoomAsyncImage \u548c CoilZoomImageView \u4e0d\u652f\u6301 diskCachePolicy \u548c   networkCachePolicy \u7b49\u53c2\u6570\u7684 bug\u3002 #90</li> <li>fix: \u4fee\u590d GlideZoomImageView \u4e0d\u652f\u6301 thumbnail() \u7684   bug\u3002 #93</li> <li>fix: \u73b0\u5728\u5b50\u91c7\u6837\u7684 stopped \u5c5e\u6027\u4e5f\u53c2\u4e0e\u8ba1\u7b97 ready\u3002#97</li> <li>improve: GlideZoomAsyncImage \u548c GlideZoomImageView \u73b0\u5728\u4f7f\u7528 asFile \u7684\u65b9\u5f0f   \u52a0\u8f7d\u672a\u77e5\u7c7b\u578b\u7684 model\u3002 #76</li> <li>new: \u65b0\u589e <code>zoomimage-compose-sketch4-koin</code> \u548c <code>zoomimage-view-sketch4-koin</code> \u6a21\u5757\uff0c\u9002\u914d sketch4 \u7684   koin \u6a21\u5f0f\u3002#95</li> <li>new: SubsamplingState \u548c SubsamplingEngine \u65b0\u589e disabled   \u5c5e\u6027\u53ef\u4ee5\u7981\u7528\u5b50\u91c7\u6837\u529f\u80fd\u3002#96</li> <li>new: SubsamplingState \u548c SubsamplingEngine \u65b0\u589e disabledAutoStopWithLifecycle \u5c5e\u6027\u53ef\u4ee5\u7981\u7528\u6839\u636e   Lifecycle \u81ea\u52a8\u505c\u6b62\u5b50\u91c7\u6837\u529f\u80fd\u3002 #91</li> <li>depend: \u66f4\u65b0 sketch 4.2.0</li> </ul>"},{"location":"zh/CHANGELOG/#140-beta02","title":"1.4.0-beta02","text":"<ul> <li>fix: \u4fee\u590d 1.4.0-beta01 \u7248\u672c\u5185\u5bb9\u4f4d\u7f6e\u6f02\u79fb\u7684 bug</li> </ul>"},{"location":"zh/CHANGELOG/#140-beta01","title":"1.4.0-beta01","text":"<ul> <li>fix: RTL   \u6a21\u5f0f\u4e0b\u9605\u8bfb\u6a21\u5f0f\u5e94\u8be5\u5c06\u521d\u59cb\u504f\u79fb\u5b9a\u4f4d\u5230\u672b\u5c3e\u3002 #84</li> <li>improve: SketchZoomAsyncImage \u548c CoilZoomAsyncImage \u73b0\u5728\u76f4\u63a5\u57fa\u4e8e\u539f\u672c\u7684 AsyncImage \u7ec4\u4ef6</li> <li>improve: Modifier.zoomable() \u73b0\u5728\u51cf\u5c11\u4e86\u4e00\u4e2a ModifierNodeElement</li> <li>new: ZoomableState \u65b0\u589e layoutDirection \u5c5e\u6027\uff0cZoomableEngine \u65b0\u589e rtlLayoutDirectionState \u5c5e\u6027</li> <li>depend: \u66f4\u65b0 sketch 4.2.0-beta01</li> </ul>"},{"location":"zh/CHANGELOG/#130","title":"1.3.0","text":"<p>[!CAUTION] compose multiplatform 1.8.0 \u7248\u672c\u5fc5\u987b jvm 11 \u624d\u80fd\u7f16\u8bd1\uff0c\u8bf7\u4fee\u6539 sourceCompatibility\u3001targetCompatibility\u3001jvmTarget \u7b49\u914d\u7f6e\u4e3a 11+</p> <ul> <li>fix: \u4fee\u590d read \u6a21\u5f0f\u4e0b\u5185\u5bb9\u5c3a\u5bf8\u5927\u4e8e\u5bb9\u5668\u5c3a\u5bf8\u65f6\u521d\u59cb\u504f\u79fb\u4e0d\u6b63\u786e\u7684 bug</li> <li>improve: \u6539\u8fdb minScale \u7b97\u6cd5\uff0c\u73b0\u5728 initialScale \u6bd4 baseScale \u5c0f\u6216\u4e8c\u8005\u5dee\u522b\u8fc7\u5c0f\u65f6\u4f18\u5148\u4f7f\u7528 initialScale</li> <li>depend: \u66f4\u65b0 kotlin 2.1.10</li> <li>depend: \u66f4\u65b0 compose multiplatform 1.8.0</li> <li>depend: \u66f4\u65b0 exifinterface 1.4.1</li> <li>depend: \u66f4\u65b0 accompanist-drawablepainter 0.37.3</li> <li>depend: \u66f4\u65b0 jetbrains-lifecycle 2.8.4</li> <li>depend: \u66f4\u65b0 kotlinx-coroutines 1.10.2</li> <li>depend: \u66f4\u65b0 okio 3.11.0</li> <li>depend: \u66f4\u65b0 glide 4.16.0</li> <li>depend: \u66f4\u65b0 coil 3.2.0</li> <li>depend: \u66f4\u65b0 sketch 4.1.0</li> <li>depend: \u4e0d\u518d\u66ff\u6362 <code>kotlin-stdlib-jdk7</code> \u548c <code>kotlin-stdlib-jdk8</code> \u4e3a <code>kotlin-stdlib</code></li> </ul>"},{"location":"zh/CHANGELOG/#120","title":"1.2.0","text":"<p>zoom:</p> <ul> <li>fix: ZoomableState \u548c ZoomableEngine \u7684 reset() \u65b9\u6cd5\u7684 caller   \u53c2\u6570\u88ab\u79fb\u9664\u5e76\u4e14\u73b0\u5728\u59cb\u7ec8\u4f1a\u91cd\u7f6e\u53d8\u6362\u72b6\u6001\u3002 #81</li> <li>fix: \u4fee\u590d View \u7248\u672c\u7ec4\u4ef6\u5728\u5355\u6307\u7f29\u653e\u8d85\u51fa\u6700\u5927\u8fb9\u754c\u540e\u56de\u6eda\u65f6\u7f29\u653e\u4e2d\u5fc3\u6ca1\u6709\u4ee5\u624b\u6307\u4e3a\u4e2d\u5fc3\u7684   bug\u3002 #82</li> <li>fix: \u4fee\u590d\u53cc\u6307\u7f29\u653e\u8d85\u51fa\u6700\u5927\u8fb9\u754c\u540e\u56de\u6eda\u65f6\u7f29\u653e\u4e2d\u5fc3\u6ca1\u6709\u4ee5\u53cc\u6307\u4e2d\u5fc3\u4e3a\u7f29\u653e\u4e2d\u5fc3\u7684   bug\u3002 #83</li> <li>improve: \u6539\u8fdb\u6839\u636e\u5927\u5c0f\u5224\u65ad\u662f\u5426\u662f\u7f29\u7565\u56fe\u7684\u903b\u8f91\uff0c\u73b0\u5728\u4e0d\u8bba\u7f29\u653e\u591a\u5c11\u500d\u90fd\u80fd\u6b63\u786e\u5224\u65ad\uff0c\u8bef\u5dee\u8303\u56f4\u5728 2 \u4e2a\u50cf\u7d20\u4ee5\u5185</li> <li>improve: ZoomImage \u7cfb\u5217\u7ec4\u4ef6\u6062\u590d\u53cc\u6307\u79fb\u52a8\u624b\u52bf</li> <li>improve: \u91cd\u6784\u9f20\u6807\u6eda\u8f6e\u7f29\u653e\u8ba1\u7b97\u903b\u8f91\uff0c\u4f7f\u5f97\u684c\u9762\u548c web \u5e73\u53f0\u7684\u7f29\u653e\u901f\u5ea6\u4e00\u81f4\uff0c\u5e76\u65b0\u589e   mouseWheelScaleCalculator \u5c5e\u6027\u7528\u4e8e\u81ea\u5b9a\u4e49\u8ba1\u7b97\u903b\u8f91</li> <li>new: ZoomableState \u548c ZoomableEngine \u65b0\u589e keepTransformWhenSameAspectRatioContentSizeChanged   \u53c2\u6570\uff0c\u5f00\u542f\u540e\u53ef\u4ee5\u5728\u5207\u6362\u5bbd\u9ad8\u6bd4\u4e00\u6837\u7684\u56fe\u7247\u65f6\u4fdd\u6301   \u53d8\u6362\u72b6\u6001\u3002 #58</li> <li>new: ZoomableState \u548c ZoomableEngine \u65b0\u589e scaleBy()\u3001scaleByPlus()\u3001offsetBy()\u3001rotateBy() \u7b49\u65b9\u6cd5</li> </ul> <p>other:</p> <ul> <li>depend: \u5347\u7ea7 sketch 4.0.5</li> </ul>"},{"location":"zh/CHANGELOG/#112","title":"1.1.2","text":"<p>subsampling:</p> <ul> <li>fix: \u6355\u83b7 close \u5f02\u5e38\u3002 #75</li> </ul>"},{"location":"zh/CHANGELOG/#111","title":"1.1.1","text":"<p>zoom:</p> <ul> <li>improve: \u73b0\u5728 ZoomableState \u548c ZoomableEngine \u90fd\u662f\u57fa\u4e8e ZoomableCore \u7684\u5305\u88c5\u5668</li> <li>new: ZoomableState \u548c ZoomableEngine \u65b0\u589e   contentBaseDisplayRectF\u3001contentBaseVisibleRectF\u3001contentDisplayRectF\u3001contentVisibleRectF\u3001userOffsetBoundsRectF   \u5c5e\u6027\uff0cscale() \u548c switchScale() \u65b9\u6cd5\u589e\u52a0 centroidContentPointF \u53c2\u6570\uff0c\u589e\u52a0 locate(Offset)   \u3001touchPointToContentPointF \u65b9\u6cd5</li> </ul> <p>subsampling:</p> <ul> <li>fix: \u4fee\u590d View \u7248\u672c\u7684 Tile Bounds \u989c\u8272\u4e0d\u6b63\u786e\u7684 bug</li> <li>improve: \u73b0\u5728 SubsamplingState \u548c SubsamplingEngine \u90fd\u662f\u57fa\u4e8e SubsamplingCore \u7684\u5305\u88c5\u5668</li> </ul> <p>other:</p> <ul> <li>improve: \u6539\u8fdb\u65e5\u5fd7\uff0c\u73b0\u5728\u66f4\u8be6\u7ec6\u7684\u65e5\u5fd7\u4fe1\u606f\u4f8b\u5982\u52a8\u753b\u8fc7\u7a0b\u3001Tile \u52a0\u8f7d\u7b49\u65e5\u5fd7\u7ea7\u522b\u8c03\u6574\u4e3a Verbose</li> <li>depend: \u5347\u7ea7 sketch 4.0.2</li> </ul>"},{"location":"zh/CHANGELOG/#110-stable","title":"1.1.0 Stable","text":"<p>[!CAUTION] \u4e3a\u5b9e\u73b0\u652f\u6301 js \u548c iOS \u5e73\u53f0\uff0c\u6240\u6709 <code>remove</code> \u548c <code>change</code> \u6807\u7b7e\u7684\u53d8\u66f4\u90fd\u662f\u7834\u574f\u6027\u7684</p> <p>zoom:</p> <ul> <li>fix: \u4fee\u590d ZoomableEngine \u7684 contentSizeState \u5c5e\u6027 collect \u548c value \u8fd4\u56de\u7684\u503c\u4e0d\u4e00\u81f4\u7684   bug\u3002 #37</li> <li>fix: \u4fee\u590d\u5728 LayoutDirection \u4e3a RTL \u6a21\u5f0f\u4e0b\u504f\u79fb\u9519\u8bef\u7684   bug. #65</li> <li>remove: \u79fb\u9664 'remember*ZoomState()' \u7cfb\u5217\u51fd\u6570\u7684 logger \u53c2\u6570</li> <li>change: ZoomImage \u7cfb\u5217\u7ec4\u4ef6\u7981\u7528\u53cc\u6307\u62d6\u52a8\u624b\u52bf\uff0c\u907f\u514d\u5feb\u901f\u53cc\u6307\u7f29\u653e\u540e\u53c8\u89e6\u53d1 fling   \u5bfc\u81f4\u56fe\u7247\u6f02\u79fb\u3002 #28</li> <li>change: ZoomableState \u548c ZoomableEngine \u7684 <code>contentSize</code> \u5c5e\u6027\u73b0\u5728\u4e3a\u7a7a\u65f6\u4e0d\u518d\u8fd4\u56de <code>containerSize</code></li> <li>change: \u6eda\u52a8\u6761\u7684\u6700\u5c0f\u957f\u5ea6\u73b0\u5728\u662f 10.dp</li> <li>improve: ZoomImageView   \u7cfb\u5217\u7ec4\u4ef6\u53cc\u6307\u7f29\u653e\u624b\u52bf\u73b0\u5728\u53ea\u9700\u6ed1\u52a8\u6bd4\u8f83\u77ed\u7684\u8ddd\u79bb\u5c31\u53ef\u4ee5\u89e6\u53d1. #61</li> <li>improve: \u4e3a\u6240\u6709\u7ec4\u4ef6\u7684 alignment \u5c5e\u6027\u63d0\u4f9b LayoutDirection RTL   \u652f\u6301. #66</li> <li>new: \u65b0\u589e\u652f\u6301\u9f20\u6807\u6eda\u8f6e\u7f29\u653e\u529f\u80fd\u3002 #35</li> <li>new: \u65b0\u589e\u652f\u6301\u952e\u76d8\u7f29\u653e\u548c\u62d6\u52a8\u529f\u80fd\u3002 #42</li> <li>new: 'remember*ZoomState()' \u7cfb\u5217\u51fd\u6570\u589e\u52a0 'logLevel: Level' \u53c2\u6570</li> <li>new: \u65b0\u589e <code>containerWhitespaceMultiple</code> \u548c <code>containerWhitespace</code>   \u53c2\u6570\u7528\u4e8e\u5728\u56fe\u50cf\u8fb9\u7f18\u548c\u5bb9\u5668\u8fb9\u7f18\u4e4b\u95f4\u7559\u51fa\u7a7a\u767d\u533a\u57df\u3002 #45</li> </ul> <p>subsampling:</p> <ul> <li>fix: \u4fee\u590d\u5728\u9047\u5230\u6781\u7aef\u5c3a\u5bf8\uff08\u4e00\u8fb9\u7279\u522b\u5927\u4e00\u8fb9\u7279\u522b\u5c0f\uff09\u7684\u56fe\u7247\u65f6\u5bfc\u81f4 Tile \u5730\u56fe\u8ba1\u7b97\u5f02\u5e38\u800c\u5d29\u6e83\u7684   bug\u3002 #32</li> <li>fix: \u4fee\u590d coil \u548c glide \u7cfb\u5217\u7ec4\u4ef6\u4e0d\u652f\u6301 '/sdcard/sample.jpeg' \u7c7b\u578b model \u7684   bug\u3002 #34</li> <li>remove: \u79fb\u9664 TileBitmapCache \u7684 put() \u65b9\u6cd5\u7684 disallowReuseBitmap \u53c2\u6570</li> <li>remove: \u79fb\u9664 BitmapFrom</li> <li>change: \u79fb\u9664 ignoreExifOrientation \u5c5e\u6027</li> <li>change: \u79fb\u9664 disabledTileBitmapReuse \u548c TileBitmapPool \u5c5e\u6027</li> <li>change: \u975e\u5b89\u5353\u5e73\u53f0\u73b0\u5728\u4f7f\u7528 Skia \u89e3\u7801\u56fe\u7247</li> <li>change: \u7528 Jetbrains Lifecycle \u4ee3\u66ff StoppedController</li> <li>change: ImageSource \u73b0\u5728\u4f7f\u7528 okio \u7684 Source \u4ee3\u66ff InputStream</li> <li>change: \u684c\u9762\u5e73\u53f0\u7684 ImageSource.fromResource() \u6539\u4e3a fromKotlinResource()</li> <li>change: ImageSource.fromFile(File) \u73b0\u5728\u662f JVM \u5e73\u53f0\u4e13\u5c5e\u7684\u6269\u5c55\u51fd\u6570</li> <li>change: \u79fb\u9664 ImageSource \u7684 openSource() \u65b9\u6cd5\u7684 suspend \u4fee\u9970\u7b26\uff0c\u9700\u8981 suspend \u7684\u8bdd\u8bf7\u4f7f\u7528   ImageSource.Factory</li> <li>change: \u73b0\u5728\u4e0d\u518d\u6839\u636e\u7f29\u7565\u56fe\u7684\u56fe\u50cf\u8bf7\u6c42\u7684\u5185\u5b58\u7f13\u5b58\u8bbe\u7f6e\u6765\u51b3\u5b9a\u662f\u5426\u7981\u7528 Tile \u7684\u5185\u5b58\u7f13\u5b58</li> <li>change: SubsamplingState.disabledTileBitmapCache \u91cd\u547d\u540d\u4e3a disabledTileImageCache</li> <li>change: SubsamplingState.tileBitmapCache \u91cd\u547d\u540d\u4e3a tileImageCache</li> <li>change: SubsamplingEngine.disabledTileBitmapCacheState \u91cd\u547d\u540d\u4e3a disabledTileImageCacheState</li> <li>change: SubsamplingEngine.tileBitmapCacheState \u91cd\u547d\u540d\u4e3a tileImageCacheState</li> <li>improve: \u653e\u5bbd\u7f29\u7565\u56fe\u548c\u539f\u56fe\u7684\u5bbd\u9ad8\u6bd4\u9650\u5236\u3002 #22</li> <li>improve: \u6539\u8fdb   BitmapRegionDecoderDecodeHelper\uff0c\u73b0\u5728\u53ea\u4f1a\u5728\u9500\u6bc1\u65f6\u5173\u95ed\u8f93\u5165\u6d41\u3002 #29</li> <li>improve: \u73b0\u5728\u4ece\u5185\u5b58\u4e2d\u52a0\u8f7d\u7684\u56fe\u5757\u5728\u663e\u793a\u65f6\u4e5f\u4f1a\u6709\u52a8\u753b\u6548\u679c</li> <li>improve: \u73b0\u5728\u975e Android \u5e73\u53f0\u5728\u5b50\u91c7\u6837\u65f6\u4f1a\u76f4\u63a5\u5ffd\u7565 gif \u56fe\u7247</li> <li>improve: \u73b0\u5728\u53ea\u8981\u7f29\u7565\u56fe\u7684\u4efb\u610f\u4e00\u8fb9\u8d85\u8fc7\u539f\u56fe\u5c31\u65e0\u6cd5\u4f7f\u7528\u5b50\u91c7\u6837</li> <li>improve: \u6539\u8fdb SketchZoomImageview\u3001CoilZoomImageView\u3001GlideZoomImageView\u3001PicassoZoomImageView\uff0c\u73b0\u5728\u8bbe\u7f6e   ImageSource \u65f6\u53ea\u8981\u5931\u8d25\u5c31\u4f1a\u6e05\u7a7a ImageSource</li> <li>improve: \u6539\u8fdb sketch   \u7cfb\u5217\u7ec4\u4ef6\uff0c\u5b50\u91c7\u6837\u521d\u59cb\u5316\u5b8c\u6210\u540e\u4e0d\u4f1a\u518d\u91cd\u7f6e\u53d8\u7126\u3002 #50</li> <li>improve: \u73b0\u5728 Sketch\u3001Coil\u3001Glide \u7cfb\u5217\u7ec4\u4ef6\u5728\u8bbe\u7f6e\u5b50\u91c7\u6837\u65f6\u4f1a\u4e3b\u52a8\u8fc7\u6ee4\u52a8\u56fe</li> <li>new: \u65b0\u589e\u652f\u6301 js\u3001wasmJs\u3001iOS \u5e73\u53f0</li> <li>new: TileBitmap \u589e\u52a0 bitmapFrom \u5c5e\u6027</li> <li>new: GlideZoomAsyncImage\u3001GlideZoomImageView\u3001PicassoZoomImageView \u652f\u6301\u6269\u5c55 ImageSource</li> <li>new: \u65b0\u589e ImageSource.Factory \u63a5\u53e3\uff0c\u7528\u4e8e\u521b\u5efa ImageSource</li> <li>new: ZoomState \u548c ZoomImageView \u589e\u52a0 <code>setSubsamplingImage()</code> \u65b9\u6cd5\uff0c\u7528\u4e8e\u8bbe\u7f6e ImageSource</li> </ul> <p>other:</p> <ul> <li>remove: \u79fb\u9664 Logger \u7684 showThreadName \u53c2\u6570</li> <li>remove: \u79fb\u9664 Logger \u7684 module \u5c5e\u6027</li> <li>change: sketch-compose-coil \u6a21\u5757\u91cd\u547d\u540d\u4e3a sketch-compose-coil2\uff0c\u5e76\u65b0\u589e sketch-compose-coil3 \u6a21\u5757</li> <li>change: sketch-compose-sketch \u6a21\u5757\u91cd\u547d\u540d\u4e3a sketch-compose-sketch3\uff0c\u5e76\u65b0\u589e sketch-compose-sketch4 \u6a21\u5757</li> <li>change: sketch-core-coil \u6a21\u5757\u91cd\u547d\u540d\u4e3a sketch-compose-coil2\uff0c\u5e76\u65b0\u589e sketch-core-coil3 \u6a21\u5757</li> <li>change: sketch-core-sketch \u6a21\u5757\u91cd\u547d\u540d\u4e3a sketch-compose-sketch3\uff0c\u5e76\u65b0\u589e sketch-core-sketch4 \u6a21\u5757</li> <li>change: sketch-view-coil \u6a21\u5757\u91cd\u547d\u540d\u4e3a sketch-compose-coil2\uff0c\u5e76\u65b0\u589e sketch-view-coil3 \u6a21\u5757</li> <li>change: sketch-view-sketch \u6a21\u5757\u91cd\u547d\u540d\u4e3a sketch-compose-sketch3\uff0c\u5e76\u65b0\u589e sketch-view-sketch4 \u6a21\u5757</li> <li>change: Logger.DEBUG \u6539\u4e3a Logger.Level.Debug</li> <li>change: \u73b0\u5728\u6bcf\u4e2a\u7ec4\u4ef6\u7684\u65e5\u5fd7\u7684 tag \u90fd\u662f\u5355\u72ec\u7684</li> <li>change: ZoomImage\u3001SketchZoomAsyncImage\u3001CoilZoomAsyncImage\u3001GlideZoomAsyncImage   \u7b49\u51fd\u6570\u7684 <code>state: ZoomState</code> \u53c2\u6570\u7684\u540d\u5b57\u6539\u4e3a <code>zoomState: ZoomState</code></li> <li>depend: \u5347\u7ea7 kotlin 2.0.21, kotlinx coroutines 1.9.0</li> <li>depend: \u5347\u7ea7 jetbrains compose 1.7.0, jetbrains lifecycle 2.8.3</li> <li>depend: \u5347\u7ea7 coil 2.7.0</li> </ul>"},{"location":"zh/CHANGELOG/#110-rc03","title":"1.1.0-rc03","text":"<p>zoom:</p> <ul> <li>fix: \u4fee\u590d containerWhitespace \u5bfc\u81f4\u5d29\u6e83\u7684 bug. #63</li> <li>fix: \u4fee\u590d\u5728 LayoutDirection \u4e3a RTL \u6a21\u5f0f\u4e0b\u504f\u79fb\u9519\u8bef\u7684   bug. #65</li> <li>improve: \u4e3a\u6240\u6709\u7ec4\u4ef6\u7684 alignment \u548c containerWhitespace \u5c5e\u6027\u63d0\u4f9b LayoutDirection RTL   \u652f\u6301. #66</li> </ul> <p>depend:</p> <ul> <li>depend: \u5347\u7ea7 coil v3.0.4 \u7248\u672c</li> </ul>"},{"location":"zh/CHANGELOG/#110-rc02","title":"1.1.0-rc02","text":"<p>zoom:</p> <ul> <li>fix: 'zoomimage-compose-sketch4' \u6a21\u5757\u7684 SketchZoomAsyncImage   \u7ec4\u4ef6\u59cb\u7ec8\u9996\u5148\u5728\u5de6\u4e0a\u89d2\u663e\u793a\u56fe\u50cf\uff0c\u7136\u540e\u7acb\u5373\u5c06\u56fe\u50cf\u79fb\u52a8\u5230\u5c4f\u5e55\u4e2d\u592e. #60</li> <li>improve: ZoomImageView   \u7cfb\u5217\u7ec4\u4ef6\u53cc\u6307\u7f29\u653e\u624b\u52bf\u73b0\u5728\u53ea\u9700\u6ed1\u52a8\u6bd4\u8f83\u77ed\u7684\u8ddd\u79bb\u5c31\u53ef\u4ee5\u89e6\u53d1. #61</li> <li>new: \u65b0\u589e containerWhitespace   \u5c5e\u6027\u7528\u4e8e\u4ee5\u50cf\u7d20\u503c\u7684\u65b9\u5f0f\u8bbe\u7f6e\u5bb9\u5668\u5bb9\u5668\u56db\u5468\u7684\u7a7a\u767d. #59</li> </ul> <p>subsampling:</p> <ul> <li>improve: \u6539\u8fdb\u6839\u636e mimeType \u5224\u65ad\u662f\u5426\u652f\u6301\u533a\u57df\u89e3\u7801\uff0c\u975e image \u7c7b\u578b\u76f4\u63a5\u8fd4\u56de false\uff0c\u975e Android \u5e73\u53f0\u4e0a\u6839\u636e   skiko \u7248\u672c\u5224\u65ad\u662f\u5426\u652f\u6301 heic\u3001heif\u3001avif \u7c7b\u578b</li> </ul> <p>depend:</p> <ul> <li>depend: \u5347\u7ea7 sketch4 v4.0.0-rc01 \u7248\u672c</li> </ul>"},{"location":"zh/CHANGELOG/#110-rc01","title":"1.1.0-rc01","text":"<p>zoom:</p> <ul> <li>new: \u65b0\u589e <code>containerWhitespaceMultiple</code>   \u53c2\u6570\u7528\u4e8e\u5728\u56fe\u50cf\u8fb9\u7f18\u548c\u5bb9\u5668\u8fb9\u7f18\u4e4b\u95f4\u7559\u51fa\u7a7a\u767d\u533a\u57df\u3002 #45</li> </ul> <p>subsampling:</p> <ul> <li>remove: \u79fb\u9664 BitmapFrom</li> <li>change: SubsamplingState.disabledTileBitmapCache \u91cd\u547d\u540d\u4e3a disabledTileImageCache</li> <li>change: SubsamplingState.tileBitmapCache \u91cd\u547d\u540d\u4e3a tileImageCache</li> <li>change: SubsamplingEngine.disabledTileBitmapCacheState \u91cd\u547d\u540d\u4e3a disabledTileImageCacheState</li> <li>change: SubsamplingEngine.tileBitmapCacheState \u91cd\u547d\u540d\u4e3a tileImageCacheState</li> <li>improve: \u6539\u8fdb sketch   \u7cfb\u5217\u7ec4\u4ef6\uff0c\u5b50\u91c7\u6837\u521d\u59cb\u5316\u5b8c\u6210\u540e\u4e0d\u4f1a\u518d\u91cd\u7f6e\u53d8\u7126\u3002 #50</li> <li>improve: \u73b0\u5728 Sketch\u3001Coil\u3001Glide \u7cfb\u5217\u7ec4\u4ef6\u5728\u8bbe\u7f6e\u5b50\u91c7\u6837\u65f6\u4f1a\u4e3b\u52a8\u8fc7\u6ee4\u52a8\u56fe</li> <li>new: *ZoomState \u548c *ZoomImageView \u65b0\u589e setSubsamplingImage() \u65b9\u6cd5\u7528\u4e8e\u66ff\u4ee3 setImageSource() \u65b9\u6cd5</li> </ul> <p>other:</p> <ul> <li>change: sketch-compose-coil \u6a21\u5757\u91cd\u547d\u540d\u4e3a sketch-compose-coil3</li> <li>change: sketch-compose-coil-core \u6a21\u5757\u91cd\u547d\u540d\u4e3a sketch-compose-coil3-core</li> <li>change: sketch-compose-sketch \u6a21\u5757\u91cd\u547d\u540d\u4e3a sketch-compose-sketch4</li> <li>change: sketch-compose-sketch-core \u6a21\u5757\u91cd\u547d\u540d\u4e3a sketch-compose-sketch4-core</li> <li>change: sketch-core-coil \u6a21\u5757\u91cd\u547d\u540d\u4e3a sketch-core-coil3</li> <li>change: sketch-core-coil-core \u6a21\u5757\u91cd\u547d\u540d\u4e3a sketch-core-coil3-core</li> <li>change: sketch-core-sketch \u6a21\u5757\u91cd\u547d\u540d\u4e3a sketch-core-sketch4</li> <li>change: sketch-core-sketch-core \u6a21\u5757\u91cd\u547d\u540d\u4e3a sketch-core-sketch4-core</li> <li>change: sketch-view-coil \u6a21\u5757\u91cd\u547d\u540d\u4e3a sketch-view-coil3</li> <li>change: sketch-view-coil-core \u6a21\u5757\u91cd\u547d\u540d\u4e3a sketch-view-coil3-core</li> <li>change: sketch-view-sketch \u6a21\u5757\u91cd\u547d\u540d\u4e3a sketch-view-sketch4</li> <li>change: sketch-view-sketch-core \u6a21\u5757\u91cd\u547d\u540d\u4e3a sketch-view-sketch4-core</li> <li>depend: \u5347\u7ea7 jetbrains compose 1.7.0, jetbrains lifecycle 2.8.3</li> </ul>"},{"location":"zh/CHANGELOG/#110-beta01","title":"1.1.0-beta01","text":"<p>zoom:</p> <ul> <li>change: ZoomableState \u548c ZoomableEngine \u7684 <code>contentSize</code> \u5c5e\u6027\u73b0\u5728\u4e3a\u7a7a\u65f6\u4e0d\u518d\u8fd4\u56de <code>containerSize</code></li> <li>change: \u6eda\u52a8\u6761\u7684\u6700\u5c0f\u957f\u5ea6\u73b0\u5728\u662f 10.dp</li> <li>new: 'remember*ZoomState()' \u7cfb\u5217\u51fd\u6570\u589e\u52a0 'logLevel: Level' \u53c2\u6570</li> </ul> <p>subsampling:</p> <ul> <li>change: \u73b0\u5728\u4e0d\u518d\u6839\u636e\u7f29\u7565\u56fe\u7684\u56fe\u50cf\u8bf7\u6c42\u7684\u5185\u5b58\u7f13\u5b58\u8bbe\u7f6e\u6765\u51b3\u5b9a\u662f\u5426\u7981\u7528 Tile \u7684\u5185\u5b58\u7f13\u5b58</li> <li>improve: \u6539\u8fdb SketchZoomImageview\u3001CoilZoomImageView\u3001GlideZoomImageView\u3001PicassoZoomImageView\uff0c\u73b0\u5728\u8bbe\u7f6e   ImageSource \u65f6\u53ea\u8981\u5931\u8d25\u5c31\u4f1a\u6e05\u7a7a ImageSource</li> <li>new: ZoomState \u548c ZoomImageView \u589e\u52a0 <code>setImageSource()</code> \u65b9\u6cd5\uff0c\u7528\u4e8e\u8bbe\u7f6e ImageSource</li> </ul>"},{"location":"zh/CHANGELOG/#110-alpha06","title":"1.1.0-alpha06","text":"<p>zoom:</p> <ul> <li>broken: \u79fb\u9664 'remember*ZoomState()' \u7cfb\u5217\u51fd\u6570\u7684 logger \u53c2\u6570</li> <li>new: \u65b0\u589e\u652f\u6301\u9f20\u6807\u6eda\u8f6e\u7f29\u653e\u529f\u80fd\u3002 #35</li> <li>new: \u65b0\u589e\u652f\u6301\u952e\u76d8\u7f29\u653e\u548c\u62d6\u52a8\u529f\u80fd\u3002 #42</li> </ul> <p>subsampling:</p> <ul> <li>broken: CoilModelToImageSource\u3001GlideModelToImageSource\u3001PicassoDataToImageSource \u63a5\u53e3\u7684   *ToImageSource \u65b9\u6cd5\u6dfb\u52a0 suspend \u4fee\u9970\u7b26</li> <li>broken: \u79fb\u9664 SubsamplingEngine \u7684\u6784\u9020\u51fd\u6570\u7684 view \u53c2\u6570</li> </ul>"},{"location":"zh/CHANGELOG/#110-alpha05","title":"1.1.0-alpha05","text":"<p>subsampling:</p> <ul> <li>change: CoilZomState \u548c GlideZoomState \u7684 *ModelToImageSource \u6539\u4e3a\u5728\u521b\u5efa\u65f6\u63d0\u4f9b</li> <li>new: coil\u3001glide\u3001picasso \u7cfb\u5217\u7ec4\u4ef6\u73b0\u5728\u652f\u6301 'android.resource://example.package.name/drawable/image'   \u548c 'android.resource://example.package.name/4125123' \u7c7b\u578b\u7684 model</li> </ul> <p>zoom:</p> <ul> <li>fix: \u4fee\u590d ZoomableEngine \u7684 contentSizeState \u5c5e\u6027 collect \u548c value \u8fd4\u56de\u7684\u503c\u4e0d\u4e00\u81f4\u7684   bug \u3002 #37</li> <li>change: ZoomImage \u7cfb\u5217\u7ec4\u4ef6\u7981\u7528\u53cc\u6307\u62d6\u52a8\u624b\u52bf\uff0c\u907f\u514d\u5feb\u901f\u53cc\u6307\u7f29\u653e\u540e\u53c8\u89e6\u53d1 fling   \u5bfc\u81f4\u56fe\u7247\u6f02\u79fb\u3002 #28</li> </ul> <p>other:</p> <ul> <li>upgrade: \u5347\u7ea7 sketch \u5230 4.0.0-alpha05 \u7248\u672c</li> </ul>"},{"location":"zh/CHANGELOG/#110-alpha04","title":"1.1.0-alpha04","text":"<p>subsampling:</p> <ul> <li>fix: \u4fee\u590d\u5728\u9047\u5230\u6781\u7aef\u5c3a\u5bf8\uff08\u4e00\u8fb9\u7279\u522b\u5927\u4e00\u8fb9\u7279\u522b\u5c0f\uff09\u7684\u56fe\u7247\u65f6\u5bfc\u81f4 Tile \u5730\u56fe\u8ba1\u7b97\u5f02\u5e38\u800c\u5d29\u6e83\u7684   bug\u3002 #32</li> <li>fix: \u4fee\u590d coil \u548c glide \u7cfb\u5217\u7ec4\u4ef6\u4e0d\u652f\u6301 '/sdcard/sample.jpeg' \u7c7b\u578b model \u7684   bug\u3002 #34</li> <li>fix: \u4fee\u590d ios \u7248 KotlinResourceImageSource \u65e0\u6cd5\u52a0\u8f7d\u56fe\u7247\u7684   bug\u3002 #36</li> <li>improve: \u73b0\u5728\u975e Android \u5e73\u53f0\u5728\u5b50\u91c7\u6837\u65f6\u4f1a\u76f4\u63a5\u5ffd\u7565 gif \u56fe\u7247</li> <li>improve: \u73b0\u5728\u53ea\u8981\u7f29\u7565\u56fe\u7684\u4efb\u610f\u4e00\u8fb9\u8d85\u8fc7\u539f\u56fe\u5c31\u65e0\u6cd5\u4f7f\u7528\u5b50\u91c7\u6837</li> </ul>"},{"location":"zh/CHANGELOG/#110-alpha03","title":"1.1.0-alpha03","text":"<p>subsampling:</p> <ul> <li>fix: \u4fee\u590d coil \u7cfb\u5217\u7684\u7ec4\u4ef6\u4ece 1.1.0-alpha02 \u7248\u672c\u5f00\u59cb\u65e0\u6cd5\u5b50\u91c7\u6837\u7684   bug\u3002 #31</li> <li>improve: GlideModeToImageSource \u548c PicassoDataToImageSource \u73b0\u5728\u662f\u7528\u6237\u6ce8\u518c\u7684\u4f18\u5148</li> <li>improve: \u6539\u8fdb   BitmapRegionDecoderDecodeHelper\uff0c\u73b0\u5728\u53ea\u4f1a\u5728\u9500\u6bc1\u65f6\u5173\u95ed\u8f93\u5165\u6d41\u3002 #29</li> <li>improve: \u73b0\u5728\u4ece\u5185\u5b58\u4e2d\u52a0\u8f7d\u7684\u56fe\u5757\u5728\u663e\u793a\u65f6\u4e5f\u4f1a\u6709\u52a8\u753b\u6548\u679c</li> </ul> <p>zoom:</p> <ul> <li>remove: \u79fb\u9664 GestureType.NONE \u548c ContinuousTransformType.NONE \u5c5e\u6027</li> <li>change: SubsamplingState \u7684 pausedContinuousTransformType \u5c5e\u6027\u540d\u79f0\u6539\u4e3a   pausedContinuousTransformTypes\uff0cSubsamplingEngine \u7684 pausedContinuousTransformTypeState \u5c5e\u6027\u540d\u79f0\u6539\u4e3a   pausedContinuousTransformTypesState</li> <li>change: ZoomableState \u7684 disabledGestureType \u5c5e\u6027\u540d\u79f0\u6539\u4e3a disabledGestureTypes\uff0cZoomableEngine \u7684   disabledGestureTypeState \u5c5e\u6027\u540d\u79f0\u6539\u4e3a disabledGestureTypesState</li> </ul>"},{"location":"zh/CHANGELOG/#110-alpha02","title":"1.1.0-alpha02","text":"<p>subsampling:</p> <ul> <li>fix: \u4fee\u590d\u5b50\u91c7\u6837\u5e76\u53d1\u63a7\u5236\u5931\u6548\u5bfc\u81f4\u77ed\u65f6\u95f4\u5185\u591a\u6b21\u6253\u5f00 ImageSource \u7684   bug\u3002 #29</li> <li>change: \u79fb\u9664 ImageSource \u7684 openSource() \u65b9\u6cd5\u7684 suspend \u4fee\u9970\u7b26\uff0c\u9700\u8981 suspend \u7684\u8bdd\u8bf7\u4f7f\u7528   ImageSource.Factory</li> <li>improve: \u653e\u5bbd\u7f29\u7565\u56fe\u548c\u539f\u56fe\u7684\u5bbd\u9ad8\u6bd4\u9650\u5236\u3002 #22</li> <li>improve: SketchImageSource\u3001CoilImageSource\u3001GlideHttpImageSource\u3001PicassoHttpImageSource \u73b0\u5728\u652f\u6301\u4ece\u7f51\u7edc\u4e0b\u8f7d\u56fe\u7247</li> <li>new: \u65b0\u589e ImageSource.Factory \u63a5\u53e3\uff0c\u7528\u4e8e\u521b\u5efa ImageSource</li> </ul>"},{"location":"zh/CHANGELOG/#110-alpha01","title":"1.1.0-alpha01","text":"<p>[!CAUTION] \u4e3a\u5b9e\u73b0\u652f\u6301 js \u548c iOS \u5e73\u53f0\uff0c\u6240\u6709 <code>remove</code> \u548c <code>change</code> \u6807\u7b7e\u7684\u53d8\u66f4\u90fd\u662f\u7834\u574f\u6027\u7684</p> <p>subsampling:</p> <ul> <li>remove: \u79fb\u9664 TileBitmapCache \u7684 put() \u65b9\u6cd5\u7684 disallowReuseBitmap \u53c2\u6570</li> <li>change: \u79fb\u9664 ignoreExifOrientation \u5c5e\u6027</li> <li>change: \u79fb\u9664 disabledTileBitmapReuse \u548c TileBitmapPool \u5c5e\u6027</li> <li>change: \u975e\u5b89\u5353\u5e73\u53f0\u73b0\u5728\u4f7f\u7528 Skia \u89e3\u7801\u56fe\u7247</li> <li>change: \u7528 Jetbrains Lifecycle \u4ee3\u66ff StoppedController</li> <li>change: ImageSource \u73b0\u5728\u4f7f\u7528 okio \u7684 Source \u4ee3\u66ff InputStream</li> <li>change: \u684c\u9762\u5e73\u53f0\u7684 ImageSource.fromResource() \u6539\u4e3a fromKotlinResource()</li> <li>change: ImageSource.fromFile(File) \u73b0\u5728\u662f JVM \u5e73\u53f0\u4e13\u5c5e\u7684\u6269\u5c55\u51fd\u6570</li> <li>new: \u65b0\u589e\u652f\u6301 js\u3001wasmJs\u3001iOS \u5e73\u53f0</li> <li>new: TileBitmap \u589e\u52a0 bitmapFrom \u5c5e\u6027</li> <li>new: GlideZoomAsyncImage\u3001GlideZoomImageView\u3001PicassoZoomImageView \u652f\u6301\u6269\u5c55 ImageSource</li> </ul> <p>other:</p> <ul> <li>remove: \u79fb\u9664 Logger \u7684 showThreadName \u53c2\u6570</li> <li>remove: \u79fb\u9664 Logger \u7684 module \u5c5e\u6027</li> <li>change: Logger.DEBUG \u6539\u4e3a Logger.Level.Debug</li> <li>change: \u73b0\u5728\u6bcf\u4e2a\u7ec4\u4ef6\u7684\u65e5\u5fd7\u7684 tag \u90fd\u662f\u5355\u72ec\u7684</li> <li>change: zoomimage-view-sketch \u548c zoomimage-compose-sketch \u6a21\u5757\u5347\u7ea7\u5230 sketch4\uff0c\u540c\u65f6\u65b0\u589e   zoomimage-view-sketch3 \u548c zoomimage-compose-sketch3 \u6a21\u5757\u7ee7\u7eed\u652f\u6301 sketch3</li> <li>change: zoomimage-view-coil \u548c zoomimage-compose-coil \u6a21\u5757\u5347\u7ea7\u5230 coil3\uff0c\u540c\u65f6\u65b0\u589e   zoomimage-view-coil2 \u548c zoomimage-compose-coil2 \u6a21\u5757\u7ee7\u7eed\u652f\u6301 coil2</li> <li>change: ZoomImage\u3001SketchZoomAsyncImage\u3001CoilZoomAsyncImage\u3001GlideZoomAsyncImage   \u7b49\u51fd\u6570\u7684 <code>state: ZoomState</code> \u53c2\u6570\u7684\u540d\u5b57\u6539\u4e3a <code>zoomState: ZoomState</code></li> </ul>"},{"location":"zh/CHANGELOG/#v102","title":"v1.0.2","text":"<ul> <li>fix: \u4fee\u590d ZoomImageView \u5728 API 30 \u53ca\u4ee5\u4e0b\u7248\u672c\u56e0 TypedArray.close() \u65b9\u6cd5\u5d29\u6e83\u7684   bug. #15</li> <li>fix: \u4fee\u590d GlideZoomAsyncImage \u548c GlideZoomImageView \u4e0d\u652f\u6301 'file:///android_asset/' \u548c 'file:   ///sdcard/sample.jpeg' \u7c7b\u578b model \u7684 bug. #16</li> <li>improve: \u6539\u8fdb\u5bf9 Picasso \u7684\u652f\u6301</li> <li>improve: \u6539\u8fdb ScalesCalculator.dynamic()\uff0c\u73b0\u5728\u9605\u8bfb\u6a21\u5f0f\u53ef\u7528\u65f6 mediumScale \u59cb\u7ec8\u662f\u9605\u8bfb\u6a21\u5f0f\u7684\u521d\u59cb\u7f29\u653e\u500d\u6570</li> </ul>"},{"location":"zh/CHANGELOG/#v101","title":"v1.0.1","text":"<ul> <li>fix: \u4fee\u590d ZoomImageView \u5728\u5355\u6307\u62d6\u52a8\u540e\u4e0d\u677e\u624b\u518d\u6309\u4e0b\u4e00\u6839\u624b\u6307\u6267\u884c\u53cc\u6307\u7f29\u653e\u624b\u52bf\u65f6\u56fe\u50cf\u4f1a\u8df3\u52a8\u7684   bug #12</li> </ul>"},{"location":"zh/CHANGELOG/#100","title":"1.0.0","text":"<p>\u521d\u59cb\u7a33\u5b9a\u7248\u53d1\u884c</p>"},{"location":"zh/CHANGELOG/#v100-rc01","title":"v1.0.0-rc01","text":"<p>zoom:</p> <ul> <li>improve: \u6539\u8fdb ZoomableState\u3001ZoomableEngine\u3001SubsamplingState \u548c   SubsamplingEngine\uff0c\u73b0\u5728\u5b83\u4eec\u90fd\u662f\u5728\u88ab\u8bb0\u4f4f\u6216\u9644\u5230\u7a97\u53e3\u65f6\u624d\u4f1a\u5f00\u59cb\u5de5\u4f5c</li> </ul> <p>other:</p> <ul> <li>depend: \u5347\u7ea7 sketch 3.3.0 stable</li> </ul>"},{"location":"zh/CHANGELOG/#v100-beta11","title":"v1.0.0-beta11","text":"<p>zoom:</p> <ul> <li>change: ZoomableEngine \u7684 contentSizeState \u5c5e\u6027\u73b0\u5728\u4e3a\u7a7a\u65f6\u4f1a\u4f7f\u7528 containerSizeState</li> </ul> <p>other:</p> <ul> <li>depend: \u5347\u7ea7 sketch 3.3.0-beta06</li> <li>change: \u91cd\u547d\u540d <code>zoomimage-compose-coil-base</code> \u6a21\u5757\u4e3a <code>zoomimage-compose-coil-core</code></li> <li>improve: GlideZoomAsyncImage \u548c GlideZoomImageView \u73b0\u5728\u652f\u6301 GlideUrl</li> </ul>"},{"location":"zh/CHANGELOG/#100-beta10","title":"1.0.0-beta10","text":"<ul> <li>fix: \u4fee\u590d ZoomImage \u65e0\u6cd5\u663e\u793a\u6eda\u52a8\u6761\u7684 bug</li> <li>fix: \u4fee\u590d SketchZoomAsyncImage \u548c CoilZoomAsyncImage \u5728\u9047\u5230\u6ca1\u6709\u5927\u5c0f\u7684 Drawable \u65f6\u4f1a\u5d29\u6e83\u7684 bug</li> <li>fix: \u4fee\u590d SketchZoomAsyncImage \u548c CoilZoomAsyncImage \u5728 placeholder \u548c result \u8fc7\u6e21\u65f6 placeholder   \u4f1a\u88ab\u610f\u5916\u7684\u7f29\u5c0f\u7684 bug</li> <li>improve: composed \u8fc1\u79fb\u5230 Modifier.Node</li> <li>depend: \u5347\u7ea7 Sketch 3.3.0-beta04</li> </ul>"},{"location":"zh/CHANGELOG/#100-beta09","title":"1.0.0-beta09","text":"<ul> <li>fix: \u4fee\u590d\u5728 Android \u89e3\u7801\u4e0d\u652f\u6301\u7684\u56fe\u7247\u683c\u5f0f\u65f6\u56e0\u4e3a BitmapFactory.Options.outMimeType \u4e3a null \u5bfc\u81f4\u7684\u5d29\u6e83\u95ee\u9898</li> <li>change: <code>zoomimage-core</code> \u6a21\u5757 minSdk \u4ece 21 \u6539\u4e3a 16</li> </ul>"},{"location":"zh/CHANGELOG/#100-beta08","title":"1.0.0-beta08","text":"<ul> <li>fix: \u4fee\u590d <code>zoomimage-compose-glide</code> \u6a21\u5757\u6ca1\u6709\u914d\u7f6e\u6df7\u6dc6\u5bfc\u81f4\u5d29\u6e83\u7684 bug</li> <li>change: \u73b0\u5728\u53ea\u6709 <code>zoomimage-core</code> \u6a21\u5757\u751f\u6210 BuildConfig</li> <li>change: ZoomableEngine \u7684 scale(), rotate() \u7b49\u65b9\u6cd5\u52a0\u4e86 suspend \u4fee\u9970\u7b26</li> <li>new: \u65b0\u589e <code>zoomimage-compose-coil-base</code> \u548c <code>zoomimage-compose-sketch-core</code> \u6a21\u5757\uff0c\u5206\u522b\u4f9d\u8d56\u4e86 Coil \u548c   Sketch \u7684\u975e\u5355\u4f8b\u6a21\u5757</li> <li>depend: \u5347\u7ea7 Sketch 3.3.0-beta02</li> </ul>"},{"location":"zh/CHANGELOG/#100-beta07","title":"1.0.0-beta07","text":"<p>zoom:</p> <ul> <li>fix: \u73b0\u5728\u5355\u6307\u7f29\u653e\u548c\u957f\u6309\u56de\u8c03\u4e0d\u4f1a\u518d\u540c\u65f6\u89e6\u53d1</li> <li>fix: \u4fee\u590d View \u7248\u672c\u53cc\u51fb\u4e8b\u4ef6\u548c\u957f\u6309\u4e8b\u4ef6\u4ee5\u53ca\u53cc\u6307\u7f29\u653e\u4e8b\u4ef6\u4f1a\u540c\u65f6\u89e6\u53d1\u7684 bug</li> <li>fix: \u4fee\u590d Compose \u7248\u7684\u7ec4\u4ef6\u5728 Pager \u4e2d\u653e\u5927\u5e76\u4e14\u5728\u8fb9\u7f18\u4f4d\u7f6e\u89e6\u53d1 Pager \u7684\u6ed1\u52a8\u540e\u5f80\u56de\u6ed1\u52a8\u4f1a\u6253\u65ad Pager   \u7684\u6ed1\u52a8\u7684 bug</li> <li>change: \u5355\u6307\u7f29\u653e\u624b\u52bf\u6539\u4e3a\u53cc\u51fb\u540e\u4e0a\u4e0b\u62d6\u52a8\uff0c\u5e76\u4e14\u73b0\u5728\u9ed8\u8ba4\u5f00\u542f</li> <li>change: OnViewTapListener \u548c OnViewLongPressListener \u7684 x, y \u53c2\u6570\u5408\u5e76\u6210\u4e00\u4e2a OffsetCompat</li> <li>improve: \u6539\u8fdb calculateTiles() \u51fd\u6570\uff0c\u73b0\u5728\u6700\u540e\u4e00\u683c\u7684 right \u548c bottom \u59cb\u7ec8\u662f <code>width-1</code> \u548c <code>height -1</code></li> <li>improve: \u6539\u8fdb\u624b\u52bf</li> </ul> <p>subsampling:</p> <ul> <li>fix: \u4fee\u590d\u684c\u9762\u5e73\u53f0\u4e0a\u56fe\u5757\u4e4b\u95f4\u5b58\u5728\u95f4\u9699\u7684 bug</li> </ul>"},{"location":"zh/CHANGELOG/#100-beta06","title":"1.0.0-beta06","text":"<p>zoom:</p> <ul> <li>fix: \u4fee\u590d View \u7248\u672c\u521d\u59cb\u65f6\u80fd\u770b\u5230\u56fe\u50cf\u4ece\u9876\u90e8\u5feb\u901f\u79fb\u5230\u4e2d\u95f4\u7684\u8fc7\u7a0b</li> <li>fix: \u4fee\u590d Compose \u7248\u672c\u521d\u59cb\u65f6\u80fd\u770b\u5230\u56fe\u50cf\u4ece\u9876\u90e8\u5feb\u901f\u79fb\u5230\u4e2d\u95f4\u7684\u8fc7\u7a0b</li> <li>fix: \u4fee\u590d SketchZoomAsyncImage \u548c CoilZoomAsyncImage \u7ec4\u4ef6\u5728 Pager \u4e2d\u5feb\u901f\u5207\u6362\u65f6\u8fb9\u7f18\u90e8\u5206\u4f1a\u51fa\u73b0\u8be1\u5f02\u7684\u95ea\u73b0\u56fe\u7247\u5185\u5bb9\u7684   bug</li> <li>new: \u589e\u52a0 HeartbeatHapticFeedback\uff0c\u89e6\u53d1\u5355\u6307\u7f29\u653e\u65f6\u4f1a\u6709\u7c7b\u4f3c\u5fc3\u8df3\u7684\u6548\u679c</li> </ul> <p>subsampling:</p> <ul> <li>fix: \u4fee\u590d\u53cc\u51fb\u653e\u5927\u65f6\uff0c\u56e0\u4e3a\u6ca1\u6709\u53ca\u65f6\u53d6\u6d88\u672a\u5b8c\u6210\u7684\u80cc\u666f\u56fe\u5757\u5bfc\u81f4\u540c\u4e00\u4e2a\u56fe\u5757\u4f1a\u52a0\u8f7d\u591a\u6b21\u7684 bug</li> <li>fix: \u4fee\u590d View \u7248\u672c\u7684\u5b50\u91c7\u6837\u56fe\u5757\u56e0\u6ca1\u6709\u6b63\u786e\u8bbe\u7f6e\u663e\u793a\u8ba1\u6570\uff0c\u5bfc\u81f4\u5bf9\u5e94\u4f4d\u7f6e\u56fe\u50cf\u663e\u793a\u9ed1\u8272\u7684 bug</li> <li>fix: \u4fee\u590d View \u7248\u672c\u4ece\u5185\u5b58\u7f13\u5b58\u4e2d\u8bfb\u53d6\u7684\u56fe\u5757\u88ab\u610f\u5916\u7684\u4e22\u5f03\uff0c\u5bfc\u81f4\u5bf9\u5e94\u4f4d\u7f6e\u7684\u56fe\u50cf\u6a21\u7cca\u7684 bug</li> </ul> <p>other:</p> <ul> <li>change: rememberZoomImageLogger() \u51fd\u6570\u589e\u52a0 level \u548c pipeline \u53c2\u6570</li> </ul>"},{"location":"zh/CHANGELOG/#100-beta05","title":"1.0.0-beta05","text":"<p>zoom:</p> <ul> <li>fix: \u4fee\u590d\u4e86\u5728\u7528\u6237\u64cd\u4f5c\u53d8\u6362\u53c8\u6062\u590d\u5230\u521d\u59cb\u72b6\u6001\u540e\u518d\u8c03\u6574\u7a97\u53e3\u5927\u5c0f\u65f6\u5076\u5c14\u5185\u5bb9\u4e0d\u968f\u7a97\u53e3\u5927\u5c0f\u53d8\u5316\u800c\u7f29\u653e\u7684 bug</li> </ul> <p>subsampling:</p> <ul> <li>remove: \u5220\u9664 TileBitmap \u7684 size \u5c5e\u6027</li> <li>improve: \u5b50\u91c7\u6837\u56fe\u5757\u73b0\u5728\u7ed8\u5236\u5728\u5355\u72ec\u7684\u7ec4\u4ef6\u4e0a\uff0c\u907f\u514d\u4e86\u5728\u684c\u9762\u5e73\u53f0\u4e0a\u56e0\u5e73\u53f0\u7684 bug   \u5bfc\u81f4\u5185\u5bb9\u5168\u90e8\u4e22\u5931\u7684\u95ee\u9898 https://github.com/JetBrains/compose-multiplatform/issues/3904</li> <li>improve: \u964d\u4f4e\u7531\u4e8e containerSize \u53d8\u5316\u800c\u5bfc\u81f4 TileManager \u91cd\u7f6e\u7684\u9891\u7387</li> <li>new: \u684c\u9762\u5e73\u53f0\u652f\u6301\u4e8c\u6b21\u91c7\u6837</li> <li>new: \u684c\u9762\u5e73\u53f0\u652f\u6301 Exif Orientation</li> </ul>"},{"location":"zh/CHANGELOG/#100-beta04","title":"1.0.0-beta04","text":"<p>zoom:</p> <ul> <li>change: LongPressSlide \u91cd\u547d\u540d\u4e3a OneFingerScale</li> <li>improve: \u73b0\u5728\u4ec5\u5bb9\u5668\u5927\u5c0f\u53d8\u5316\u65f6\u4fdd\u6301\u5185\u5bb9\u7684\u7f29\u653e\u548c\u53ef\u89c1\u4e2d\u5fc3\u4e0d\u53d8</li> <li>new: \u652f\u6301\u7981\u7528\u624b\u52bf</li> <li>new: \u6dfb\u52a0\u4e86 Modifier.zoom() \u51fd\u6570\uff0c\u53ef\u4ee5\u8f7b\u677e\u4e3a\u5176\u4ed6\u7ec4\u4ef6\u6dfb\u52a0\u7f29\u653e\u529f\u80fd</li> </ul> <p>subsampling:</p> <ul> <li>change: \u6dfb\u52a0\u4e86 stopController \u5c5e\u6027\u66ff\u4ee3 setLifecycle() \u65b9\u6cd5</li> <li>change: \u6539\u8fdb\u4e86\u4e00\u4e9b API \u540d\u79f0</li> </ul> <p>other:</p> <ul> <li>new: \u652f\u6301 Compose \u591a\u5e73\u53f0</li> <li>change: \u79fb\u9664 rememberZoomImageLogger \u51fd\u6570\u7684 level \u53c2\u6570</li> </ul>"},{"location":"zh/CHANGELOG/#100-beta03","title":"1.0.0-beta03","text":"<p>zoom:</p> <ul> <li>fix: \u4fee\u590d\u4e86calculateUserOffsetBounds\u51fd\u6570\u5728\u7f29\u653e\u5230\u5168\u5c4f\u65f6\u53ef\u80fd\u8fd4\u56de\u9519\u8bef\u8fb9\u754c\uff0c\u5bfc\u81f4\u5d29\u6e83\u7684\u9519\u8bef</li> <li>fix: \u4fee\u590d\u4e86 GlideZoomAsyncImage \u4f1a\u52a0\u8f7d\u5927\u4e8e\u89c6\u56fe\u7684\u4f4d\u56fe\uff0c\u4ece\u800c\u5bfc\u81f4\u5d29\u6e83\u7684\u9519\u8bef</li> <li>improve: \u5347\u7ea7 GlideImage 1.0.0-beta01</li> <li>improve: NoClipImage \u7ec4\u4ef6\u91cd\u547d\u540d\u4e3a NoClipContentImage</li> </ul>"},{"location":"zh/CHANGELOG/#100-beta02","title":"1.0.0-beta02","text":"<p>zoom:</p> <p>fix: \u4fee\u590d\u4e86\u5207\u6362 Pager \u540e ZoomImage \u65e0\u6cd5\u7f29\u653e\u7684 bug new: \u652f\u6301\u5355\u6307\u7f29\u653e\u529f\u80fd</p>"},{"location":"zh/CHANGELOG/#100-beta01","title":"1.0.0-beta01","text":"<p>zoom:</p> <ul> <li>fix: \u4fee\u590d\u4e86\u53cc\u51fb\u7f29\u653e\u65f6 ZoomImageView \u6709\u65f6\u6ca1\u6709\u52a8\u753b\u7684\u9519\u8bef</li> <li>change: ZoomableEngine \u7684\u516c\u5f00\u5c5e\u6027\u73b0\u5728\u5c01\u88c5\u5728 StateFlow \u4e2d\uff0c\u53ef\u4ee5\u76f4\u63a5\u76d1\u542c</li> <li>improve: \u907f\u514d\u5728\u6700\u5c0f\u7f29\u653e\u500d\u6570\u548c\u591a\u6307\u89e6\u6478\u65f6\u89e6\u53d1 Pager \u7684\u6ed1\u52a8</li> </ul> <p>subsampling:</p> <ul> <li>fix: \u4fee\u590d\u4e86\u5b50\u91c7\u6837\u53ef\u80fd\u5931\u8d25\u7684\u9519\u8bef</li> <li>fix: tileGridSizeMap \u5c5e\u6027\u73b0\u5728\u8fd4\u56de\u6b63\u786e\u7684\u5927\u5c0f</li> <li>fix: \u4fee\u590d\u4e86 calculateTileGridMap() \u51fd\u6570\u5728\u9047\u5230\u7279\u522b\u5c0f\u7684 tileMaxSize \u65f6\u5f15\u53d1 OutOfMemoryError \u7684\u9519\u8bef</li> <li>change: SubsamplingEngine \u7684\u516c\u5f00\u5c5e\u6027\u73b0\u5728\u5c01\u88c5\u5728 StateFlow \u4e2d\uff0c\u53ef\u4ee5\u76f4\u63a5\u76d1\u542c</li> <li>change: ImageSource.openInputStream() \u65b9\u6cd5\u5220\u9664 suspend \u4fee\u9970\u7b26</li> <li>change: pauseWhenTransforming \u6539\u4e3a pausedContinuousTransformType</li> <li>improve: \u6539\u8fdb calculateImageLoadRect() \u7684\u7ed3\u679c\uff0c\u73b0\u5728\u4e0d\u4f1a\u8d85\u8fc7 imageSize</li> <li>improve: \u56fe\u5757\u5e76\u53d1\u52a0\u8f7d\u4ece 4 \u4e2a\u51cf\u5c11\u5230 2 \u4e2a\uff0c\u4ee5\u51cf\u5c11\u5185\u5b58\u5360\u7528\u5e76\u63d0\u9ad8 UI \u6027\u80fd</li> <li>new: SubsamplingState \u548c SubsamplingEngine \u6dfb\u52a0 tileGridSizeMap \u5c5e\u6027</li> <li>new: \u73b0\u5728\u5207\u6362\u91c7\u6837\u5927\u5c0f\u65f6\uff0c\u6e05\u6670\u5ea6\u4f1a\u9010\u6e10\u53d8\u5316\uff0c\u4e0d\u518d\u603b\u662f\u4ece\u5e95\u56fe\u8fc7\u6e21</li> </ul> <p>other:</p> <ul> <li>fix: \u4fee\u590d level \u5224\u65ad\u9519\u8bef\u5bfc\u81f4\u65e5\u5fd7\u4e0d\u6253\u5370\u7684 bug</li> <li>build: \u5347\u7ea7 compileSdk \u5230 34\uff0ckotlinx-coroutines \u5230 1.7.3\uff0ccompose \u5230 1.5.0</li> </ul>"},{"location":"zh/CHANGELOG/#100-alpha03","title":"1.0.0-alpha03","text":"<p>zoom:</p> <ul> <li>fix: \u4fee\u590d\u4e86\u4f7f\u7528\u4e24\u6839\u624b\u6307\u7f29\u653e\u65f6\u62ac\u8d77\u4e00\u6839\u624b\u6307\u540e ZoomImageView \u4f1a\u660e\u663e\u5e73\u79fb\u56fe\u50cf\u7684\u9519\u8bef</li> <li>fix: \u4fee\u590d rotate \u65b9\u6cd5\u9047\u5230\u8d1f\u65cb\u8f6c\u89d2\u5ea6\u5f02\u5e38\u7684 bug</li> <li>fix: \u4fee\u590d\u4e86\u52a8\u753b\u65f6\u95f4\u4e3a 0 \u65f6\u53ef\u80fd\u5d29\u6e83\u7684\u9519\u8bef</li> <li>change: ScalesCalculator \u73b0\u5728\u4e0e ReadMode \u517c\u5bb9</li> <li>change: onViewTapListener \u548c onViewLongPressListener \u66ff\u6362 registerOnViewTapListener \u548c   registerOnViewLongPressListener</li> <li>change: ZoomImageView \u7684 zoomAbility \u5c5e\u6027\u91cd\u547d\u540d\u4e3a zoomable\uff0csubsamplingAbility \u91cd\u547d\u540d\u4e3a subsampling</li> <li>improve: \u517c\u5bb9\u673a\u578b MIX4\u3001ROM\u7248 \u672c 14.0.6.0\u3001Android \u7248\u672c 13 \u73af\u5883\u4e0b\u542f\u7528\u5bfc\u822a\u680f\u4f46 App \u4e0d\u4e3b\u52a8\u9002\u914d\u5bfc\u822a\u680f\uff0c\u5c4f\u5e55\u89e3\u9501\u540e\u56e0   View \u5c3a\u5bf8\u53d8\u5316\u800c\u89e6\u53d1\u91cd\u7f6e\u7684\u95ee\u9898</li> <li>improve: ZoomImageView \u73b0\u5728\u652f\u6301 scaleType \u662f MATRIX</li> <li>new: ZoomImageView \u6dfb\u52a0 xml \u5c5e\u6027\u652f\u6301</li> </ul> <p>other:</p> <ul> <li>change: ZoomableState\u3001SubsamplingState\u3001ZoomableEngine \u548c SubsamplingEngine \u7684 logger \u53c2\u6570\u6539\u4e3a\u79c1\u6709</li> </ul>"},{"location":"zh/CHANGELOG/#100-alpha02","title":"1.0.0-alpha02","text":"<p>zoom:</p> <ul> <li>change: ZoomableState \u548c ZoomAbility \u7684 location() \u65b9\u6cd5\u91cd\u547d\u540d\u4e3a locate()</li> <li>new: ZoomImageView \u6dfb\u52a0 OnResetListener</li> </ul> <p>subsampling:</p> <ul> <li>change: SubsamplingAbility \u7684 registerOnTileChangedListener()\u3001unregisterOnTileChangedListener()   \u65b9\u6cd5\u91cd\u547d\u540d\u4e3a registerOnTileChangeListener()\u3001unregisterOnTileChangeListener()</li> <li>change: \u5b50\u91c7\u6837\u7684\u6682\u505c\u5c5e\u6027\u91cd\u547d\u540d\u4e3a\u505c\u6b62</li> <li>new: \u4e8c\u6b21\u91c7\u6837\u7684\u56fe\u5757\u652f\u6301\u52a8\u753b</li> <li>new: \u4e8c\u6b21\u91c7\u6837\u6dfb\u52a0\u4e86 pauseWhenTransforming \u5c5e\u6027</li> </ul>"},{"location":"zh/CHANGELOG/#100-alpha01","title":"1.0.0-alpha01","text":"<p>\u521d\u59cb\u53d1\u884c</p>"},{"location":"zh/click/#_1","title":"\u70b9\u51fb\u4e8b\u4ef6","text":"<p>\u7ffb\u8bd1\uff1aEnglish</p> <p>[!TIP] * \u4ee5\u4e0b\u793a\u4f8b\u4f18\u5148\u7528 Compose \u7248\u672c\u7684\u7ec4\u4ef6\u6765\u6f14\u793a * ZoomState.zoomable \u7b49\u4ef7\u4e8e ZoomImageView.zoomable * ZoomState.subsampling \u7b49\u4ef7\u4e8e ZoomImageView.subsampling</p> <p>ZoomImage \u9700\u8981\u63a5\u6536\u53cc\u51fb\u4e8b\u4ef6\uff0c\u6240\u4ee5\u4e0d\u5f97\u5df2\u4e5f\u62e6\u622a\u4e86\u5355\u51fb\u548c\u957f\u6309\u4e8b\u4ef6\uff0c\u4f60\u53ef\u4ee5\u901a\u8fc7\u63d0\u4f9b\u7684\u63a5\u53e3\u6765\u63a5\u6536\u8fd9\u4e24\u4e2a\u4e8b\u4ef6</p>"},{"location":"zh/click/#_2","title":"\u793a\u4f8b","text":"<p>compose\uff1a</p> <pre><code>SketchZoomAsyncImage(\n    uri = \"https://sample.com/sample.jpeg\",\n    contentDescription = \"view image\",\n    modifier = Modifier.fillMaxSize(),\n    onTap = { touch: Offset -&gt;\n        // \u5355\u51fb\u4e8b\u4ef6\n    },\n    onLongPress = { touch: Offset -&gt;\n        // \u957f\u6309\u4e8b\u4ef6        \n    },\n)\n</code></pre> <p>view\uff1a</p> <p>View \u7684 setOnClickListener \u548c setOnLongClickListener \u65b9\u6cd5\u4f9d\u7136\u53ef\u4ee5\u4f7f\u7528\uff0c\u989d\u5916\u63d0\u4f9b\u4e86\u5e26\u89e6\u6478\u4f4d\u7f6e\u7684 OnViewTapListener \u548c OnViewLongPressListener \u63a5\u53e3</p> <pre><code>val sketchZoomImageView = SketchZoomImageView(context)\n\nsketchZoomImageView.onViewTapListener = { view: android.view.View, x: Float, y: Float -&gt;\n    // \u5355\u51fb\u4e8b\u4ef6\n}\n\nsketchZoomImageView.onViewLongPressListener = { view: android.view.View, x: Float, y: Float -&gt;\n    // \u957f\u6309\u4e8b\u4ef6        \n}\n</code></pre>"},{"location":"zh/getting_started/#get-started","title":"Get Started/\u5f00\u59cb\u4f7f\u7528","text":"<p>\u7ffb\u8bd1\uff1aEnglish</p>"},{"location":"zh/getting_started/#_1","title":"\u7ec4\u4ef6","text":"<p>ZoomImage \u5e93\u5305\u542b\u4e86\u591a\u4e2a\u7ec4\u4ef6\u53ef\u4f9b\u9009\u62e9\uff0c\u4f60\u53ef\u4ee5\u6839\u636e\u81ea\u5df1\u7684\u9700\u6c42\u9009\u62e9\u5408\u9002\u7684\u7ec4\u4ef6\u3002</p> <p>Compose multiplatform\uff1a</p> <ul> <li>SketchZoomAsyncImage\uff1a\u96c6\u6210\u4e86 Sketch   \u56fe\u7247\u52a0\u8f7d\u5e93\uff0c\u652f\u6301\u7f51\u7edc\u56fe\u7247\u548c\u5b50\u91c7\u6837\u3002\u793a\u4f8b\uff1aSketchZoomAsyncImageSample\u3002<code>\u63a8\u8350\u4f7f\u7528</code></li> <li>CoilZoomAsyncImage\uff1a\u96c6\u6210\u4e86 Coil   \u56fe\u7247\u52a0\u8f7d\u5e93\uff0c\u652f\u6301\u7f51\u7edc\u56fe\u7247\u548c\u5b50\u91c7\u6837\u3002\u793a\u4f8b\uff1aCoilZoomAsyncImageSample</li> <li>ZoomImage   \uff1a\u57fa\u7840\u7684\u7f29\u653e\u7ec4\u4ef6\uff0c\u672a\u96c6\u6210\u56fe\u7247\u52a0\u8f7d\u5e93\uff0c\u4e0d\u652f\u6301\u7f51\u7edc\u56fe\u7247\uff0c\u9700\u8981\u8c03\u7528 <code>subsampling.setImageResource()</code>   \u65b9\u6cd5\u4ee5\u652f\u6301\u5b50\u91c7\u6837\u3002\u793a\u4f8b\uff1aZoomImageSample</li> </ul> <p>Only android compose\uff1a</p> <ul> <li>GlideZoomAsyncImage\uff1a\u96c6\u6210\u4e86 Glide   \u56fe\u7247\u52a0\u8f7d\u5e93\uff0c\u652f\u6301\u7f51\u7edc\u56fe\u7247\u548c\u5b50\u91c7\u6837\u3002\u793a\u4f8b\uff1aGlideZoomAsyncImageSample</li> </ul> <p>Android view\uff1a</p> <ul> <li>SketchZoomImageView\uff1a\u96c6\u6210\u4e86 Sketch   \u56fe\u7247\u52a0\u8f7d\u5e93\uff0c\u652f\u6301\u7f51\u7edc\u56fe\u7247\u548c\u5b50\u91c7\u6837\u3002\u793a\u4f8b\uff1aSketchZoomImageViewFragment\u3002<code>\u63a8\u8350\u4f7f\u7528</code></li> <li>CoilZoomImageView\uff1a\u96c6\u6210\u4e86 Coil   \u56fe\u7247\u52a0\u8f7d\u5e93\uff0c\u652f\u6301\u7f51\u7edc\u56fe\u7247\u548c\u5b50\u91c7\u6837\u3002\u793a\u4f8b\uff1aCoilZoomImageViewFragment</li> <li>GlideZoomImageView\uff1a\u96c6\u6210\u4e86 Glide   \u56fe\u7247\u52a0\u8f7d\u5e93\uff0c\u652f\u6301\u7f51\u7edc\u56fe\u7247\u548c\u5b50\u91c7\u6837\u3002\u793a\u4f8b\uff1aGlideZoomImageViewFragment</li> <li>PicassoZoomImageView\uff1a\u96c6\u6210\u4e86 Picasso   \u56fe\u7247\u52a0\u8f7d\u5e93\uff0c\u652f\u6301\u7f51\u7edc\u56fe\u7247\u548c\u5b50\u91c7\u6837\u3002\u793a\u4f8b\uff1aPicassoZoomImageViewFragment</li> <li>ZoomImageView   \uff1a\u57fa\u7840\u7684\u7f29\u653e\u7ec4\u4ef6\uff0c\u672a\u96c6\u6210\u56fe\u7247\u52a0\u8f7d\u5e93\uff0c\u4e0d\u652f\u6301\u7f51\u7edc\u56fe\u7247\uff0c\u9700\u8981\u8c03\u7528 <code>subsampling.setImageResource()</code>   \u65b9\u6cd5\u4ee5\u652f\u6301\u5b50\u91c7\u6837\u3002\u793a\u4f8b\uff1aZoomImageViewFragment</li> </ul> <p>[!TIP] * \u4e0d\u540c\u7684\u7ec4\u4ef6\u9700\u8981\u5bfc\u5165\u4e0d\u540c\u7684\u4f9d\u8d56\uff0c\u8bf7\u53c2\u8003 README \u5bfc\u5165\u5bf9\u5e94\u7684\u4f9d\u8d56 * \u96c6\u6210\u4e86\u56fe\u7247\u52a0\u8f7d\u5668\u7684\u7ec4\u4ef6\u65e0\u9700\u4efb\u4f55\u989d\u5916\u7684\u5de5\u4f5c\u5373\u53ef\u652f\u6301\u4efb\u610f\u6765\u6e90\u7684\u56fe\u7247\u548c\u5b50\u91c7\u6837\u529f\u80fd * \u672a\u96c6\u6210\u56fe\u7247\u52a0\u8f7d\u5668\u7684\u7ec4\u4ef6\u53ea\u80fd\u663e\u793a\u672c\u5730\u56fe\u7247\uff0c\u4ee5\u53ca\u9700\u8981\u989d\u5916\u8c03\u7528 <code>setSubsamplingImage()</code> \u65b9\u6cd5\u4ee5\u652f\u6301\u5b50\u91c7\u6837\u529f\u80fd</p>"},{"location":"zh/getting_started/#_2","title":"\u793a\u4f8b","text":"<p>Compose multiplatform\uff1a</p> <pre><code>// \u4f7f\u7528\u57fa\u7840\u7684 ZoomImage \u7ec4\u4ef6\nval zoomState: ZoomState by rememberZoomState()\nval imageSource = remember {\n    val resUri = Res.getUri(\"files/huge_world.jpeg\")\n    ImageSource.fromComposeResource(resUri)\n}\nzoomState.setSubsamplingImage(imageSource)\nZoomImage(\n    painter = painterResource(Res.drawable.huge_world_thumbnail),\n    contentDescription = \"view image\",\n    modifier = Modifier.fillMaxSize(),\n    zoomState = zoomState,\n)\n\n// \u4f7f\u7528 SketchZoomAsyncImage \u7ec4\u4ef6\nSketchZoomAsyncImage(\n    uri = \"https://sample.com/sample.jpeg\",\n    contentDescription = \"view image\",\n    modifier = Modifier.fillMaxSize(),\n)\n\n// \u4f7f\u7528 CoilZoomAsyncImage \u7ec4\u4ef6\nCoilZoomAsyncImage(\n    model = \"https://sample.com/sample.jpeg\",\n    contentDescription = \"view image\",\n    modifier = Modifier.fillMaxSize(),\n)\n</code></pre> <p>Only android compose\uff1a</p> <pre><code>// \u4f7f\u7528 GlideZoomAsyncImage \u7ec4\u4ef6\nGlideZoomAsyncImage(\n    model = \"https://sample.com/sample.jpeg\",\n    contentDescription = \"view image\",\n    modifier = Modifier.fillMaxSize(),\n)\n</code></pre> <p>Android view\uff1a</p> <pre><code>// \u4f7f\u7528\u57fa\u7840\u7684 ZoomImageImage \u7ec4\u4ef6\nval zoomImageView = ZoomImageView(context)\nzoomImageView.setImageResource(R.drawable.huge_world_thumbnail)\nval imageSource = ImageSource.fromResource(context, R.raw.huge_world)\nzoomImageView.setSubsamplingImage(imageSource)\n\n// \u4f7f\u7528 SketchZoomImageView \u7ec4\u4ef6\nval sketchZoomImageView = SketchZoomImageView(context)\nsketchZoomImageView.loadImage(\"https://sample.com/sample.jpeg\")\n\n// \u4f7f\u7528 CoilZoomImageView \u7ec4\u4ef6\nval coilZoomImageView = CoilZoomImageView(context)\ncoilZoomImageView.load(\"https://sample.com/sample.jpeg\")\n\n// \u4f7f\u7528 GlideZoomImageView \u7ec4\u4ef6\nval glideZoomImageView = GlideZoomImageView(context)\nGlide.with(this@GlideZoomImageViewFragment)\n    .load(\"https://sample.com/sample.jpeg\")\n    .into(glideZoomImageView)\n\n// \u4f7f\u7528 PicassoZoomImageView \u7ec4\u4ef6\nval picassoZoomImageView = PicassoZoomImageView(context)\npicassoZoomImageViewImage.loadImage(\"https://sample.com/sample.jpeg\")\n</code></pre> <p>[!TIP] * PicassoZoomImageView \u63d0\u4f9b\u4e86\u4e00\u7ec4\u4e13\u7528 API \u6765\u76d1\u542c\u52a0\u8f7d\u7ed3\u679c\u5e76\u83b7\u53d6 URI\uff0c\u4ee5\u4fbf\u652f\u6301\u5b50\u91c7\u6837\uff0c\u56e0\u6b64\u8bf7\u4e0d\u8981\u76f4\u63a5\u4f7f\u7528\u5b98\u65b9API     \u52a0\u8f7d\u56fe\u7247 * \u5404\u4e2a\u7ec4\u4ef6\u56fe\u7247\u52a0\u8f7d\u76f8\u5173\u7684\u66f4\u591a\u4f7f\u7528\u65b9\u6cd5\u8bf7\u53c2\u8003\u5176\u539f\u672c\u7ec4\u4ef6\u7684\u7528\u6cd5</p>"},{"location":"zh/getting_started/#_3","title":"\u7f29\u653e\u548c\u5b50\u91c7\u6837","text":"<p>\u7f29\u653e\u548c\u5b50\u91c7\u6837\u7684 API \u5c01\u88c5\u5728\u4e0d\u540c\u7684\u7c7b\u4e2d\uff0c\u4f60\u53ef\u4ee5\u76f4\u63a5\u901a\u8fc7\u5b83\u4eec\u53bb\u63a7\u5236\u7f29\u653e\u548c\u5b50\u91c7\u6837\u6216\u83b7\u53d6\u76f8\u5173\u4fe1\u606f\uff0c\u5982\u4e0b\uff1a</p> <ul> <li>compose \u7248\u672c\u662f ZoomableState \u548c SubsamplingState</li> <li>view \u7248\u672c\u662f ZoomableEngine \u548c SubsamplingEngine</li> </ul> <p>\u793a\u4f8b\uff1a</p> <pre><code>// compose\nval zoomState: ZoomState by rememberSketchZoomState()\nSketchZoomAsyncImage(\n    uri = \"https://sample.com/sample.jpeg\",\n    contentDescription = \"view image\",\n    modifier = Modifier.fillMaxSize(),\n    zoomState = zoomState,\n)\nval zoomable: ZoomableState = zoomState.zoomable\nval subsampling: SubsamplingState = zoomState.subsampling\n\n// view\nval sketchZoomImageView = SketchZoomImageView(context)\nval zoomable: ZoomableEngine = sketchZoomImageView.zoomable\nval subsampling: SubsamplingEngine = sketchZoomImageView.subsampling\n</code></pre>"},{"location":"zh/getting_started/#_4","title":"\u53ef\u8bbf\u95ee\u5c5e\u6027\u548c\u65b9\u6cd5","text":"<p>[!TIP] \u6ce8\u610f\uff1aview \u7248\u672c\u7684\u76f8\u5173\u5c5e\u6027\u7528 StateFlow \u5305\u88c5\uff0c\u6240\u4ee5\u5176\u540d\u5b57\u76f8\u6bd4 compose \u7248\u672c\u90fd\u4ee5 State \u4e3a\u540e\u7f00 \u53ef\u4ee5\u8bfb\u53d6\u4e5f\u53ef\u4ee5\u8bbe\u7f6e\u7684\u5c5e\u6027:</p> <ul> <li><code>zoomable.contentScale: ContentScale</code>: content \u7684\u7f29\u653e\u65b9\u5f0f\uff0c\u9ed8\u8ba4\u662f ContentScale.Fit</li> <li><code>zoomable.alignment: Alignment</code>: content \u5728 container \u4e2d\u7684\u5bf9\u9f50\u65b9\u5f0f\uff0c\u9ed8\u8ba4\u662f Alignment.TopStart</li> <li><code>zoomable.layoutDirection: LayoutDirection</code>: container \u7684\u5e03\u5c40\u65b9\u5411\uff0c\u9ed8\u8ba4\u662f LayoutDirection.Ltr</li> <li><code>zoomable.readMode: ReadMode?</code>: \u9605\u8bfb\u6a21\u5f0f\u914d\u7f6e\uff0c\u9ed8\u8ba4\u662f null</li> <li><code>zoomable.scalesCalculator: ScalesCalculator</code>: minScale\u3001mediumScale \u548c maxScale \u8ba1\u7b97\u5668\uff0c\u9ed8\u8ba4\u662f   ScalesCalculator.Dynamic</li> <li><code>zoomable.threeStepScale: Boolean</code>: \u53cc\u51fb\u7f29\u653e\u65f6\u662f\u5426\u5728 minScale\u3001mediumScale \u548c maxScale \u4e4b\u95f4\u5faa\u73af\u7f29\u653e\uff0c\u9ed8\u8ba4\u662f   false</li> <li><code>zoomable.rubberBandScale: Boolean</code>: \u662f\u5426\u5f00\u542f\u6a61\u76ae\u7b4b\u6548\u679c\uff0c\u9ed8\u8ba4\u662f true</li> <li><code>zoomable.oneFingerScaleSpec: OneFingerScaleSpec</code>: \u5355\u6307\u7f29\u653e\u914d\u7f6e\uff0c\u9ed8\u8ba4\u662f OneFingerScaleSpec.Default</li> <li><code>zoomable.animationSpec: ZoomAnimationSpec</code>: \u7f29\u653e\u3001\u504f\u79fb\u7b49\u52a8\u753b\u914d\u7f6e\uff0c\u9ed8\u8ba4\u662f ZoomAnimationSpec.Default</li> <li><code>zoomable.limitOffsetWithinBaseVisibleRect: Boolean</code>: \u662f\u5426\u5c06\u504f\u79fb\u9650\u5236\u5728 contentBaseVisibleRect   \u5185\uff0c\u9ed8\u8ba4\u662f false</li> <li><code>zoomable.containerWhitespaceMultiple: Float</code>: \u57fa\u4e8e\u5bb9\u5668\u5c3a\u5bf8\u7684\u500d\u6570\u4e3a\u5bb9\u5668\u56db\u5468\u6dfb\u52a0\u7a7a\u767d\u533a\u57df\uff0c\u9ed8\u8ba4\u662f 0f</li> <li><code>zoomable.containerWhitespace: ContainerWhitespace</code>: \u5bb9\u5668\u56db\u5468\u7a7a\u767d\u533a\u57df\u7684\u914d\u7f6e\uff0c\u4f18\u5148\u7ea7\u9ad8\u4e8e   containerWhitespaceMultiple\uff0c\u9ed8\u8ba4\u662f ContainerWhitespace.Zero</li> <li><code>zoomable.keepTransformWhenSameAspectRatioContentSizeChanged: Boolean</code>: \u662f\u5426\u5728\u76f8\u540c\u5bbd\u9ad8\u6bd4\u7684   contentSize \u6539\u53d8\u65f6\u4fdd\u6301 transform \u4e0d\u53d8\uff0c\u9ed8\u8ba4\u662f false</li> <li><code>zoomable.disabledGestureTypes: Int</code>: \u914d\u7f6e\u7981\u7528\u7684\u624b\u52bf\u7c7b\u578b\uff0c\u9ed8\u8ba4\u662f 0\uff08\u4e0d\u7981\u7528\u4efb\u4f55\u624b\u52bf\uff09\uff0c\u53ef\u4ee5\u4f7f\u7528   GestureType \u7684\u4f4d\u6216\u64cd\u4f5c\u6765\u7ec4\u5408\u591a\u4e2a\u624b\u52bf\u7c7b\u578b</li> <li><code>zoomable.reverseMouseWheelScale: Boolean</code>: \u662f\u5426\u53cd\u8f6c\u9f20\u6807\u6eda\u8f6e\u7684\u65b9\u5411\uff0c\u9ed8\u8ba4\u662f false</li> <li><code>zoomable.mouseWheelScaleCalculator: MouseWheelScaleCalculator</code>: \u9f20\u6807\u6eda\u8f6e\u7f29\u653e\u8ba1\u7b97\u5668\uff0c\u9ed8\u8ba4\u662f   MouseWheelScaleCalculator.Default</li> <li><code>subsampling.disabled: Boolean</code>: \u662f\u5426\u7981\u7528\u5b50\u91c7\u6837\u529f\u80fd</li> <li><code>subsampling.tileImageCache: TileImageCache?</code>: Tile \u56fe\u5757\u7684\u5185\u5b58\u7f13\u5b58\uff0c\u9ed8\u8ba4\u4e3a null\uff0c\u96c6\u6210\u56fe\u7247\u52a0\u8f7d\u5668\u7684\u7ec4\u4ef6\u4f1a\u81ea\u52a8\u8bbe\u7f6e\u5b83</li> <li><code>subsampling.disabledTileImageCache: Boolean</code>: \u662f\u5426\u7981\u7528 Tile \u56fe\u5757\u7684\u5185\u5b58\u7f13\u5b58\uff0c\u9ed8\u8ba4\u4e3a false</li> <li><code>subsampling.tileAnimationSpec: TileAnimationSpec</code>: \u56fe\u5757\u52a8\u753b\u7684\u914d\u7f6e\uff0c\u9ed8\u8ba4\u4e3a   TileAnimationSpec.Default</li> <li><code>subsampling.pausedContinuousTransformTypes: Int</code>: \u6682\u505c\u52a0\u8f7d\u56fe\u5757\u7684\u8fde\u7eed\u53d8\u6362\u7c7b\u578b\u7684\u914d\u7f6e\uff0c\u53ef\u4ee5\u901a\u8fc7\u4f4d\u6216\u8fd0\u7b97\u7b26\u7ec4\u5408\u591a\u4e2a\u7c7b\u578b\uff0c\u9ed8\u8ba4\u4e3a   TileManager.DefaultPausedContinuousTransformType</li> <li><code>subsampling.disabledBackgroundTiles: Boolean</code>: \u662f\u5426\u7981\u7528\u80cc\u666f\u56fe\u5757\uff0c\u9ed8\u8ba4\u4e3a false</li> <li><code>subsampling.stopped: Boolean</code>: \u662f\u5426\u505c\u6b62\u52a0\u8f7d\u56fe\u5757\uff0c\u9ed8\u8ba4\u4e3a false</li> <li><code>subsampling.disabledAutoStopWithLifecycle: Boolean</code>: \u662f\u5426\u7981\u7528\u6839\u636e Lifecycle \u81ea\u52a8\u505c\u6b62\u52a0\u8f7d\u56fe\u5757\uff0c\u9ed8\u8ba4\u4e3a   false</li> <li><code>subsampling.regionDecoders: List&lt;RegionDecoder.Factory&gt;</code>: \u6dfb\u52a0\u81ea\u5b9a\u4e49\u7684 RegionDecoder\uff0c\u9ed8\u8ba4\u4e3a\u7a7a\u5217\u8868</li> <li><code>subsampling.showTileBounds: Boolean</code>: \u662f\u5426\u663e\u793a Tile \u7684\u8fb9\u754c\uff0c\u9ed8\u8ba4\u4e3a false</li> </ul> <p>\u53ea\u80fd\u8bfb\u53d6\u7684\u5c5e\u6027\uff1a</p> <ul> <li><code>zoomable.containerSize: IntSize</code>: \u5f53\u524d container \u7684\u5927\u5c0f</li> <li><code>zoomable.contentSize: IntSize</code>: \u5f53\u524d content \u7684\u5927\u5c0f</li> <li><code>zoomable.contentOriginSize: IntSize</code>: \u5f53\u524d content \u7684\u539f\u59cb\u5927\u5c0f</li> <li><code>zoomable.transform.scale: ScaleFactor</code>: \u5f53\u524d\u7f29\u653e\u6bd4\u4f8b\uff08baseTransform.scale * userTransform.scale\uff09</li> <li><code>zoomable.baseTransform.scale: ScaleFactor</code>: \u5f53\u524d\u57fa\u7840\u7f29\u653e\u6bd4\u4f8b\uff0c\u53d7 contentScale \u548c alignment \u53c2\u6570\u5f71\u54cd</li> <li><code>zoomable.userTransform.scale: ScaleFactor</code>: \u5f53\u524d\u7528\u6237\u7f29\u653e\u6bd4\u4f8b\uff0c\u53d7 scale()\u3001locate() \u4ee5\u53ca\u7528\u6237\u624b\u52bf\u7f29\u653e\u3001\u53cc\u51fb\u7b49\u64cd\u4f5c\u5f71\u54cd</li> <li><code>zoomable.minScale: Float</code>: \u6700\u5c0f\u7f29\u653e\u6bd4\u4f8b\uff0c\u7528\u4e8e\u7f29\u653e\u65f6\u9650\u5236\u6700\u5c0f\u7f29\u653e\u6bd4\u4f8b\u4ee5\u53ca\u53cc\u51fb\u7f29\u653e\u65f6\u7684\u4e00\u4e2a\u5faa\u73af\u7f29\u653e\u6bd4\u4f8b</li> <li><code>zoomable.mediumScale: Float</code>: \u4e2d\u95f4\u7f29\u653e\u6bd4\u4f8b\uff0c\u7528\u4e8e\u53cc\u51fb\u7f29\u653e\u65f6\u7684\u4e00\u4e2a\u5faa\u73af\u7f29\u653e\u6bd4\u4f8b</li> <li><code>zoomable.maxScale: Float</code>: \u6700\u5927\u7f29\u653e\u6bd4\u4f8b\uff0c\u7528\u4e8e\u7f29\u653e\u65f6\u9650\u5236\u6700\u5927\u7f29\u653e\u6bd4\u4f8b\u4ee5\u53ca\u53cc\u51fb\u7f29\u653e\u65f6\u7684\u4e00\u4e2a\u5faa\u73af\u7f29\u653e\u6bd4\u4f8b</li> <li><code>zoomable.continuousTransformType: Int</code>: \u5f53\u524d\u6b63\u5728\u8fdb\u884c\u7684\u8fde\u7eed\u53d8\u6362\u7684\u7c7b\u578b</li> <li><code>zoomable.contentBaseDisplayRectF: Rect</code>: content \u7ecf\u8fc7 baseTransform \u53d8\u6362\u540e\u5728 container \u4e2d\u7684\u533a\u57df</li> <li><code>zoomable.contentBaseDisplayRect: IntRect</code>: content \u7ecf\u8fc7 baseTransform \u53d8\u6362\u540e\u5728 container \u4e2d\u7684\u533a\u57df</li> <li><code>zoomable.contentBaseVisibleRectF: Rect</code>: content \u7ecf\u8fc7 baseTransform \u53d8\u6362\u540e\u81ea\u8eab\u5bf9\u7528\u6237\u53ef\u89c1\u7684\u533a\u57df</li> <li><code>zoomable.contentBaseVisibleRect: IntRect</code>: content \u7ecf\u8fc7 baseTransform \u53d8\u6362\u540e\u81ea\u8eab\u5bf9\u7528\u6237\u53ef\u89c1\u7684\u533a\u57df</li> <li><code>zoomable.contentDisplayRectF: Rect</code>: content \u7ecf\u8fc7 transform \u53d8\u6362\u540e\u5728 container \u4e2d\u7684\u533a\u57df</li> <li><code>zoomable.contentDisplayRect: IntRect</code>: content \u7ecf\u8fc7 transform \u53d8\u6362\u540e\u5728 container \u4e2d\u7684\u533a\u57df</li> <li><code>zoomable.contentVisibleRectF: Rect</code>: content \u7ecf\u8fc7 transform \u53d8\u6362\u540e\u81ea\u8eab\u5bf9\u7528\u6237\u53ef\u89c1\u7684\u533a\u57df</li> <li><code>zoomable.contentVisibleRect: IntRect</code>: content \u7ecf\u8fc7 transform \u53d8\u6362\u540e\u81ea\u8eab\u5bf9\u7528\u6237\u53ef\u89c1\u7684\u533a\u57df</li> <li><code>zoomable.sourceScaleFactor: ScaleFactor</code>: \u4ee5\u539f\u56fe\u4e3a\u57fa\u51c6\u7684\u7f29\u653e\u6bd4\u4f8b</li> <li><code>zoomable.sourceVisibleRectF: Rect</code>: contentVisibleRect \u6620\u5c04\u5230\u539f\u56fe\u4e0a\u7684\u533a\u57df</li> <li><code>zoomable.sourceVisibleRect: IntRect</code>: contentVisibleRect \u6620\u5c04\u5230\u539f\u56fe\u4e0a\u7684\u533a\u57df</li> <li><code>zoomable.scrollEdge: ScrollEdge</code>: \u5f53\u524d\u504f\u79fb\u7684\u8fb9\u754c\u72b6\u6001</li> <li><code>subsampling.ready: Boolean</code>: \u662f\u5426\u5df2\u7ecf\u51c6\u5907\u597d\u4e86</li> <li><code>subsampling.imageInfo: ImageInfo</code>: \u56fe\u7247\u7684\u5c3a\u5bf8\u3001\u683c\u5f0f\u4fe1\u606f</li> <li><code>subsampling.tileGridSizeMap: Map&lt;Int, IntOffset&gt;</code>: \u78c1\u8d34\u7f51\u683c\u5927\u5c0f\u6620\u5c04\u8868</li> <li><code>subsampling.sampleSize: Int</code>: \u5f53\u524d\u91c7\u6837\u5927\u5c0f</li> <li><code>subsampling.imageLoadRect: IntRect</code>: \u539f\u56fe\u4e0a\u5f53\u524d\u5b9e\u9645\u52a0\u8f7d\u7684\u533a\u57df</li> <li><code>subsampling.foregroundTiles: List&lt;TileSnapshot&gt;</code>: \u5f53\u524d\u524d\u666f\u56fe\u5757\u5217\u8868</li> <li><code>subsampling.backgroundTiles: List&lt;TileSnapshot&gt;</code>: \u5f53\u524d\u80cc\u666f\u56fe\u5757\u5217\u8868</li> </ul> <p>\u53ef\u4ea4\u4e92\u7684\u65b9\u6cd5\uff1a</p> <ul> <li><code>zoomable.scale()</code>: \u7f29\u653e content \u5230\u6307\u5b9a\u7684\u500d\u6570</li> <li><code>zoomable.scaleBy()</code>: \u4ee5\u4e58\u6cd5\u7684\u65b9\u5f0f\u589e\u91cf\u7f29\u653e content \u6307\u5b9a\u7684\u500d\u6570</li> <li><code>zoomable.scaleByPlus()</code>: \u4ee5\u52a0\u6cd5\u7684\u65b9\u5f0f\u589e\u91cf\u7f29\u653e content \u6307\u5b9a\u7684\u500d\u6570</li> <li><code>zoomable.switchScale()</code>: \u5207\u6362 content \u7684\u7f29\u653e\u500d\u6570\uff0c\u9ed8\u8ba4\u5728 minScale \u548c mediumScale \u4e4b\u95f4\u5faa\u73af\uff0c \u5982\u679c   threeStepScale \u4e3a true \u5219\u5728 minScale\u3001mediumScale \u548c maxScale \u4e4b\u95f4\u5faa\u73af</li> <li><code>zoomable.offset()</code>: \u504f\u79fb content \u5230\u6307\u5b9a\u7684\u4f4d\u7f6e</li> <li><code>zoomable.offsetBy()</code>: \u4ee5\u589e\u91cf\u7684\u65b9\u5f0f\u504f\u79fb content \u6307\u5b9a\u7684\u504f\u79fb\u91cf</li> <li><code>zoomable.locate()</code>: \u5b9a\u4f4d\u5230 content \u4e0a\u7684\u6307\u5b9a\u4f4d\u7f6e\uff0c\u4e5f\u53ef\u4ee5\u7528\u65f6\u7f29\u653e\u5230\u6307\u5b9a\u500d\u6570</li> <li><code>zoomable.rotate()</code>: \u65cb\u8f6c content \u5230\u6307\u5b9a\u7684\u89d2\u5ea6\uff0c\u89d2\u5ea6\u53ea\u80fd\u662f 90 \u7684\u500d\u6570</li> <li><code>zoomable.rotateBy()</code>: \u4ee5\u589e\u91cf\u7684\u65b9\u5f0f\u65cb\u8f6c content \u6307\u5b9a\u7684\u89d2\u5ea6\uff0c\u89d2\u5ea6\u53ea\u80fd\u662f 90 \u7684\u500d\u6570</li> <li><code>zoomable.getNextStepScale(): Float</code>: \u83b7\u53d6\u4e0b\u4e00\u4e2a\u7f29\u653e\u500d\u6570\uff0c\u9ed8\u8ba4\u5728 minScale \u548c mediumScale \u4e4b\u95f4\u5faa\u73af\uff0c   \u5982\u679c threeStepScale \u4e3a true \u5219\u5728 minScale\u3001mediumScale \u548c maxScale \u4e4b\u95f4\u5faa\u73af</li> <li><code>zoomable.touchPointToContentPoint(): IntOffset</code>: \u5c06\u89e6\u6478\u70b9\u8f6c\u6362\u4e3a content \u4e0a\u7684\u70b9\uff0c\u539f\u70b9\u662f content   \u7684\u5de6\u4e0a\u89d2</li> <li><code>zoomable.touchPointToContentPointF(): Offset</code>: \u5c06\u89e6\u6478\u70b9\u8f6c\u6362\u4e3a content \u4e0a\u7684\u70b9\uff0c\u539f\u70b9\u662f content \u7684\u5de6\u4e0a\u89d2</li> <li><code>zoomable.sourceToDraw(Offset): Offset</code>: \u5c06\u539f\u56fe\u4e0a\u7684\u70b9\u8f6c\u6362\u4e3a\u7ed8\u5236\u65f6\u7684\u70b9\uff0c\u539f\u70b9\u662f container \u7684\u5de6\u4e0a\u89d2</li> <li><code>zoomable.sourceToDraw(Rect): Rect</code>: \u5c06\u539f\u56fe\u4e0a\u7684\u77e9\u5f62\u8f6c\u6362\u4e3a\u7ed8\u5236\u65f6\u7684\u77e9\u5f62\uff0c\u539f\u70b9\u662f container \u7684\u5de6\u4e0a\u89d2</li> <li><code>zoomable.canScroll(): Boolean</code>: \u5224\u65ad\u5f53\u524d content \u5728\u6307\u5b9a\u65b9\u5411\u4e0a\u662f\u5426\u53ef\u4ee5\u6eda\u52a8</li> <li><code>subsampling.setImage(): Boolean</code>: \u8bbe\u7f6e\u5b50\u91c7\u6837\u56fe\u7247\uff0c\u8fd4\u56de\u662f\u5426\u6210\u529f\uff0c\u96c6\u6210\u56fe\u7247\u52a0\u8f7d\u5668\u7684\u7ec4\u4ef6\u4f1a\u81ea\u52a8\u8bbe\u7f6e\u8bbe\u7f6e\u5b50\u91c7\u6837\u56fe\u7247</li> </ul>"},{"location":"zh/getting_started/#_5","title":"\u76d1\u542c\u5c5e\u6027\u53d8\u5316","text":"<ul> <li>compose \u7248\u672c\u7684\u76f8\u5173\u5c5e\u6027\u662f\u7528 State \u5305\u88c5\u7684\uff0c\u5728 Composable \u51fd\u6570\u4e2d\u76f4\u63a5\u8bfb\u53d6\u5b83\u5373\u53ef\u5b9e\u73b0\u76d1\u542c</li> <li>view \u7684\u76f8\u5173\u5c5e\u6027\u662f\u7528 StateFlow \u5305\u88c5\uff0c\u8c03\u7528\u5176 collect \u51fd\u6570\u5373\u53ef\u5b9e\u73b0\u76d1\u542c</li> </ul> <p>[!TIP] \u66f4\u591a\u7f29\u653e\u3001\u504f\u79fb\u3001\u65cb\u8f6c\u3001\u5b50\u91c7\u6837\u3001\u9605\u8bfb\u6a21\u5f0f\u3001\u6eda\u52a8\u6761\u7b49\u529f\u80fd\u8be6\u7ec6\u4ecb\u7ecd\u8bf7\u53c2\u8003\u9875\u5c3e\u7684\u6587\u6863\u94fe\u63a5</p>"},{"location":"zh/getting_started/#_6","title":"\u6587\u6863","text":"<ul> <li>Scale: \u7f29\u653e\u56fe\u7247\u4ee5\u67e5\u770b\u66f4\u6e05\u6670\u7684\u7ec6\u8282</li> <li>Offset: \u79fb\u52a8\u56fe\u7247\u4ee5\u67e5\u770b\u5bb9\u5668\u4e4b\u5916\u7684\u5185\u5bb9</li> <li>Rotate: \u65cb\u8f6c\u56fe\u7247\u4ee5\u4e0d\u540c\u89d2\u5ea6\u67e5\u770b\u5185\u5bb9</li> <li>Locate: \u5b9a\u4f4d\u5230\u56fe\u7247\u7684\u4efb\u610f</li> <li>Keep Transform: \u5207\u6362\u56fe\u50cf\u65f6\u4fdd\u6301\u53d8\u6362\u72b6\u6001</li> <li>Read Mode: \u957f\u56fe\u521d\u59cb\u65f6\u5145\u6ee1\u5c4f\u5e55\u65b9\u4fbf\u9605\u8bfb</li> <li>Click: \u63a5\u6536\u70b9\u51fb\u4e8b\u4ef6</li> <li>Subsampling: \u901a\u8fc7\u5b50\u91c7\u6837\u7684\u65b9\u5f0f\u663e\u793a\u5927\u56fe\u907f\u514d OOM</li> <li>Scroll Bar: \u663e\u793a\u6c34\u5e73\u548c\u5782\u76f4\u6eda\u52a8\u6761</li> <li>Log: \u4fee\u6539\u65e5\u5fd7\u7b49\u7ea7\u4ee5\u53ca\u8f93\u51fa\u7ba1\u9053</li> <li>Modifier.zoom()</li> </ul>"},{"location":"zh/keep_transform/#_1","title":"\u4fdd\u6301\u53d8\u6362\u72b6\u6001","text":"<p>\u7ffb\u8bd1\uff1aEnglish</p> <p>ZoomImage \u5728\u4ee5\u4e0b\u5c5e\u6027\u6539\u53d8\u65f6\u4f1a\u76f4\u63a5\u91cd\u7f6e\u53d8\u6362\u72b6\u6001\uff1a</p> <ul> <li>rotation</li> <li>contentScale</li> <li>alignment</li> <li>readMode</li> <li>scalesCalculator</li> <li>limitOffsetWithinBaseVisibleRect</li> <li>containerWhitespaceMultiple</li> <li>containerWhitespace</li> </ul>"},{"location":"zh/keep_transform/#containersize","title":"containerSize \u6539\u53d8","text":"<p>\u4ec5\u5f53 containerSize \u5c5e\u6027\u6539\u53d8\u65f6\uff0cZoomImage \u4f1a\u6839\u636e\u65b0\u7684 containerSize \u548c\u5f53\u524d\u53d8\u6362\u72b6\u6001 \u6062\u590d\u53d8\u6362\u72b6\u6001\uff0c\u786e\u4fdd\u7528\u6237\u5f53\u524d\u53ef\u89c1\u7684\u4e2d\u5fc3\u70b9\u59cb\u7ec8\u4f4d\u4e8e\u5c4f\u5e55\u4e2d\u592e\uff0c\u8fd9\u6837\u5f53\u4f60\u5728\u684c\u9762\u5e73\u53f0\u4e0a\u6539\u53d8\u7a97\u53e3\u5927\u5c0f\u65f6\uff0cZoomImage \u5c31\u4f1a\u81ea\u52a8\u9002\u5e94\u65b0\u7684\u7a97\u53e3\u5927\u5c0f\u5e76\u4fdd\u6301\u53ef\u89c1\u4e2d\u5fc3\u4e0d\u53d8\uff0c\u53ef\u89c1\u8303\u56f4\u4e5f\u4f1a\u968f\u4e4b\u53d8\u5316</p> <p>[!TIP] \u5f53 containerSize \u5c5e\u6027\u6539\u53d8\u7684\u540c\u65f6\u6709\u4e0a\u8ff0\u5176\u5b83\u5c5e\u6027\u4e5f\u53d1\u751f\u4e86\u6539\u53d8\uff0cZoomImage \u4f1a\u76f4\u63a5\u91cd\u7f6e\u53d8\u6362\u72b6\u6001</p>"},{"location":"zh/keep_transform/#contentsize-contentoriginsize","title":"contentSize \u6216 contentOriginSize \u6539\u53d8","text":"<p>\u9ed8\u8ba4\u60c5\u51b5\u4e0b\u4ec5\u5f53 contentSize \u6216 contentOriginSize \u5c5e\u6027\u6539\u53d8\u65f6\uff0cZoomImage \u4f1a\u76f4\u63a5\u91cd\u7f6e\u53d8\u6362\u72b6\u6001</p> <p>\u4f46\u5728\u4f60\u5c06 <code>keepTransformWhenSameAspectRatioContentSizeChanged</code> \u5c5e\u6027\u8bbe\u7f6e\u4e3a true \u540e\uff0cZoomImage \u4f1a\u6062\u590d\u53d8\u6362\u72b6\u6001\uff0c\u786e\u4fdd\u7528\u6237\u53ef\u89c1\u7684\u8303\u56f4\u59cb\u7ec8\u4fdd\u6301\u4e0d\u53d8\u3002\u8fd9\u6837\u5728\u5148\u663e\u793a\u7f29\u7565\u56fe\uff0c\u7136\u540e\u7528\u6237\u64cd\u4f5c\u4e86\u53d8\u6362\uff0c\u6700\u540e\u518d\u663e\u793a\u539f\u56fe\u7684\u573a\u666f\u4e0b\u5c31\u4e0d\u4f1a\u91cd\u7f6e\u53d8\u6362\u72b6\u6001\u4e86</p> <p><code>keepTransformWhenSameAspectRatioContentSizeChanged</code> \u5c5e\u6027\u4ec5\u5728\u5207\u6362\u76f8\u540c\u5bbd\u9ad8\u6bd4\u7684\u56fe\u50cf\u65f6\u624d\u4f1a\u5de5\u4f5c\uff0c\u56e0\u6b64\u6b64\u529f\u80fd\u4ec5\u9002\u7528\u4e8e\u7f29\u7565\u56fe\u548c\u539f\u56fe\u5207\u6362\u65f6\u7684\u573a\u666f\uff0c\u6240\u4ee5\u5b83\u9ed8\u8ba4\u6ca1\u6709\u5f00\u542f</p> <p>[!TIP] \u5f53 contentSize \u6216 contentOriginSize \u5c5e\u6027\u6539\u53d8\u7684\u540c\u65f6\u6709\u4e0a\u8ff0\u5176\u5b83\u5c5e\u6027\u4e5f\u53d1\u751f\u4e86\u6539\u53d8\uff0cZoomImage \u4f1a\u76f4\u63a5\u91cd\u7f6e\u53d8\u6362\u72b6\u6001</p>"},{"location":"zh/locate/#_1","title":"\u5b9a\u4f4d","text":"<p>\u7ffb\u8bd1\uff1aEnglish</p> <p>[!TIP] * \u4ee5\u4e0b\u793a\u4f8b\u4f18\u5148\u7528 Compose \u7248\u672c\u7684\u7ec4\u4ef6\u6765\u6f14\u793a * ZoomState.zoomable \u7b49\u4ef7\u4e8e ZoomImageView.zoomable * ZoomState.subsampling \u7b49\u4ef7\u4e8e ZoomImageView.subsampling</p>"},{"location":"zh/locate/#locate","title":"locate()","text":"<p>ZoomImage \u63d0\u4f9b\u6539\u4e86 <code>locate()</code> \u65b9\u6cd5\u7528\u6765\u5b9a\u4f4d\u5230\u56fe\u50cf\u7684\u6307\u5b9a\u4f4d\u7f6e\uff0c\u6307\u5b9a\u7684\u4f4d\u7f6e\u4f1a\u663e\u793a\u5728\u5c4f\u5e55\u7684\u4e2d\u95f4\uff08\u8fb9\u7f18\u4f4d\u7f6e\u9664\u5916\uff09\uff0c\u5b83\u6709\u4e09\u4e2a\u53c2\u6570\uff1a</p> <ul> <li><code>contentPoint: IntOffset</code>: content \u4e0a\u7684\u5b9a\u4f4d\u70b9\uff0c\u539f\u70b9\u662f content \u7684\u5de6\u4e0a\u89d2</li> <li><code>targetScale: Float</code> = transform.scaleX: \u76ee\u6807\u7f29\u653e\u500d\u6570\uff0c\u9ed8\u8ba4\u662f\u5f53\u524d\u7f29\u653e\u500d\u6570</li> <li><code>animated: Boolean</code> = false: \u662f\u5426\u4f7f\u7528\u52a8\u753b\uff0c\u9ed8\u8ba4\u4e3a false</li> </ul> <p>\u793a\u4f8b\uff1a</p> <pre><code>val zoomState: ZoomState by rememberSketchZoomState()\n\nSketchZoomAsyncImage(\n    uri = \"https://sample.com/sample.jpeg\",\n    contentDescription = \"view image\",\n    modifier = Modifier.fillMaxSize(),\n    zoomState = zoomState,\n)\n\nval coroutineScope = rememberCoroutineScope()\nButton(\n    onClick = {\n        // \u5b9a\u4f4d\u5230 content \u7684\u4e2d\u5fc3\uff0c\u5982\u679c\u5f53\u524d\u7f29\u653e\u500d\u6570\u5c0f\u4e8e mediumScale\uff0c\u5c31\u7f29\u653e\u5230 mediumScale\n        coroutineScope.launch {\n            zoomState.zoomable.locate(\n                contentPoint = zoomState.zoomable.contentSize.center,\n                targetScale = zoomState.zoomable.transform.scaleX.coerceAtLeast(zoomState.zoomable.mediumScale),\n                animated = true,\n            )\n        }\n    }\n) {\n    Text(text = \"locate to center\")\n}\n</code></pre>"},{"location":"zh/log/#_1","title":"\u65e5\u5fd7","text":"<p>\u7ffb\u8bd1\uff1aEnglish</p> <p>[!TIP] * \u4ee5\u4e0b\u793a\u4f8b\u4f18\u5148\u7528 Compose \u7248\u672c\u7684\u7ec4\u4ef6\u6765\u6f14\u793a * ZoomState.zoomable \u7b49\u4ef7\u4e8e ZoomImageView.zoomable * ZoomState.subsampling \u7b49\u4ef7\u4e8e ZoomImageView.subsampling</p> <p>ZoomImage \u5728\u8fd0\u884c\u7684\u8fc7\u7a0b\u4e2d\u4f1a\u4ea7\u751f\u4e00\u4e9b\u65e5\u5fd7\uff0c\u8fd9\u4e9b\u65e5\u5fd7\u53ef\u4ee5\u5728\u51fa\u73b0\u95ee\u9898\u65f6\u5e2e\u4f60\u67e5\u627e\u95ee\u9898\u6240\u5728\uff0c\u4e5f\u53ef\u4ee5\u5e2e\u4f60\u7406\u89e3 ZoomImage \u7684\u8fd0\u884c\u673a\u5236\u3002</p>"},{"location":"zh/log/#logger","title":"Logger","text":"<p>Logger \u7c7b\u5c01\u88c5\u4e86\u65e5\u5fd7\u7684\u6253\u5370\u3001\u7ea7\u522b\u63a7\u5236\u4e0e\u8f93\u51fa\u7ba1\u9053</p>"},{"location":"zh/log/#level","title":"level","text":"<p>Logger.level \u5c5e\u6027\u7528\u6765\u63a7\u5236\u65e5\u5fd7\u7684\u6253\u5370\u7ea7\u522b\uff0c\u9ed8\u8ba4\u662f INFO\uff0c\u4f60\u53ef\u4ee5\u4fee\u6539\u5b83\u6765\u6269\u5927\u65e5\u5fd7\u7684\u8f93\u51fa\u8303\u56f4</p> <p>\u793a\u4f8b\uff1a</p> <pre><code>val zoomState: ZoomState by rememberSketchZoomState()\n\nzoomState.logger.level = Logger.DEBUG\n\nSketchZoomAsyncImage(\n    uri = \"https://sample.com/sample.jpeg\",\n    contentDescription = \"view image\",\n    modifier = Modifier.fillMaxSize(),\n    zoomState = zoomState,\n)\n</code></pre>"},{"location":"zh/log/#pipeline","title":"pipeline","text":"<p>Logger.pipeline \u5c5e\u6027\u7528\u6765\u63a7\u5236\u65e5\u5fd7\u7684\u8f93\u51fa\u7ba1\u9053\uff0c\u9ed8\u8ba4\u662f AndroidLogPipeline \u8868\u793a\u8f93\u51fa\u5230 Android \u7684\u63a7\u5236\u53f0\uff0c\u4f60\u53ef\u4ee5\u4fee\u6539\u5b83\u6765\u5c06\u65e5\u5fd7\u8f93\u51fa\u5230\u78c1\u76d8\u7b49\u522b\u7684\u5730\u65b9</p> <p>\u793a\u4f8b\uff1a</p> <pre><code>val zoomState: ZoomState by rememberSketchZoomState()\n\nzoomState.logger.pipeline = MyLoggerPipeline()\n\nSketchZoomAsyncImage(\n    uri = \"https://sample.com/sample.jpeg\",\n    contentDescription = \"view image\",\n    modifier = Modifier.fillMaxSize(),\n    zoomState = zoomState,\n)\n</code></pre>"},{"location":"zh/modifier_zoom/#modifierzoom","title":"Modifier.zoom()","text":"<p>\u7ffb\u8bd1\uff1aEnglish</p> <p>Compose \u7248\u672c\u7684 ZoomImage \u7ec4\u4ef6\u4f9d\u8d56 <code>Modifier.zoom()</code> \u5b9e\u73b0\u7f29\u653e\uff0c\u5b83\u8fd8\u53ef\u4ee5\u7528\u5728\u4efb\u610f Compose \u7ec4\u4ef6\u4e0a</p> <p>\u793a\u4f8b\uff1a</p> <pre><code>val zoomableState = rememberZoomableState()\nval text = remember {\n    \"\"\"\n    \u516d\u738b\u6bd5\uff0c\u56db\u6d77\u4e00\uff0c\u8700\u5c71\u5140\uff0c\u963f\u623f\u51fa\u3002\u8986\u538b\u4e09\u767e\u4f59\u91cc\uff0c\u9694\u79bb\u5929\u65e5\u3002\u9a8a\u5c71\u5317\u6784\u800c\u897f\u6298\uff0c\u76f4\u8d70\u54b8\u9633\u3002\u4e8c\u5ddd\u6eb6\u6eb6\uff0c\u6d41\u5165\u5bab\u5899\u3002\u4e94\u6b65\u4e00\u697c\uff0c\u5341\u6b65\u4e00\u9601\uff1b\u5eca\u8170\u7f26\u56de\uff0c\u6a90\u7259\u9ad8\u5544\uff1b\u5404\u62b1\u5730\u52bf\uff0c\u94a9\u5fc3\u6597\u89d2\u3002\u76d8\u76d8\u7109\uff0c\u56f7\u56f7\u7109\uff0c\u8702\u623f\u6c34\u6da1\uff0c\u77d7\u4e0d\u77e5\u5176\u51e0\u5343\u4e07\u843d\u3002\u957f\u6865\u5367\u6ce2\uff0c\u672a\u4e91\u4f55\u9f99\uff1f\u590d\u9053\u884c\u7a7a\uff0c\u4e0d\u9701\u4f55\u8679\uff1f\u9ad8\u4f4e\u51a5\u8ff7\uff0c\u4e0d\u77e5\u897f\u4e1c\u3002\u6b4c\u53f0\u6696\u54cd\uff0c\u6625\u5149\u878d\u878d\uff1b\u821e\u6bbf\u51b7\u8896\uff0c\u98ce\u96e8\u51c4\u51c4\u3002\u4e00\u65e5\u4e4b\u5185\uff0c\u4e00\u5bab\u4e4b\u95f4\uff0c\u800c\u6c14\u5019\u4e0d\u9f50\u3002\u3000\u3000\n\n    \u5983\u5ad4\u5ab5\u5af1\uff0c\u738b\u5b50\u7687\u5b59\uff0c\u8f9e\u697c\u4e0b\u6bbf\uff0c\u8f87\u6765\u4e8e\u79e6\u3002\u671d\u6b4c\u591c\u5f26\uff0c\u4e3a\u79e6\u5bab\u4eba\u3002\u660e\u661f\u8367\u8367\uff0c\u5f00\u5986\u955c\u4e5f\uff1b\u7eff\u4e91\u6270\u6270\uff0c\u68b3\u6653\u9b1f\u4e5f\uff1b\u6e2d\u6d41\u6da8\u817b\uff0c\u5f03\u8102\u6c34\u4e5f\uff1b\u70df\u659c\u96fe\u6a2a\uff0c\u711a\u6912\u5170\u4e5f\u3002\u96f7\u9706\u4e4d\u60ca\uff0c\u5bab\u8f66\u8fc7\u4e5f\uff1b\u8f98\u8f98\u8fdc\u542c\uff0c\u6773\u4e0d\u77e5\u5176\u6240\u4e4b\u4e5f\u3002\u4e00\u808c\u4e00\u5bb9\uff0c\u5c3d\u6001\u6781\u598d\uff0c\u7f26\u7acb\u8fdc\u89c6\uff0c\u800c\u671b\u5e78\u7109\u3002\u6709\u4e0d\u89c1\u8005\u4e09\u5341\u516d\u5e74\u3002\u71d5\u8d75\u4e4b\u6536\u85cf\uff0c\u97e9\u9b4f\u4e4b\u7ecf\u8425\uff0c\u9f50\u695a\u4e4b\u7cbe\u82f1\uff0c\u51e0\u4e16\u51e0\u5e74\uff0c\u527d\u63a0\u5176\u4eba\uff0c\u501a\u53e0\u5982\u5c71\u3002\u4e00\u65e6\u4e0d\u80fd\u6709\uff0c\u8f93\u6765\u5176\u95f4\u3002\u9f0e\u94db\u7389\u77f3\uff0c\u91d1\u5757\u73e0\u783e\uff0c\u5f03\u63b7\u9026\u8fe4\uff0c\u79e6\u4eba\u89c6\u4e4b\uff0c\u4ea6\u4e0d\u751a\u60dc\u3002\n\u3000  \n    \u55df\u4e4e\uff01\u4e00\u4eba\u4e4b\u5fc3\uff0c\u5343\u4e07\u4eba\u4e4b\u5fc3\u4e5f\u3002\u79e6\u7231\u7eb7\u5962\uff0c\u4eba\u4ea6\u5ff5\u5176\u5bb6\u3002\u5948\u4f55\u53d6\u4e4b\u5c3d\u9531\u94e2\uff0c\u7528\u4e4b\u5982\u6ce5\u6c99\uff1f\u4f7f\u8d1f\u680b\u4e4b\u67f1\uff0c\u591a\u4e8e\u5357\u4ea9\u4e4b\u519c\u592b\uff1b\u67b6\u6881\u4e4b\u693d\uff0c\u591a\u4e8e\u673a\u4e0a\u4e4b\u5de5\u5973\uff1b\u9489\u5934\u78f7\u78f7\uff0c\u591a\u4e8e\u5728\u5ebe\u4e4b\u7c9f\u7c92\uff1b\u74e6\u7f1d\u53c2\u5dee\uff0c\u591a\u4e8e\u5468\u8eab\u4e4b\u5e1b\u7f15\uff1b\u76f4\u680f\u6a2a\u69db\uff0c\u591a\u4e8e\u4e5d\u571f\u4e4b\u57ce\u90ed\uff1b\u7ba1\u5f26\u5455\u54d1\uff0c\u591a\u4e8e\u5e02\u4eba\u4e4b\u8a00\u8bed\u3002\u4f7f\u5929\u4e0b\u4e4b\u4eba\uff0c\u4e0d\u6562\u8a00\u800c\u6562\u6012\u3002\u72ec\u592b\u4e4b\u5fc3\uff0c\u65e5\u76ca\u9a84\u56fa\u3002\u620d\u5352\u53eb\uff0c\u51fd\u8c37\u4e3e\uff0c\u695a\u4eba\u4e00\u70ac\uff0c\u53ef\u601c\u7126\u571f\uff01\u3000\u3000\n\n    \u545c\u547c\uff01\u706d\u516d\u56fd\u8005\u516d\u56fd\u4e5f\uff0c\u975e\u79e6\u4e5f\uff1b\u65cf\u79e6\u8005\u79e6\u4e5f\uff0c\u975e\u5929\u4e0b\u4e5f\u3002\u55df\u4e4e\uff01\u4f7f\u516d\u56fd\u5404\u7231\u5176\u4eba\uff0c\u5219\u8db3\u4ee5\u62d2\u79e6\uff1b\u4f7f\u79e6\u590d\u7231\u516d\u56fd\u4e4b\u4eba\uff0c\u5219\u9012\u4e09\u4e16\u53ef\u81f3\u4e07\u4e16\u800c\u4e3a\u541b\uff0c\u8c01\u5f97\u800c\u65cf\u706d\u4e5f\uff1f\u79e6\u4eba\u4e0d\u6687\u81ea\u54c0\uff0c\u800c\u540e\u4eba\u54c0\u4e4b\uff1b\u540e\u4eba\u54c0\u4e4b\u800c\u4e0d\u9274\u4e4b\uff0c\u4ea6\u4f7f\u540e\u4eba\u800c\u590d\u54c0\u540e\u4eba\u4e5f\u3002\n\n                                \u2014\u2014\u5510\u4ee3\u00b7\u675c\u7267\u300a\u963f\u623f\u5bab\u8d4b\u300b\n\"\"\".trimIndent()\n}\nBox(\n    modifier = Modifier\n        .fillMaxSize()\n        .zoom(zoomableState)\n) {\n    Text(\n        text = text,\n        modifier = Modifier\n            .background(MaterialTheme.colorScheme.secondaryContainer)\n            .padding(10.dp)\n    )\n}\n</code></pre>"},{"location":"zh/offset/#_1","title":"\u504f\u79fb","text":"<p>\u7ffb\u8bd1\uff1aEnglish</p> <p>[!TIP] * \u4ee5\u4e0b\u793a\u4f8b\u4f18\u5148\u7528 Compose \u7248\u672c\u7684\u7ec4\u4ef6\u6765\u6f14\u793a * ZoomState.zoomable \u7b49\u4ef7\u4e8e ZoomImageView.zoomable * ZoomState.subsampling \u7b49\u4ef7\u4e8e ZoomImageView.subsampling</p> <p>ZoomImage \u652f\u6301\u5355\u6307\u62d6\u52a8\u3001\u60ef\u6027\u6ed1\u52a8\u3001\u952e\u76d8\u62d6\u52a8\uff0c\u4ee5\u53ca <code>offset()</code> \u65b9\u6cd5\u6765\u79fb\u52a8\u56fe\u50cf\u3002</p>"},{"location":"zh/offset/#_2","title":"\u5355\u6307\u62d6\u52a8","text":"<p>ZoomImage \u9ed8\u8ba4\u5f00\u542f\u5355\u6307\u62d6\u52a8\u624b\u52bf\uff0c\u4f46\u4f60\u53ef\u4ee5\u5173\u95ed\u5b83\uff0c\u5982\u4e0b\uff1a</p> <pre><code>val zoomState: ZoomState by rememberSketchZoomState()\n\nzoomState.zoomable.disabledGestureTypes =\n    zoomState.zoomable.disabledGestureTypes or GestureType.ONE_FINGER_DRAG\n\nSketchZoomAsyncImage(\n    uri = \"https://sample.com/sample.jpeg\",\n    contentDescription = \"view image\",\n    modifier = Modifier.fillMaxSize(),\n    zoomState = zoomState,\n)\n</code></pre>"},{"location":"zh/offset/#_3","title":"\u952e\u76d8\u62d6\u52a8","text":"<p>ZoomImage \u652f\u6301\u901a\u8fc7\u952e\u76d8\u62d6\u52a8\u56fe\u50cf\uff0c\u652f\u6301\u77ed\u6309\u548c\u957f\u6309\u4e24\u79cd\u64cd\u4f5c\u3002\u9ed8\u8ba4\u6ce8\u518c\u4e86\u4ee5\u4e0b\u6309\u952e\uff1a</p> <ul> <li>move up: Key.DirectionUp</li> <li>move down: Key.DirectionDown</li> <li>move left: Key.DirectionLeft</li> <li>move right: Key.DirectionRight</li> </ul> <p>\u7531\u4e8e\u952e\u76d8\u62d6\u52a8\u529f\u80fd\u5fc5\u987b\u4f9d\u8d56\u7126\u70b9\uff0c\u800c\u7126\u70b9\u7ba1\u7406\u53c8\u975e\u5e38\u590d\u6742\uff0c\u6240\u4ee5\u9ed8\u8ba4\u6ca1\u6709\u5f00\u542f\u5b83\uff0c\u9700\u8981\u4f60\u4e3b\u52a8\u914d\u7f6e\u5e76\u8bf7\u6c42\u7126\u70b9\uff0c\u5982\u4e0b\uff1a</p> <pre><code>val focusRequester = remember { FocusRequester() }\nval zoomState = rememberSketchZoomState()\nSketchZoomAsyncImage(\n    uri = \"https://sample.com/sample.jpeg\",\n    contentDescription = \"view image\",\n    zoomState = zoomState,\n    modifier = Modifier.fillMaxSize()\n        .focusRequester(focusRequester)\n        .focusable()\n        .keyZoom(zoomState.zoomable),\n)\nLaunchedEffect(Unit) {\n    focusRequester.requestFocus()\n}\n</code></pre> <p>[!TIP] \u5728 HorizontalPager \u4e2d\u8bf7\u6c42\u7126\u70b9\u65f6\u9700\u8981\u6ce8\u610f\u53ea\u80fd\u4e3a\u5f53\u524d\u9875\u8bf7\u6c42\u7126\u70b9\uff0c\u5426\u5219\u4f1a\u5bfc\u81f4\u610f\u60f3\u4e0d\u5230\u7684\u610f\u5916</p> <p>\u4f60\u8fd8\u53ef\u4ee5\u901a\u8fc7\u624b\u52bf\u63a7\u5236\u52a8\u6001\u5173\u95ed\u5b83\uff0c\u5982\u4e0b\uff1a</p> <pre><code>val zoomState: ZoomState by rememberSketchZoomState()\n\nzoomState.zoomable.disabledGestureTypes =\n    zoomState.zoomable.disabledGestureTypes or GestureType.KEYBOARD_DRAG\n\nSketchZoomAsyncImage(\n    uri = \"https://sample.com/sample.jpeg\",\n    contentDescription = \"view image\",\n    modifier = Modifier.fillMaxSize(),\n    zoomState = zoomState,\n)\n</code></pre>"},{"location":"zh/offset/#offset","title":"offset()","text":"<p>ZoomImage \u63d0\u4f9b\u4e86 <code>offset()</code> \u65b9\u6cd5\u7528\u6765\u79fb\u52a8\u56fe\u50cf\u5230\u6307\u5b9a\u4f4d\u7f6e\uff0c\u5b83\u6709\u4e24\u4e2a\u53c2\u6570\uff1a</p> <ul> <li><code>targetOffset: Offset</code>: \u76ee\u6807\u504f\u79fb\u4f4d\u7f6e\uff0coffset \u539f\u70b9\u662f\u7ec4\u4ef6\u7684\u5de6\u4e0a\u89d2</li> <li><code>animated: Boolean = false</code>: \u662f\u5426\u4f7f\u7528\u52a8\u753b\uff0c\u9ed8\u8ba4\u4e3a false</li> </ul> <p>\u793a\u4f8b\uff1a</p> <pre><code>val zoomState: ZoomState by rememberSketchZoomState()\n\nSketchZoomAsyncImage(\n    uri = \"https://sample.com/sample.jpeg\",\n    contentDescription = \"view image\",\n    modifier = Modifier.fillMaxSize(),\n    zoomState = zoomState,\n)\n\nval coroutineScope = rememberCoroutineScope()\nButton(\n    onClick = {\n        coroutineScope.launch {\n            val targetOffset = zoomState.zoomable.transform.offset + Offset(x = 100, y = 200)\n            zoomState.zoomable.offset(targetOffset = targetOffset, animated = true)\n        }\n    }\n) {\n    Text(text = \"offset + Offset(100, 200)\")\n}\n\nButton(\n    onClick = {\n        coroutineScope.launch {\n            val targetOffset = zoomState.zoomable.transform.offset - Offset(x = 100, y = 200)\n            zoomState.zoomable.offset(targetOffset = targetOffset, animated = true)\n        }\n    }\n) {\n    Text(text = \"offset - Offset(100, 200)\")\n}\n</code></pre>"},{"location":"zh/offset/#_4","title":"\u9650\u5236\u504f\u79fb\u8fb9\u754c","text":"<p>ZoomImage \u9ed8\u8ba4\u4e0d\u7ba1\u4f60\u8bbe\u7f6e\u7684\u662f\u4ec0\u4e48 ContentScale \u90fd\u53ef\u4ee5\u62d6\u52a8\u67e5\u770b\u56fe\u50cf\u7684\u5168\u90e8\u5185\u5bb9\uff0c\u4f8b\u5982\u4f60\u8bbe\u7f6e\u4e86 ContentScale \u4e3a Crop\uff0cAlignment \u4e3a Center\uff0c\u90a3\u4e48\u9ed8\u8ba4\u53ea\u663e\u793a\u56fe\u50cf\u4e2d\u95f4\u7684\u90e8\u5206\uff0c\u7136\u540e\u4f60\u8fd8\u53ef\u4ee5\u5355\u6307\u6216\u53cc\u6307\u62d6\u52a8\u6765\u67e5\u770b\u56fe\u50cf\u7684\u5168\u90e8\u5185\u5bb9</p> <p>\u5982\u679c\u4f60\u5e0c\u671b\u56fe\u50cf\u53ea\u80fd\u5728 ContentScale \u548c Alignment \u6240\u9650\u5236\u7684\u533a\u57df\u5185\u79fb\u52a8\uff0c\u4e0d\u80fd\u67e5\u770b\u5168\u90e8\u5185\u5bb9\uff0c\u8fd9\u65f6\u4f60\u53ef\u4ee5\u4fee\u6539 <code>limitOffsetWithinBaseVisibleRect</code> \u53c2\u6570\u4e3a true \u6765\u8fbe\u5230\u6b64\u76ee\u7684</p> <p>\u793a\u4f8b\uff1a</p> <pre><code>val zoomState: ZoomState by rememberSketchZoomState()\n\nzoomState.zoomable.limitOffsetWithinBaseVisibleRect = true\n\nSketchZoomAsyncImage(\n    uri = \"https://sample.com/sample.jpeg\",\n    contentDescription = \"view image\",\n    modifier = Modifier.fillMaxSize(),\n    zoomState = zoomState,\n)\n</code></pre>"},{"location":"zh/offset/#_5","title":"\u5bb9\u5668\u7a7a\u767d\u533a\u57df","text":"<p>ZoomImage \u9ed8\u8ba4\u5728\u62d6\u52a8\u56fe\u50cf\u65f6\u56fe\u50cf\u7684\u8fb9\u7f18\u59cb\u7ec8\u548c\u5bb9\u5668\u7684\u8fb9\u7f18\u5bf9\u9f50\uff0c\u5b83\u4eec\u4e2d\u95f4\u4e0d\u4f1a\u5b58\u5728\u7a7a\u767d\u533a\u57df\uff08\u56fe\u50cf\u521d\u59cb\u72b6\u6001\u65f6\u9664\u5916\uff09\uff0c\u5f53\u4f60\u9700\u8981\u5728\u56fe\u50cf\u548c\u5bb9\u5668\u4e4b\u95f4\u7559\u6709\u7a7a\u767d\u533a\u57df\u65f6\uff0c\u4f60\u53ef\u4ee5\u901a\u8fc7\u8bbe\u7f6e <code>containerWhitespace</code> \u6216 <code>containerWhitespaceMultiple</code> \u53c2\u6570\u4e3a\u6765\u8fbe\u5230\u6b64\u76ee\u7684</p> <p>\u793a\u4f8b\uff1a</p> <pre><code>val zoomState: ZoomState by rememberSketchZoomState()\n\n// \u901a\u8fc7 containerWhitespace \u5c5e\u6027\u8bbe\u7f6e\u5177\u4f53\u7684\u5927\u5c0f\nzoomState.zoomable.containerWhitespace = ContainerWhitespace(\n    left = 4f, top = 3f, right = 2f, bottom = 1f\n)\n// or\nzoomState.zoomable.containerWhitespace = ContainerWhitespace(horizontal = 2f, vertical = 1f)\n// or\nzoomState.zoomable.containerWhitespace = ContainerWhitespace(size = 1f)\n\n// \u5728\u56fe\u50cf\u8fb9\u7f18\u548c\u5bb9\u5668\u8fb9\u7f18\u4e4b\u95f4\u7559\u6709 50% \u5bb9\u5668\u5927\u5c0f\u7684\u7a7a\u767d\u533a\u57df\nzoomState.zoomable.containerWhitespaceMultiple = 0.5f\n\nSketchZoomAsyncImage(\n    uri = \"https://sample.com/sample.jpeg\",\n    contentDescription = \"view image\",\n    modifier = Modifier.fillMaxSize(),\n    zoomState = zoomState,\n)\n</code></pre>"},{"location":"zh/offset/#_6","title":"\u53ef\u8bbf\u95ee\u5c5e\u6027","text":"<pre><code>// compose\nval zoomState: ZoomState by rememberSketchZoomState()\nSketchZoomAsyncImage(zoomState = zoomState)\nval zoomable: ZoomableState = zoomState.zoomable\n\n// view\nval sketchZoomImageView = SketchZoomImageView(context)\nval zoomable: ZoomableEngine = sketchZoomImageView.zoomable\n</code></pre> <p>[!TIP] * \u6ce8\u610f\uff1aview \u7248\u672c\u7684\u76f8\u5173\u5c5e\u6027\u7528 StateFlow \u5305\u88c5\uff0c\u6240\u4ee5\u5176\u540d\u5b57\u76f8\u6bd4 compose \u7248\u672c\u90fd\u4ee5 State \u4e3a\u540e\u7f00</p> <ul> <li><code>zoomable.transform.offset: Offset</code>: \u5f53\u524d\u504f\u79fb\u91cf\uff08baseTransform.offset + userTransform.offset\uff09</li> <li><code>zoomable.baseTransform.offset: Offset</code>: \u5f53\u524d\u57fa\u7840\u504f\u79fb\u91cf\uff0c\u53d7 alignment \u53c2\u6570\u548c rotate \u65b9\u6cd5\u5f71\u54cd</li> <li><code>zoomable.userTransform.offset: Offset</code>: \u5f53\u524d\u7528\u6237\u504f\u79fb\u91cf\uff0c\u53d7 offset()\u3001locate() \u4ee5\u53ca\u7528\u6237\u624b\u52bf\u62d6\u52a8\u5f71\u54cd</li> <li><code>zoomable.scrollEdge: ScrollEdge</code>: \u5f53\u524d\u504f\u79fb\u7684\u8fb9\u754c\u72b6\u6001</li> </ul>"},{"location":"zh/offset/#_7","title":"\u76d1\u542c\u5c5e\u6027\u53d8\u5316","text":"<ul> <li>compose \u7248\u672c\u7684\u76f8\u5173\u5c5e\u6027\u662f\u7528 State \u5305\u88c5\u7684\uff0c\u5728 Composable \u51fd\u6570\u4e2d\u76f4\u63a5\u8bfb\u53d6\u5b83\u5373\u53ef\u5b9e\u73b0\u76d1\u542c</li> <li>view \u7684\u76f8\u5173\u5c5e\u6027\u662f\u7528 StateFlow \u5305\u88c5\uff0c\u8c03\u7528\u5176 collect \u51fd\u6570\u5373\u53ef\u5b9e\u73b0\u76d1\u542c</li> </ul>"},{"location":"zh/readmode/#_1","title":"\u9605\u8bfb\u6a21\u5f0f","text":"<p>\u7ffb\u8bd1\uff1aEnglish</p> <p>[!TIP] * \u4ee5\u4e0b\u793a\u4f8b\u4f18\u5148\u7528 Compose \u7248\u672c\u7684\u7ec4\u4ef6\u6765\u6f14\u793a * ZoomState.zoomable \u7b49\u4ef7\u4e8e ZoomImageView.zoomable * ZoomState.subsampling \u7b49\u4ef7\u4e8e ZoomImageView.subsampling</p> <p>\u5bf9\u4e8e\u6587\u5b57\u7c7b\u957f\u56fe\u7247\uff0c\u4ed6\u4eec\u7684\u9ad8\u5ea6\u901a\u5e38\u975e\u5e38\u5927\uff0c\u5982\u679c\u521d\u59cb\u72b6\u6001\u663e\u793a\u5168\u8c8c\uff0c\u90a3\u4e48\u56fe\u7247\u91cc\u7684\u6587\u5b57\u5185\u5bb9\u4ec0\u4e48\u4e5f\u770b\u4e0d\u6e05\u695a\uff0c\u7528\u6237\u5fc5\u987b\u53cc\u51fb\u4e00\u4e0b\u653e\u5927\u518d\u6ed1\u52a8\u5230\u5f00\u59cb\u4f4d\u7f6e\u624d\u80fd\u5f00\u59cb\u9605\u8bfb</p> <p>\u9488\u5bf9\u8fd9\u6837\u7684\u56fe\u7247 ZoomImage \u63d0\u4f9b\u4e86\u9605\u8bfb\u6a21\u5f0f\u8ba9\u56fe\u7247\u521d\u59cb\u72b6\u6001\u65f6\u5c31\u5145\u6ee1\u5c4f\u5e55\uff0c\u5e76\u5b9a\u4f4d\u5230\u5f00\u59cb\u4f4d\u7f6e\uff0c \u7c7b\u4f3c ContentScale.Crop \u52a0 Alignment.TopStart \u7684\u7ec4\u5408\uff0c\u8fd9\u6837\u7528\u6237\u5c31\u80fd\u76f4\u63a5\u5f00\u59cb\u9605\u8bfb\u6587\u5b57\u957f\u56fe\u7684\u5185\u5bb9\u4e86</p>"},{"location":"zh/readmode/#_2","title":"\u5f00\u542f\u9605\u8bfb\u6a21\u5f0f","text":"<pre><code>val zoomState: ZoomState by rememberSketchZoomState()\n\nzoomState.zoomable.readMode = ReadMode.Default\n\nSketchZoomAsyncImage(\n    uri = \"https://sample.com/sample.jpeg\",\n    contentDescription = \"view image\",\n    modifier = Modifier.fillMaxSize(),\n    zoomState = zoomState,\n)\n</code></pre>"},{"location":"zh/readmode/#readmode","title":"ReadMode","text":"<p>ReadMode \u7c7b\u7528\u6765\u63a7\u5236\u9605\u8bfb\u6a21\u5f0f\uff0c\u5b83\u6709\u4e24\u4e2a\u53c2\u6570\uff1a</p> <ul> <li><code>sizeType: Int = ReadMode.SIZE_TYPE_HORIZONTAL or ReadMode.SIZE_TYPE_VERTICAL</code>:   \u7528\u6765\u63a7\u5236\u54ea\u79cd\u5c3a\u5bf8\u7c7b\u578b\u7684\u56fe\u7247\u53ef\u4ee5\u4f7f\u7528\u9605\u8bfb\u6a21\u5f0f\uff0c\u9ed8\u8ba4\u662f\u6a2a\u56fe\u548c\u7ad6\u56fe\u90fd\u53ef\u4ee5\uff0c\u53d6\u503c\u4e3a   <code>ReadMode.SIZE_TYPE_HORIZONTA</code>   \u6216 <code>ReadMode.SIZE_TYPE_VERTICAL</code></li> <li><code>decider: ReadMode.Decider = ReadMode.Decider.Default</code>: decider \u6839\u636e contentSize \u548c containerSize   \u6765\u5224\u65ad\u662f\u5426\u53ef\u4ee5\u4f7f\u7528\u9605\u8bfb\u6a21\u5f0f\uff0c\u9ed8\u8ba4\u5b9e\u73b0\u662f ReadMode.LongImageDecider\uff0c\u4ec5\u5bf9\u957f\u56fe\u4f7f\u7528\u9605\u8bfb\u6a21\u5f0f</li> </ul> <p>[!TIP] * ReadMode \u7684\u9ed8\u8ba4\u914d\u7f6e\u662f ReadMode.Default * \u4f60\u53ef\u4ee5\u5b9e\u73b0 ReadMode.Decider \u63a5\u53e3\u5b9e\u73b0\u4f60\u81ea\u5df1\u7684\u5224\u5b9a\u89c4\u5219</p>"},{"location":"zh/rotate/#_1","title":"\u65cb\u8f6c","text":"<p>\u7ffb\u8bd1\uff1aEnglish</p> <p>[!TIP] * \u4ee5\u4e0b\u793a\u4f8b\u4f18\u5148\u7528 Compose \u7248\u672c\u7684\u7ec4\u4ef6\u6765\u6f14\u793a * ZoomState.zoomable \u7b49\u4ef7\u4e8e ZoomImageView.zoomable * ZoomState.subsampling \u7b49\u4ef7\u4e8e ZoomImageView.subsampling</p>"},{"location":"zh/rotate/#rotate","title":"rotate()","text":"<p>ZoomImage \u63d0\u4f9b\u4e86 <code>rotate()</code> \u65b9\u6cd5\u7528\u6765\u65cb\u8f6c\u56fe\u50cf\u5230\u6307\u5b9a\u89d2\u5ea6\uff0c\u5b83\u6709\u4e00\u4e2a\u53c2\u6570\uff1a</p> <ul> <li><code>targetRotation: Int</code>\uff1a\u76ee\u6807\u65cb\u8f6c\u89d2\u5ea6\uff0c\u5b83\u53ea\u80fd\u662f 90 \u7684\u500d\u6570\uff0c\u6bd4\u5982 0\u300190\u3001180\u3001270\u3001360 \u7b49</li> </ul> <p>\u793a\u4f8b\uff1a</p> <pre><code>val zoomState: ZoomState by rememberSketchZoomState()\n\nSketchZoomAsyncImage(\n    uri = \"https://sample.com/sample.jpeg\",\n    contentDescription = \"view image\",\n    modifier = Modifier.fillMaxSize(),\n    zoomState = zoomState,\n)\n\nval coroutineScope = rememberCoroutineScope()\nButton(\n    onClick = {\n        coroutineScope.launch {\n            val targetRotation = zoomState.zoomable.transform.rotation.roundToInt() + 90\n            zoomState.zoomable.rotate(targetRotation = targetRotation)\n        }\n    }\n) {\n    Text(text = \"right rotate 90\")\n}\n\nButton(\n    onClick = {\n        coroutineScope.launch {\n            val targetRotation = zoomState.zoomable.transform.rotation.roundToInt() - 90\n            zoomState.zoomable.rotate(targetRotation = targetRotation)\n        }\n    }\n) {\n    Text(text = \"left rotate 90\")\n}\n</code></pre>"},{"location":"zh/rotate/#_2","title":"\u53ef\u8bbf\u95ee\u5c5e\u6027","text":"<pre><code>// compose\nval zoomState: ZoomState by rememberSketchZoomState()\nSketchZoomAsyncImage(zoomState = zoomState)\nval zoomable: ZoomableState = zoomState.zoomable\n\n// view\nval sketchZoomImageView = SketchZoomImageView(context)\nval zoomable: ZoomableEngine = sketchZoomImageView.zoomable\n</code></pre> <p>\u6ce8\u610f\uff1aview \u7248\u672c\u7684\u76f8\u5173\u5c5e\u6027\u7528 StateFlow \u5305\u88c5\uff0c\u6240\u4ee5\u5176\u540d\u5b57\u76f8\u6bd4 compose \u7248\u672c\u90fd\u4ee5 State \u4e3a\u540e\u7f00</p> <ul> <li><code>zoomable.transform.rotation: Float</code>: \u5f53\u524d\u65cb\u8f6c\u89d2\u5ea6\uff08\u57fa\u7840\u65cb\u8f6c\u89d2\u5ea6 + \u7528\u6237\u65cb\u8f6c\u89d2\u5ea6\uff09</li> <li><code>zoomable.baseTransform.rotation: Float</code>: \u5f53\u524d\u57fa\u7840\u65cb\u8f6c\u89d2\u5ea6\uff0c\u53d7 rotate() \u65b9\u6cd5\u5f71\u54cd</li> <li><code>zoomable.userTransform.rotation: Float</code>: \u5f53\u524d\u7528\u6237\u65cb\u8f6c\u89d2\u5ea6\uff0c\u4e00\u76f4\u4e3a 0</li> </ul>"},{"location":"zh/rotate/#_3","title":"\u76d1\u542c\u5c5e\u6027\u53d8\u5316","text":"<ul> <li>compose \u7248\u672c\u7684\u76f8\u5173\u5c5e\u6027\u662f\u7528 State \u5305\u88c5\u7684\uff0c\u5728 Composable \u51fd\u6570\u4e2d\u76f4\u63a5\u8bfb\u53d6\u5b83\u5373\u53ef\u5b9e\u73b0\u76d1\u542c</li> <li>view \u7684\u76f8\u5173\u5c5e\u6027\u662f\u7528 StateFlow \u5305\u88c5\uff0c\u8c03\u7528\u5176 collect \u51fd\u6570\u5373\u53ef\u5b9e\u73b0\u76d1\u542c</li> </ul>"},{"location":"zh/scale/#_1","title":"\u7f29\u653e","text":"<p>\u7ffb\u8bd1\uff1aEnglish</p> <p>[!TIP] * \u4ee5\u4e0b\u793a\u4f8b\u4f18\u5148\u7528 Compose \u7248\u672c\u7684\u7ec4\u4ef6\u6765\u6f14\u793a * ZoomState.zoomable \u7b49\u4ef7\u4e8e ZoomImageView.zoomable * ZoomState.subsampling \u7b49\u4ef7\u4e8e ZoomImageView.subsampling</p> <p>ZoomImage \u652f\u6301\u591a\u79cd\u65b9\u5f0f\u7f29\u653e\u56fe\u7247\uff0c\u4f8b\u5982\u53cc\u6307\u7f29\u653e\u3001\u5355\u6307\u7f29\u653e\u3001\u53cc\u51fb\u7f29\u653e\u3001\u9f20\u6807\u6eda\u8f6e\u7f29\u653e\u3001\u952e\u76d8\u7f29\u653e\u3001scale() \u7b49</p>"},{"location":"zh/scale/#_2","title":"\u7279\u70b9","text":"<ul> <li>\u652f\u6301\u5355\u6307\u7f29\u653e\u3001\u53cc\u6307\u7f29\u653e\u3001\u53cc\u51fb\u7f29\u653e\u3001   \u9f20\u6807\u6eda\u8f6e\u7f29\u653e\u3001\u952e\u76d8\u7f29\u653e   \u3001\u4ee5\u53ca\u901a\u8fc7 scale()\u3001scaleBy()\u3001scaleByPlus() \u65b9\u6cd5\u7f29\u653e\u5230\u6307\u5b9a\u7684\u500d\u6570</li> <li>\u652f\u6301\u6a61\u76ae\u7b4b\u6548\u679c.   \u624b\u52bf\u8fde\u7eed\u7f29\u653e\u65f6\uff08\u5355\u6307/\u53cc\u6307\u7f29\u653e\uff09\u8d85\u8fc7\u6700\u5927\u6216\u6700\u5c0f\u8303\u56f4\u65f6\u53ef\u4ee5\u7ee7\u7eed\u7f29\u653e\uff0c\u4f46\u6709\u963b\u5c3c\u6548\u679c\uff0c\u677e\u624b\u540e\u4f1a\u56de\u5f39\u5230\u6700\u5927\u6216\u6700\u5c0f\u7f29\u653e\u500d\u6570</li> <li>\u52a8\u6001\u7f29\u653e\u8303\u56f4. \u9ed8\u8ba4\u6839\u636e   containerSize\u3001contentSize\u3001contentOriginSize \u52a8\u6001\u8ba1\u7b97 mediumScale \u548c maxScale</li> <li>\u652f\u6301\u52a8\u753b. scale() \u65b9\u6cd5\u548c\u53cc\u51fb\u7f29\u653e\u5747\u652f\u6301\u52a8\u753b</li> <li>\u652f\u6301\u5168\u90e8\u7684 ContentScale, \u548c Alignment\uff0cZoomImageView \u4e5f\u652f\u6301 ContentScale   \u548c Alignment</li> <li>\u7981\u7528\u624b\u52bf. \u652f\u6301\u5206\u522b\u7981\u7528\u53cc\u51fb\u7f29\u653e\u3001\u53cc\u6307\u7f29\u653e\u3001\u5355\u6307\u7f29\u653e\u3001\u9f20\u6807\u6eda\u8f6e\u7f29\u653e\u3001\u62d6\u52a8\u7b49\u624b\u52bf</li> <li>\u4ec5 containerSize \u6539\u53d8\u65f6\uff08\u684c\u9762\u5e73\u53f0\u4e0a\u62d6\u52a8\u8c03\u6574\u7a97\u53e3\u5927\u5c0f\uff09\uff0cZoomImage \u4f1a\u4fdd\u6301\u7f29\u653e\u6bd4\u4f8b\u548c content \u53ef\u89c1\u4e2d\u5fc3\u70b9\u4e0d\u53d8</li> <li>\u9875\u9762\u91cd\u5efa\u65f6\uff08\u5c4f\u5e55\u65cb\u8f6c\u3001App \u5728\u540e\u53f0\u88ab\u56de\u6536\uff09\u4f1a\u91cd\u7f6e\u7f29\u653e\u548c\u504f\u79fb</li> <li>\u652f\u6301\u8bfb\u53d6\u76f8\u5173\u4fe1\u606f. \u652f\u6301\u8bfb\u53d6\u5f53\u524d\u7f29\u653e\u500d\u6570\u3001\u6700\u5c0f/\u4e2d\u95f4/\u6700\u5927\u7f29\u653e\u500d\u6570\u7b49\u7f29\u653e\u76f8\u5173\u4fe1\u606f</li> </ul>"},{"location":"zh/scale/#contentscale-alignment","title":"ContentScale, Alignment","text":"<p>ZoomImage \u652f\u6301\u6240\u6709\u7684 ContentScale \u548c Alignment\uff0c\u5e76\u4e14\u5f97\u76ca\u4e8e compose \u7248\u672c\u548c view \u7248\u672c\u4f7f\u7528\u7684\u662f\u540c\u4e00\u5957\u7b97\u6cd5\uff0cview \u7248\u672c\u7684\u7ec4\u4ef6\u5728\u652f\u6301 ScaleType \u4e4b\u5916\u4e5f\u652f\u6301 ContentScale \u548c Alignment</p> <p>\u793a\u4f8b\uff1a</p> <pre><code>val sketchZoomImageView = SketchZoomImageView(context)\n\nsketchZoomImageView.zoomable.contentScaleState.value = ContentScaleCompat.None\nsketchZoomImageView.zoomable.alignmentState.value = AlignmentCompat.BottomEnd\n</code></pre>"},{"location":"zh/scale/#minscale-mediumscale-maxscale","title":"minScale, mediumScale, maxScale","text":"<p>ZoomImage \u5728\u7f29\u653e\u7684\u8fc7\u7a0b\u4e2d\u59cb\u7ec8\u53d7 minScale\u3001mediumScale\u3001maxScale \u4e09\u4e2a\u53c2\u6570\u7684\u63a7\u5236\uff1a</p> <ul> <li><code>minScale</code>\uff1a\u6700\u5c0f\u7f29\u653e\u500d\u6570\uff0c\u7528\u4e8e\u9650\u5236 ZoomImage \u5728\u7f29\u653e\u8fc7\u7a0b\u4e2d\u7684\u6700\u5c0f\u503c\uff0c\u8ba1\u7b97\u516c\u5f0f\u4e3a\uff1a     <pre><code>ContentScale.computeScaleFactor(srcSize, dstSize).scaleX\n</code></pre></li> <li><code>mediumScale</code>\uff1a\u4e2d\u95f4\u7f29\u653e\u500d\u6570\uff0c\u4e13\u95e8\u7528\u4e8e\u53cc\u51fb\u7f29\u653e\uff0c\u53d6\u503c\u53d7 scalesCalculator \u53c2\u6570\u63a7\u5236</li> <li><code>maxScale</code>\uff1a\u6700\u5927\u7f29\u653e\u500d\u6570\uff0c\u7528\u4e8e\u9650\u5236 ZoomImage \u5728\u7f29\u653e\u8fc7\u7a0b\u4e2d\u7684\u6700\u5927\u503c\uff0c\u53d6\u503c\u53d7 scalesCalculator \u53c2\u6570\u63a7\u5236</li> </ul>"},{"location":"zh/scale/#scalescalculator","title":"ScalesCalculator","text":"<p>ScalesCalculator \u4e13\u95e8\u7528\u6765\u8ba1\u7b97 mediumScale \u548c maxScale\uff0cZoomImage \u6709\u4e24\u4e2a\u5185\u7f6e\u7684 ScalesCalculator\uff1a</p> <p>[!TIP] * minMediumScale = <code>minScale * multiple</code> * fillContainerScale = <code>max(containerSize.width / contentSize.width.toFloat(),     containerSize.height / contentSize.height.toFloat())</code> * contentOriginScale = <code>max(contentOriginSize.width / contentSize.width.toFloat(),     contentOriginSize.height / contentSize.height.toFloat())</code> * initialScale \u901a\u5e38\u7531 ReadMode \u8ba1\u7b97 * multiple \u9ed8\u8ba4\u503c\u4e3a 3f</p> <ul> <li>ScalesCalculator.Dynamic\uff1a<ul> <li>mediumScale \u8ba1\u7b97\u89c4\u5219\u5982\u4e0b\uff1a<ul> <li>\u5982\u679c contentScale \u662f FillBounds\uff0c\u5219\u59cb\u7ec8\u662f minMediumScale</li> <li>\u5982\u679c initialScale \u5927\u4e8e minScale \u5219\u59cb\u7ec8\u662f initialScale</li> <li>\u5426\u5219\u5728 minMediumScale\u3001fillContainerScale\u3001contentOriginScale \u5f53\u4e2d\u53d6\u6700\u5927\u7684</li> </ul> </li> <li>maxScale \u8ba1\u7b97\u89c4\u5219\u5982\u4e0b\uff1a<ul> <li>\u5982\u679c contentScale \u662f FillBounds\uff0c\u5219\u59cb\u7ec8\u662f <code>mediumScale * multiple</code></li> <li>\u5426\u5219\u5728 <code>mediumScale * multiple</code>, contentOriginScale \u5f53\u4e2d\u53d6\u6700\u5927\u7684</li> </ul> </li> </ul> </li> <li>ScalesCalculator.Fixed\uff1a<ul> <li>mediumScale \u8ba1\u7b97\u89c4\u5219\u5982\u4e0b\uff1a<ul> <li>\u5982\u679c contentScale \u662f FillBounds\uff0c\u5219\u59cb\u7ec8\u662f minMediumScale</li> <li>\u5982\u679c initialScale \u5927\u4e8e minScale \u5219\u59cb\u7ec8\u662f initialScale</li> <li>\u5426\u5219\u59cb\u7ec8\u662f minMediumScale</li> </ul> </li> <li>maxScale \u59cb\u7ec8\u662f <code>mediumScale * multiple</code></li> </ul> </li> </ul> <p>scalesCalculator \u9ed8\u8ba4\u503c\u4e3a ScalesCalculator.Dynamic\uff0c\u4f60\u53ef\u4ee5\u5c06\u5b83\u4fee\u6539\u4e3a Fixed \u6216\u81ea\u5b9a\u4e49\u7684\u5b9e\u73b0</p> <p>\u793a\u4f8b\uff1a</p> <pre><code>val zoomState: ZoomState by rememberSketchZoomState()\n\nzoomState.zoomable.scalesCalculator = ScalesCalculator.Fixed\n// \u6216\nzoomState.zoomable.scalesCalculator = MyScalesCalculator()\n\nSketchZoomAsyncImage(\n    uri = \"https://sample.com/sample.jpeg\",\n    contentDescription = \"view image\",\n    modifier = Modifier.fillMaxSize(),\n    zoomState = zoomState,\n)\n</code></pre>"},{"location":"zh/scale/#_3","title":"\u53cc\u6307\u7f29\u653e","text":"<p>\u4f60\u53ef\u4ee5\u901a\u8fc7\u53cc\u6307\u634f\u5408\u6536\u62fe\u7f29\u653e\u56fe\u50cf\uff0cZoomImage \u4f1a\u6839\u636e\u53cc\u6307\u7684\u8ddd\u79bb\u6765\u8ba1\u7b97\u7f29\u653e\u500d\u6570\u3002\u53cc\u6307\u7f29\u653e\u529f\u80fd\u9ed8\u8ba4\u5f00\u542f\uff0c\u4f46\u4f60\u53ef\u4ee5\u5173\u95ed\u5b83\uff0c\u5982\u4e0b\uff1a</p> <pre><code>val zoomState: ZoomState by rememberSketchZoomState()\n\nzoomState.zoomable.disabledGestureTypes =\n    zoomState.zoomable.disabledGestureTypes or GestureType.TWO_FINGER_SCALE\n\nSketchZoomAsyncImage(\n    uri = \"https://sample.com/sample.jpeg\",\n    contentDescription = \"view image\",\n    modifier = Modifier.fillMaxSize(),\n    zoomState = zoomState,\n)\n</code></pre>"},{"location":"zh/scale/#_4","title":"\u53cc\u51fb\u7f29\u653e","text":"<p>ZoomImage \u652f\u6301\u53cc\u51fb\u56fe\u50cf\u5207\u6362\u7f29\u653e\u500d\u6570</p>"},{"location":"zh/scale/#threestepscale","title":"threeStepScale","text":"<p>\u9ed8\u8ba4\u603b\u662f\u5728 minScale \u548c mediumScale \u4e4b\u95f4\u5faa\u73af\uff0c\u5982\u679c\u4f60\u60f3\u5728 minScale\u3001mediumScale \u548c maxScale \u4e4b\u95f4\u5faa\u73af\uff0c\u53ef\u4ee5\u4fee\u6539 threeStepScale \u5c5e\u6027\u4e3a true\uff0c\u5982\u4e0b\uff1a</p> <pre><code>val zoomState: ZoomState by rememberSketchZoomState()\n\nzoomState.zoomable.threeStepScale = true\n\nSketchZoomAsyncImage(\n    uri = \"https://sample.com/sample.jpeg\",\n    contentDescription = \"view image\",\n    modifier = Modifier.fillMaxSize(),\n    zoomState = zoomState,\n)\n</code></pre>"},{"location":"zh/scale/#switchscale","title":"switchScale()","text":"<p>\u53cc\u51fb\u7f29\u653e\u8c03\u7528\u7684\u662f ZoomImage \u7684 <code>switchScale()</code> \u65b9\u6cd5\uff0c\u4f60\u4e5f\u53ef\u4ee5\u5728\u9700\u8981\u7684\u65f6\u5019\u8c03\u7528 <code>switchScale()</code> \u65b9\u6cd5\u6765\u5207\u6362\u7f29\u653e\u500d\u6570\uff0c\u5b83\u6709\u4e24\u4e2a\u53c2\u6570\uff1a</p> <ul> <li><code>centroidContentPoint: IntOffset = contentVisibleRect.center</code>\uff1acontent \u4e0a\u7684\u7f29\u653e\u4e2d\u5fc3\u70b9\uff0c\u539f\u70b9\u662f   content \u7684\u5de6\u4e0a\u89d2\uff0c\u9ed8\u8ba4\u662f content \u5f53\u524d\u53ef\u89c1\u533a\u57df\u7684\u4e2d\u5fc3</li> <li><code>animated: Boolean = false</code>\uff1a\u662f\u5426\u4f7f\u7528\u52a8\u753b\uff0c\u9ed8\u8ba4\u4e3a false</li> </ul> <p>[!TIP] \u6ce8\u610f\uff1acentroidContentPoint \u4e00\u5b9a\u8981\u662f content \u4e0a\u7684\u70b9</p> <p>\u793a\u4f8b\uff1a</p> <pre><code>val zoomState: ZoomState by rememberSketchZoomState()\n\nSketchZoomAsyncImage(\n    uri = \"https://sample.com/sample.jpeg\",\n    contentDescription = \"view image\",\n    modifier = Modifier.fillMaxSize(),\n    zoomState = zoomState,\n)\n\nval coroutineScope = rememberCoroutineScope()\nButton(\n    onClick = {\n        coroutineScope.launch {\n            zoomState.zoomable.switchScale(animated = true)\n        }\n    }\n) {\n    Text(text = \"switch scale\")\n}\n</code></pre>"},{"location":"zh/scale/#getnextstepscale","title":"getNextStepScale()","text":"<p>\u4f60\u8fd8\u53ef\u4ee5\u8c03\u7528 <code>getNextStepScale()</code> \u65b9\u6cd5\u6765\u83b7\u53d6\u4e0b\u4e00\u4e2a\u7f29\u653e\u500d\u6570</p> <p>\u793a\u4f8b\uff1a</p> <pre><code>val zoomState: ZoomState by rememberSketchZoomState()\n\nzoomState.zoomable.getNextStepScale()\n</code></pre>"},{"location":"zh/scale/#_5","title":"\u5173\u95ed\u53cc\u51fb\u7f29\u653e","text":"<p>\u53cc\u51fb\u7f29\u653e\u529f\u80fd\u9ed8\u8ba4\u5f00\u542f\uff0c\u4f46\u4f60\u53ef\u4ee5\u5173\u95ed\u5b83\uff0c\u5982\u4e0b\uff1a</p> <pre><code>val zoomState: ZoomState by rememberSketchZoomState()\n\nzoomState.zoomable.disabledGestureTypes =\n    zoomState.zoomable.disabledGestureTypes or GestureType.DOUBLE_TAP_SCALE\n\nSketchZoomAsyncImage(\n    uri = \"https://sample.com/sample.jpeg\",\n    contentDescription = \"view image\",\n    modifier = Modifier.fillMaxSize(),\n    zoomState = zoomState,\n)\n</code></pre>"},{"location":"zh/scale/#_6","title":"\u5355\u6307\u7f29\u653e","text":"<p>ZoomImage \u652f\u6301\u5355\u6307\u7f29\u653e\u56fe\u50cf\uff0c\u53cc\u51fb\u540e\u6309\u4f4f\u5c4f\u5e55\u4e0a\u4e0b\u6ed1\u52a8\u5373\u53ef\u7f29\u653e\u56fe\u50cf\u3002\u6b64\u529f\u80fd\u9ed8\u8ba4\u5f00\u542f\uff0c\u4f46\u4f60\u53ef\u4ee5\u5173\u95ed\u5b83\uff0c\u5982\u4e0b\uff1a</p> <pre><code>val zoomState: ZoomState by rememberSketchZoomState()\n\nzoomState.zoomable.disabledGestureTypes =\n    zoomState.zoomable.disabledGestureTypes or GestureType.ONE_FINGER_SCALE\n\nSketchZoomAsyncImage(\n    uri = \"https://sample.com/sample.jpeg\",\n    contentDescription = \"view image\",\n    modifier = Modifier.fillMaxSize(),\n    zoomState = zoomState,\n)\n</code></pre>"},{"location":"zh/scale/#_7","title":"\u9f20\u6807\u6eda\u8f6e\u7f29\u653e","text":"<p>ZoomImage \u652f\u6301\u901a\u8fc7\u9f20\u6807\u6eda\u8f6e\u7f29\u653e\u56fe\u50cf\uff0cZoomImage \u4ee5\u5f53\u524d\u9f20\u6807\u4f4d\u7f6e\u4e3a\u7f29\u653e\u4e2d\u5fc3\u5e76\u6839\u636e\u9f20\u6807\u6eda\u8f6e\u7684\u6eda\u52a8\u65b9\u5411\u548c\u8ddd\u79bb\u6765\u8ba1\u7b97\u7f29\u653e\u500d\u6570\u3002</p> <p>\u4f60\u53ef\u4ee5\u901a\u8fc7\u8bbe\u7f6e <code>reverseMouseWheelScale</code> \u5c5e\u6027\u6765\u53cd\u8f6c\u9f20\u6807\u6eda\u8f6e\u7f29\u653e\uff0c\u5982\u4e0b\uff1a</p> <pre><code>val zoomState: ZoomState by rememberSketchZoomState()\n\nzoomState.zoomable.reverseMouseWheelScale = true\n\nSketchZoomAsyncImage(\n    uri = \"https://sample.com/sample.jpeg\",\n    contentDescription = \"view image\",\n    modifier = Modifier.fillMaxSize(),\n    zoomState = zoomState,\n)\n</code></pre> <p>\u9f20\u6807\u6eda\u8f6e\u7f29\u653e\u529f\u80fd\u9ed8\u8ba4\u5f00\u542f\uff0c\u4f46\u4f60\u53ef\u4ee5\u5173\u95ed\u5b83\uff0c\u5982\u4e0b\uff1a</p> <pre><code>val zoomState: ZoomState by rememberSketchZoomState()\n\nzoomState.zoomable.disabledGestureTypes =\n    zoomState.zoomable.disabledGestureTypes or GestureType.MOUSE_WHEEL_SCALE\n\nSketchZoomAsyncImage(\n    uri = \"https://sample.com/sample.jpeg\",\n    contentDescription = \"view image\",\n    modifier = Modifier.fillMaxSize(),\n    zoomState = zoomState,\n)\n</code></pre> <p>\u4f60\u8fd8\u53ef\u4ee5\u901a\u8fc7 <code>mouseWheelScaleCalculator</code> \u5c5e\u6027\u6765\u81ea\u5b9a\u4e49\u9f20\u6807\u6eda\u8f6e\u7f29\u653e\u7684\u8ba1\u7b97\u65b9\u5f0f\uff0c\u9ed8\u8ba4\u662f <code>MouseWheelScaleCalculator.Default</code>\uff0c\u5982\u4e0b\uff1a</p> <pre><code>val zoomState: ZoomState by rememberSketchZoomState()\n\nzoomState.zoomable.mouseWheelScaleCalculator =\n    MouseWheelScaleCalculator { currentScale, scrollDelta -&gt;\n        // return new scale\n    }\n\nSketchZoomAsyncImage(\n    uri = \"https://sample.com/sample.jpeg\",\n    contentDescription = \"view image\",\n    modifier = Modifier.fillMaxSize(),\n    zoomState = zoomState,\n)\n</code></pre>"},{"location":"zh/scale/#_8","title":"\u952e\u76d8\u7f29\u653e","text":"<p>ZoomImage \u652f\u6301\u901a\u8fc7\u952e\u76d8\u7f29\u653e\u56fe\u50cf\uff0c\u652f\u6301\u77ed\u6309\u548c\u957f\u6309\u4e24\u79cd\u64cd\u4f5c\u3002\u9ed8\u8ba4\u6ce8\u518c\u4e86\u4ee5\u4e0b\u6309\u952e\uff1a</p> <ul> <li>scale in: Key.ZoomIn, Key.Equals + (meta/ctrl)/alt, Key.DirectionUp + (meta/ctrl)/alt</li> <li>scale out: Key.ZoomOut, Key.Minus + (meta/ctrl)/alt, Key.DirectionDown + (meta/ctrl)/alt</li> </ul> <p>\u7531\u4e8e\u952e\u76d8\u7f29\u653e\u529f\u80fd\u5fc5\u987b\u4f9d\u8d56\u7126\u70b9\uff0c\u800c\u7126\u70b9\u7ba1\u7406\u53c8\u975e\u5e38\u590d\u6742\uff0c\u6240\u4ee5\u9ed8\u8ba4\u6ca1\u6709\u5f00\u542f\u5b83\uff0c\u9700\u8981\u4f60\u4e3b\u52a8\u914d\u7f6e\u5e76\u8bf7\u6c42\u7126\u70b9\uff0c\u5982\u4e0b\uff1a</p> <pre><code>val focusRequester = remember { FocusRequester() }\nval zoomState = rememberSketchZoomState()\nSketchZoomAsyncImage(\n    uri = \"https://sample.com/sample.jpeg\",\n    contentDescription = \"view image\",\n    zoomState = zoomState,\n    modifier = Modifier.fillMaxSize()\n        .focusRequester(focusRequester)\n        .focusable()\n        .keyZoom(zoomState.zoomable),\n)\nLaunchedEffect(Unit) {\n    focusRequester.requestFocus()\n}\n</code></pre> <p>[!TIP] \u5728 HorizontalPager \u4e2d\u8bf7\u6c42\u7126\u70b9\u65f6\u9700\u8981\u6ce8\u610f\u53ea\u80fd\u4e3a\u5f53\u524d\u9875\u8bf7\u6c42\u7126\u70b9\uff0c\u5426\u5219\u4f1a\u5bfc\u81f4\u610f\u60f3\u4e0d\u5230\u7684\u610f\u5916</p> <p>\u4f60\u8fd8\u53ef\u4ee5\u901a\u8fc7\u624b\u52bf\u63a7\u5236\u52a8\u6001\u5173\u95ed\u5b83\uff0c\u5982\u4e0b\uff1a</p> <pre><code>val zoomState: ZoomState by rememberSketchZoomState()\n\nzoomState.zoomable.disabledGestureTypes =\n    zoomState.zoomable.disabledGestureTypes or GestureType.KEYBOARD_SCALE\n\nSketchZoomAsyncImage(\n    uri = \"https://sample.com/sample.jpeg\",\n    contentDescription = \"view image\",\n    modifier = Modifier.fillMaxSize(),\n    zoomState = zoomState,\n)\n</code></pre>"},{"location":"zh/scale/#scale","title":"scale()","text":"<p>ZoomImage \u63d0\u4f9b\u4e86 scale() \u65b9\u6cd5\u7528\u6765\u7f29\u653e\u56fe\u50cf\u5230\u6307\u5b9a\u7684\u500d\u6570\uff0c\u5b83\u6709\u4e09\u4e2a\u53c2\u6570\uff1a</p> <ul> <li><code>targetScale: Float</code>: \u76ee\u6807\u7f29\u653e\u500d\u6570</li> <li><code>centroidContentPoint: IntOffset = contentVisibleRect.center</code>: content \u4e0a\u7684\u7f29\u653e\u4e2d\u5fc3\u70b9\uff0c\u539f\u70b9\u662f   content \u7684\u5de6\u4e0a\u89d2\uff0c \u9ed8\u8ba4\u662f content \u5f53\u524d\u53ef\u89c1\u533a\u57df\u7684\u4e2d\u5fc3</li> <li><code>animated: Boolean = false</code>: \u662f\u5426\u4f7f\u7528\u52a8\u753b\uff0c\u9ed8\u8ba4\u4e3a false</li> </ul> <p>[!TIP] \u6ce8\u610f\uff1acentroidContentPoint \u4e00\u5b9a\u8981\u662f content \u4e0a\u7684\u70b9</p> <p>\u793a\u4f8b\uff1a</p> <pre><code>val zoomState: ZoomState by rememberSketchZoomState()\n\nSketchZoomAsyncImage(\n    uri = \"https://sample.com/sample.jpeg\",\n    contentDescription = \"view image\",\n    modifier = Modifier.fillMaxSize(),\n    zoomState = zoomState,\n)\n\nval coroutineScope = rememberCoroutineScope()\nButton(\n    onClick = {\n        coroutineScope.launch {\n            zoomState.zoomable.scale(targetScale = 8f, animated = true)\n        }\n    }\n) {\n    Text(text = \"scale to 8f\")\n}\n\nButton(\n    onClick = {\n        coroutineScope.launch {\n            zoomState.zoomable.scale(targetScale = 4f, animated = true)\n        }\n    }\n) {\n    Text(text = \"scale to 4f\")\n}\n</code></pre>"},{"location":"zh/scale/#scaleby","title":"scaleBy()","text":"<p>ZoomImage \u63d0\u4f9b\u4e86 scaleBy() \u65b9\u6cd5\u7528\u6765\u4ee5\u4e58\u6cd5\u7684\u65b9\u5f0f\u589e\u91cf\u7f29\u653e\u56fe\u50cf\u5230\u6307\u5b9a\u7684\u500d\u6570\uff0c\u5b83\u6709\u4e09\u4e2a\u53c2\u6570\uff1a</p> <ul> <li><code>addScale: Float</code>: \u589e\u91cf\u7f29\u653e\u500d\u6570</li> <li><code>centroidContentPoint: IntOffset = contentVisibleRect.center</code>: content \u4e0a\u7684\u7f29\u653e\u4e2d\u5fc3\u70b9\uff0c\u539f\u70b9\u662f   content \u7684\u5de6\u4e0a\u89d2\uff0c \u9ed8\u8ba4\u662f content \u5f53\u524d\u53ef\u89c1\u533a\u57df\u7684\u4e2d\u5fc3</li> <li><code>animated: Boolean = false</code>: \u662f\u5426\u4f7f\u7528\u52a8\u753b\uff0c\u9ed8\u8ba4\u4e3a false</li> </ul> <p>[!TIP] \u6ce8\u610f\uff1acentroidContentPoint \u4e00\u5b9a\u8981\u662f content \u4e0a\u7684\u70b9</p> <p>\u793a\u4f8b\uff1a</p> <pre><code>val zoomState: ZoomState by rememberSketchZoomState()\n\nSketchZoomAsyncImage(\n    uri = \"https://sample.com/sample.jpeg\",\n    contentDescription = \"view image\",\n    modifier = Modifier.fillMaxSize(),\n    zoomState = zoomState,\n)\n\nval coroutineScope = rememberCoroutineScope()\nButton(\n    onClick = {\n        coroutineScope.launch {\n            zoomState.zoomable.scaleBy(addScale = 1.5f, animated = true)\n        }\n    }\n) {\n    Text(text = \"scale * 1.5\")\n}\n\nButton(\n    onClick = {\n        coroutineScope.launch {\n            zoomState.zoomable.scaleBy(addScale = 0.67f, animated = true)\n        }\n    }\n) {\n    Text(text = \"scale * 0.67\")\n}\n</code></pre>"},{"location":"zh/scale/#scalebyplus","title":"scaleByPlus()","text":"<p>ZoomImage \u63d0\u4f9b\u4e86 scaleByPlus() \u65b9\u6cd5\u7528\u6765\u4ee5\u52a0\u6cd5\u7684\u65b9\u5f0f\u7f29\u653e\u56fe\u50cf\u5230\u6307\u5b9a\u7684\u500d\u6570\uff0c\u5b83\u6709\u4e09\u4e2a\u53c2\u6570\uff1a</p> <ul> <li><code>addScale: Float</code>: \u589e\u91cf\u7f29\u653e\u500d\u6570</li> <li><code>centroidContentPoint: IntOffset = contentVisibleRect.center</code>: content \u4e0a\u7684\u7f29\u653e\u4e2d\u5fc3\u70b9\uff0c\u539f\u70b9\u662f   content \u7684\u5de6\u4e0a\u89d2\uff0c \u9ed8\u8ba4\u662f content \u5f53\u524d\u53ef\u89c1\u533a\u57df\u7684\u4e2d\u5fc3</li> <li><code>animated: Boolean = false</code>: \u662f\u5426\u4f7f\u7528\u52a8\u753b\uff0c\u9ed8\u8ba4\u4e3a false</li> </ul> <p>[!TIP] \u6ce8\u610f\uff1acentroidContentPoint \u4e00\u5b9a\u8981\u662f content \u4e0a\u7684\u70b9</p> <p>\u793a\u4f8b\uff1a</p> <pre><code>val zoomState: ZoomState by rememberSketchZoomState()\n\nSketchZoomAsyncImage(\n    uri = \"https://sample.com/sample.jpeg\",\n    contentDescription = \"view image\",\n    modifier = Modifier.fillMaxSize(),\n    zoomState = zoomState,\n)\n\nval coroutineScope = rememberCoroutineScope()\nButton(\n    onClick = {\n        coroutineScope.launch {\n            zoomState.zoomable.scaleByPlus(addScale = 0.2f, animated = true)\n        }\n    }\n) {\n    Text(text = \"scale + 0.2\")\n}\n\nButton(\n    onClick = {\n        coroutineScope.launch {\n            zoomState.zoomable.scaleByPlus(addScale = -0.2f, animated = true)\n        }\n    }\n) {\n    Text(text = \"scale - 0.2\")\n}\n</code></pre>"},{"location":"zh/scale/#_9","title":"\u6a61\u76ae\u7b4b\u6548\u679c","text":"<p>ZoomImage \u4f1a\u5c06\u7f29\u653e\u500d\u6570\u9650\u5236\u5728 <code>minScale</code> \u548c <code>maxScale</code>\u4e4b\u95f4\uff0c\u5355\u6307\u6216\u53cc\u6307\u7f29\u653e\u65f6\u5982\u679c\u8d85\u8fc7\u4e86\u8fd9\u4e2a\u8303\u56f4\u4f9d\u7136\u53ef\u4ee5\u7ee7\u7eed\u7f29\u653e\uff0c \u4f46\u4f1a\u6709\u7c7b\u4f3c\u6a61\u76ae\u7b4b\u7684\u963b\u5c3c\u6548\u679c\uff0c\u677e\u624b\u540e\u4f1a\u56de\u5f39\u5230 <code>minScale</code>\u6216 <code>maxScale</code> \uff0c\u6b64\u529f\u80fd\u9ed8\u8ba4\u5f00\u542f\uff0c\u4f60\u53ef\u901a\u8fc7 <code>rubberBandScale</code> \u5c5e\u6027\u5173\u95ed\u5b83</p> <p>\u793a\u4f8b\uff1a</p> <pre><code>val zoomState: ZoomState by rememberSketchZoomState()\n\nzoomState.zoomable.rubberBandScale = false\n\nSketchZoomAsyncImage(\n    uri = \"https://sample.com/sample.jpeg\",\n    contentDescription = \"view image\",\n    modifier = Modifier.fillMaxSize(),\n    zoomState = zoomState,\n)\n</code></pre>"},{"location":"zh/scale/#_10","title":"\u52a8\u753b","text":"<p>ZoomImage \u63d0\u4f9b\u4e86 <code>animationSpec</code> \u53c2\u6570\u7528\u6765\u4fee\u6539\u7f29\u653e\u52a8\u753b\u7684\u65f6\u957f\u3001Easing \u4ee5\u53ca\u521d\u59cb\u901f\u5ea6</p> <p>\u793a\u4f8b\uff1a</p> <pre><code>val zoomState: ZoomState by rememberSketchZoomState()\n\nzoomState.animationSpec = ZoomAnimationSpec(\n    durationMillis = 500,\n    easing = LinearOutSlowInEasing,\n    initialVelocity = 10f\n)\n\n// \u6216\u8005\u5728\u9ed8\u8ba4\u503c\u7684\u57fa\u7840\u4e0a\u4fee\u6539\u90e8\u5206\u53c2\u6570\nzoomState.animationSpec = ZoomAnimationSpec.Default.copy(durationMillis = 500)\n\nSketchZoomAsyncImage(\n    uri = \"https://sample.com/sample.jpeg\",\n    contentDescription = \"view image\",\n    modifier = Modifier.fillMaxSize(),\n    zoomState = zoomState,\n)\n</code></pre>"},{"location":"zh/scale/#_11","title":"\u53ef\u8bbf\u95ee\u5c5e\u6027","text":"<pre><code>// compose\nval zoomState: ZoomState by rememberSketchZoomState()\nSketchZoomAsyncImage(zoomState = zoomState)\nval zoomable: ZoomableState = zoomState.zoomable\n\n// view\nval sketchZoomImageView = SketchZoomImageView(context)\nval zoomable: ZoomableEngine = sketchZoomImageView.zoomable\n</code></pre> <p>[!TIP] * \u6ce8\u610f\uff1aview \u7248\u672c\u7684\u76f8\u5173\u5c5e\u6027\u7528 StateFlow \u5305\u88c5\uff0c\u6240\u4ee5\u5176\u540d\u5b57\u76f8\u6bd4 compose \u7248\u672c\u90fd\u4ee5 State \u4e3a\u540e\u7f00</p> <p>\u53ef\u4ee5\u8bfb\u53d6\u4e5f\u53ef\u4ee5\u8bbe\u7f6e\u7684\u5c5e\u6027:</p> <ul> <li><code>zoomable.contentScale: ContentScale</code>: content \u7684\u7f29\u653e\u65b9\u5f0f\uff0c\u9ed8\u8ba4\u662f ContentScale.Fit</li> <li><code>zoomable.alignment: Alignment</code>: content \u5728 container \u4e2d\u7684\u5bf9\u9f50\u65b9\u5f0f\uff0c\u9ed8\u8ba4\u662f Alignment.TopStart</li> <li><code>zoomable.layoutDirection: LayoutDirection</code>: container \u7684\u5e03\u5c40\u65b9\u5411\uff0c\u9ed8\u8ba4\u662f LayoutDirection.Ltr</li> <li><code>zoomable.readMode: ReadMode?</code>: \u9605\u8bfb\u6a21\u5f0f\u914d\u7f6e\uff0c\u9ed8\u8ba4\u662f null</li> <li><code>zoomable.scalesCalculator: ScalesCalculator</code>: minScale\u3001mediumScale \u548c maxScale \u8ba1\u7b97\u5668\uff0c\u9ed8\u8ba4\u662f   ScalesCalculator.Dynamic</li> <li><code>zoomable.threeStepScale: Boolean</code>: \u53cc\u51fb\u7f29\u653e\u65f6\u662f\u5426\u5728 minScale\u3001mediumScale \u548c maxScale \u4e4b\u95f4\u5faa\u73af\u7f29\u653e\uff0c\u9ed8\u8ba4\u662f   false</li> <li><code>zoomable.rubberBandScale: Boolean</code>: \u662f\u5426\u5f00\u542f\u6a61\u76ae\u7b4b\u6548\u679c\uff0c\u9ed8\u8ba4\u662f true</li> <li><code>zoomable.oneFingerScaleSpec: OneFingerScaleSpec</code>: \u5355\u6307\u7f29\u653e\u914d\u7f6e\uff0c\u9ed8\u8ba4\u662f OneFingerScaleSpec.Default</li> <li><code>zoomable.animationSpec: ZoomAnimationSpec</code>: \u7f29\u653e\u3001\u504f\u79fb\u7b49\u52a8\u753b\u914d\u7f6e\uff0c\u9ed8\u8ba4\u662f ZoomAnimationSpec.Default</li> <li><code>zoomable.limitOffsetWithinBaseVisibleRect: Boolean</code>: \u662f\u5426\u5c06\u504f\u79fb\u9650\u5236\u5728 contentBaseVisibleRect   \u5185\uff0c\u9ed8\u8ba4\u662f false</li> <li><code>zoomable.containerWhitespaceMultiple: Float</code>: \u57fa\u4e8e\u5bb9\u5668\u5c3a\u5bf8\u7684\u500d\u6570\u4e3a\u5bb9\u5668\u56db\u5468\u6dfb\u52a0\u7a7a\u767d\u533a\u57df\uff0c\u9ed8\u8ba4\u662f 0f</li> <li><code>zoomable.containerWhitespace: ContainerWhitespace</code>: \u5bb9\u5668\u56db\u5468\u7a7a\u767d\u533a\u57df\u7684\u914d\u7f6e\uff0c\u4f18\u5148\u7ea7\u9ad8\u4e8e   containerWhitespaceMultiple\uff0c\u9ed8\u8ba4\u662f ContainerWhitespace.Zero</li> <li><code>zoomable.keepTransformWhenSameAspectRatioContentSizeChanged: Boolean</code>: \u662f\u5426\u5728\u76f8\u540c\u5bbd\u9ad8\u6bd4\u7684   contentSize \u6539\u53d8\u65f6\u4fdd\u6301 transform \u4e0d\u53d8\uff0c\u9ed8\u8ba4\u662f false</li> <li><code>zoomable.disabledGestureTypes: Int</code>: \u914d\u7f6e\u7981\u7528\u7684\u624b\u52bf\u7c7b\u578b\uff0c\u9ed8\u8ba4\u662f 0\uff08\u4e0d\u7981\u7528\u4efb\u4f55\u624b\u52bf\uff09\uff0c\u53ef\u4ee5\u4f7f\u7528   GestureType \u7684\u4f4d\u6216\u64cd\u4f5c\u6765\u7ec4\u5408\u591a\u4e2a\u624b\u52bf\u7c7b\u578b</li> <li><code>zoomable.reverseMouseWheelScale: Boolean</code>: \u662f\u5426\u53cd\u8f6c\u9f20\u6807\u6eda\u8f6e\u7684\u65b9\u5411\uff0c\u9ed8\u8ba4\u662f false</li> <li><code>zoomable.mouseWheelScaleCalculator: MouseWheelScaleCalculator</code>: \u9f20\u6807\u6eda\u8f6e\u7f29\u653e\u8ba1\u7b97\u5668\uff0c\u9ed8\u8ba4\u662f   MouseWheelScaleCalculator.Default</li> </ul> <p>\u53ea\u80fd\u8bfb\u53d6\u7684\u5c5e\u6027\uff1a</p> <ul> <li><code>zoomable.containerSize: IntSize</code>: \u5f53\u524d container \u7684\u5927\u5c0f</li> <li><code>zoomable.contentSize: IntSize</code>: \u5f53\u524d content \u7684\u5927\u5c0f</li> <li><code>zoomable.contentOriginSize: IntSize</code>: \u5f53\u524d content \u7684\u539f\u59cb\u5927\u5c0f</li> <li><code>zoomable.transform.scale: ScaleFactor</code>: \u5f53\u524d\u7f29\u653e\u6bd4\u4f8b\uff08baseTransform.scale * userTransform.scale\uff09</li> <li><code>zoomable.baseTransform.scale: ScaleFactor</code>: \u5f53\u524d\u57fa\u7840\u7f29\u653e\u6bd4\u4f8b\uff0c\u53d7 contentScale \u548c alignment \u53c2\u6570\u5f71\u54cd</li> <li><code>zoomable.userTransform.scale: ScaleFactor</code>: \u5f53\u524d\u7528\u6237\u7f29\u653e\u6bd4\u4f8b\uff0c\u53d7 scale()\u3001locate() \u4ee5\u53ca\u7528\u6237\u624b\u52bf\u7f29\u653e\u3001\u53cc\u51fb\u7b49\u64cd\u4f5c\u5f71\u54cd</li> <li><code>zoomable.minScale: Float</code>: \u6700\u5c0f\u7f29\u653e\u6bd4\u4f8b\uff0c\u7528\u4e8e\u7f29\u653e\u65f6\u9650\u5236\u6700\u5c0f\u7f29\u653e\u6bd4\u4f8b\u4ee5\u53ca\u53cc\u51fb\u7f29\u653e\u65f6\u7684\u4e00\u4e2a\u5faa\u73af\u7f29\u653e\u6bd4\u4f8b</li> <li><code>zoomable.mediumScale: Float</code>: \u4e2d\u95f4\u7f29\u653e\u6bd4\u4f8b\uff0c\u7528\u4e8e\u53cc\u51fb\u7f29\u653e\u65f6\u7684\u4e00\u4e2a\u5faa\u73af\u7f29\u653e\u6bd4\u4f8b</li> <li><code>zoomable.maxScale: Float</code>: \u6700\u5927\u7f29\u653e\u6bd4\u4f8b\uff0c\u7528\u4e8e\u7f29\u653e\u65f6\u9650\u5236\u6700\u5927\u7f29\u653e\u6bd4\u4f8b\u4ee5\u53ca\u53cc\u51fb\u7f29\u653e\u65f6\u7684\u4e00\u4e2a\u5faa\u73af\u7f29\u653e\u6bd4\u4f8b</li> <li><code>zoomable.continuousTransformType: Int</code>: \u5f53\u524d\u6b63\u5728\u8fdb\u884c\u7684\u8fde\u7eed\u53d8\u6362\u7684\u7c7b\u578b</li> <li><code>zoomable.contentBaseDisplayRectF: Rect</code>: content \u7ecf\u8fc7 baseTransform \u53d8\u6362\u540e\u5728 container \u4e2d\u7684\u533a\u57df</li> <li><code>zoomable.contentBaseDisplayRect: IntRect</code>: content \u7ecf\u8fc7 baseTransform \u53d8\u6362\u540e\u5728 container \u4e2d\u7684\u533a\u57df</li> <li><code>zoomable.contentBaseVisibleRectF: Rect</code>: content \u7ecf\u8fc7 baseTransform \u53d8\u6362\u540e\u81ea\u8eab\u5bf9\u7528\u6237\u53ef\u89c1\u7684\u533a\u57df</li> <li><code>zoomable.contentBaseVisibleRect: IntRect</code>: content \u7ecf\u8fc7 baseTransform \u53d8\u6362\u540e\u81ea\u8eab\u5bf9\u7528\u6237\u53ef\u89c1\u7684\u533a\u57df</li> <li><code>zoomable.contentDisplayRectF: Rect</code>: content \u7ecf\u8fc7 transform \u53d8\u6362\u540e\u5728 container \u4e2d\u7684\u533a\u57df</li> <li><code>zoomable.contentDisplayRect: IntRect</code>: content \u7ecf\u8fc7 transform \u53d8\u6362\u540e\u5728 container \u4e2d\u7684\u533a\u57df</li> <li><code>zoomable.contentVisibleRectF: Rect</code>: content \u7ecf\u8fc7 transform \u53d8\u6362\u540e\u81ea\u8eab\u5bf9\u7528\u6237\u53ef\u89c1\u7684\u533a\u57df</li> <li><code>zoomable.contentVisibleRect: IntRect</code>: content \u7ecf\u8fc7 transform \u53d8\u6362\u540e\u81ea\u8eab\u5bf9\u7528\u6237\u53ef\u89c1\u7684\u533a\u57df</li> <li><code>zoomable.sourceScaleFactor: ScaleFactor</code>: \u4ee5\u539f\u56fe\u4e3a\u57fa\u51c6\u7684\u7f29\u653e\u6bd4\u4f8b</li> <li><code>zoomable.sourceVisibleRectF: Rect</code>: contentVisibleRect \u6620\u5c04\u5230\u539f\u56fe\u4e0a\u7684\u533a\u57df</li> <li><code>zoomable.sourceVisibleRect: IntRect</code>: contentVisibleRect \u6620\u5c04\u5230\u539f\u56fe\u4e0a\u7684\u533a\u57df</li> <li><code>zoomable.scrollEdge: ScrollEdge</code>: \u5f53\u524d\u504f\u79fb\u7684\u8fb9\u754c\u72b6\u6001</li> </ul> <p>\u53ef\u4ea4\u4e92\u7684\u65b9\u6cd5\uff1a</p> <ul> <li><code>zoomable.scale()</code>: \u7f29\u653e content \u5230\u6307\u5b9a\u7684\u500d\u6570</li> <li><code>zoomable.scaleBy()</code>: \u4ee5\u4e58\u6cd5\u7684\u65b9\u5f0f\u589e\u91cf\u7f29\u653e content \u6307\u5b9a\u7684\u500d\u6570</li> <li><code>zoomable.scaleByPlus()</code>: \u4ee5\u52a0\u6cd5\u7684\u65b9\u5f0f\u589e\u91cf\u7f29\u653e content \u6307\u5b9a\u7684\u500d\u6570</li> <li><code>zoomable.switchScale()</code>: \u5207\u6362 content \u7684\u7f29\u653e\u500d\u6570\uff0c\u9ed8\u8ba4\u5728 minScale \u548c mediumScale \u4e4b\u95f4\u5faa\u73af\uff0c \u5982\u679c   threeStepScale \u4e3a true \u5219\u5728 minScale\u3001mediumScale \u548c maxScale \u4e4b\u95f4\u5faa\u73af</li> <li><code>zoomable.offset()</code>: \u504f\u79fb content \u5230\u6307\u5b9a\u7684\u4f4d\u7f6e</li> <li><code>zoomable.offsetBy()</code>: \u4ee5\u589e\u91cf\u7684\u65b9\u5f0f\u504f\u79fb content \u6307\u5b9a\u7684\u504f\u79fb\u91cf</li> <li><code>zoomable.locate()</code>: \u5b9a\u4f4d\u5230 content \u4e0a\u7684\u6307\u5b9a\u4f4d\u7f6e\uff0c\u4e5f\u53ef\u4ee5\u7528\u65f6\u7f29\u653e\u5230\u6307\u5b9a\u500d\u6570</li> <li><code>zoomable.rotate()</code>: \u65cb\u8f6c content \u5230\u6307\u5b9a\u7684\u89d2\u5ea6\uff0c\u89d2\u5ea6\u53ea\u80fd\u662f 90 \u7684\u500d\u6570</li> <li><code>zoomable.rotateBy()</code>: \u4ee5\u589e\u91cf\u7684\u65b9\u5f0f\u65cb\u8f6c content \u6307\u5b9a\u7684\u89d2\u5ea6\uff0c\u89d2\u5ea6\u53ea\u80fd\u662f 90 \u7684\u500d\u6570</li> <li><code>zoomable.getNextStepScale(): Float</code>: \u83b7\u53d6\u4e0b\u4e00\u4e2a\u7f29\u653e\u500d\u6570\uff0c\u9ed8\u8ba4\u5728 minScale \u548c mediumScale \u4e4b\u95f4\u5faa\u73af\uff0c   \u5982\u679c threeStepScale \u4e3a true \u5219\u5728 minScale\u3001mediumScale \u548c maxScale \u4e4b\u95f4\u5faa\u73af</li> <li><code>zoomable.touchPointToContentPoint(): IntOffset</code>: \u5c06\u89e6\u6478\u70b9\u8f6c\u6362\u4e3a content \u4e0a\u7684\u70b9\uff0c\u539f\u70b9\u662f content   \u7684\u5de6\u4e0a\u89d2</li> <li><code>zoomable.touchPointToContentPointF(): Offset</code>: \u5c06\u89e6\u6478\u70b9\u8f6c\u6362\u4e3a content \u4e0a\u7684\u70b9\uff0c\u539f\u70b9\u662f content \u7684\u5de6\u4e0a\u89d2</li> <li><code>zoomable.sourceToDraw(Offset): Offset</code>: \u5c06\u539f\u56fe\u4e0a\u7684\u70b9\u8f6c\u6362\u4e3a\u7ed8\u5236\u65f6\u7684\u70b9\uff0c\u539f\u70b9\u662f container \u7684\u5de6\u4e0a\u89d2</li> <li><code>zoomable.sourceToDraw(Rect): Rect</code>: \u5c06\u539f\u56fe\u4e0a\u7684\u77e9\u5f62\u8f6c\u6362\u4e3a\u7ed8\u5236\u65f6\u7684\u77e9\u5f62\uff0c\u539f\u70b9\u662f container \u7684\u5de6\u4e0a\u89d2</li> <li><code>zoomable.canScroll(): Boolean</code>: \u5224\u65ad\u5f53\u524d content \u5728\u6307\u5b9a\u65b9\u5411\u4e0a\u662f\u5426\u53ef\u4ee5\u6eda\u52a8</li> </ul>"},{"location":"zh/scale/#_12","title":"\u76d1\u542c\u5c5e\u6027\u53d8\u5316","text":"<ul> <li>compose \u7248\u672c\u7684\u76f8\u5173\u5c5e\u6027\u662f\u7528 State \u5305\u88c5\u7684\uff0c\u5728 Composable \u51fd\u6570\u4e2d\u76f4\u63a5\u8bfb\u53d6\u5b83\u5373\u53ef\u5b9e\u73b0\u76d1\u542c</li> <li>view \u7684\u76f8\u5173\u5c5e\u6027\u662f\u7528 StateFlow \u5305\u88c5\uff0c\u8c03\u7528\u5176 collect \u51fd\u6570\u5373\u53ef\u5b9e\u73b0\u76d1\u542c</li> </ul>"},{"location":"zh/scrollbar/#_1","title":"\u6eda\u52a8\u6761","text":"<p>\u7ffb\u8bd1\uff1aEnglish</p> <p>[!TIP] * \u4ee5\u4e0b\u793a\u4f8b\u4f18\u5148\u7528 Compose \u7248\u672c\u7684\u7ec4\u4ef6\u6765\u6f14\u793a * ZoomState.zoomable \u7b49\u4ef7\u4e8e ZoomImageView.zoomable * ZoomState.subsampling \u7b49\u4ef7\u4e8e ZoomImageView.subsampling</p> <p>ZoomImage \u652f\u6301\u663e\u793a\u6eda\u52a8\u6761\uff0c\u6eda\u52a8\u6761\u53ef\u4ee5\u660e\u786e\u7684\u544a\u77e5\u7528\u6237\u5f53\u524d\u7684\u4f4d\u7f6e\uff0c\u8fd8\u6709\u591a\u8fdc\u8ddd\u79bb\u5230\u8fbe\u5e95\u90e8\u6216\u9876\u90e8\u3002\u6eda\u52a8\u6761\u4f1a\u5728\u65e0\u64cd\u4f5c 800 \u6beb\u79d2\u540e\u81ea\u52a8\u9690\u85cf\uff0c\u5f53\u7528\u6237\u518d\u6b21\u64cd\u4f5c\u65f6\u4f1a\u81ea\u52a8\u663e\u793a</p>"},{"location":"zh/scrollbar/#_2","title":"\u914d\u7f6e","text":"<p>ScrollBarSpec \u7528\u6765\u63cf\u8ff0\u6eda\u52a8\u6761\u7684\u6837\u5f0f\uff0c\u6709\u4e09\u4e2a\u53c2\u6570\uff1a</p> <ul> <li><code>color: Color = Color(0xB2888888)</code>: \u6eda\u52a8\u6761\u7684\u989c\u8272\uff0c\u9ed8\u8ba4\u4e3a\u7070\u8272\u3002</li> <li><code>size: Dp = 3.dp</code>: \u6eda\u52a8\u6761\u7684\u5c3a\u5bf8\uff0c\u9ed8\u8ba4\u4e3a 3 dp\u3002\u6a2a\u5411\u6eda\u52a8\u6761\u65f6\u4e3a\u9ad8\u5ea6\uff0c\u7eb5\u5411\u6eda\u52a8\u6761\u65f6\u4e3a\u5bbd\u5ea6\u3002</li> <li><code>margin: Dp = 6.dp</code>: \u6eda\u52a8\u6761\u5230\u8fb9\u7f18\u7684\u8ddd\u79bb\uff0c\u9ed8\u8ba4\u4e3a 6 dp\u3002</li> </ul> <p>compose:</p> <pre><code>val scrollBar = remember {\n    ScrollBarSpec(\n        color = androidx.compose.ui.graphics.Color.Red,\n        size = 6.dp,\n        margin = 12.dp,\n    )\n}\nSketchZoomAsyncImage(\n    uri = \"https://sample.com/sample.jpeg\",\n    contentDescription = \"view image\",\n    modifier = Modifier.fillMaxSize(),\n    scrollBar = scrollBar,\n)\n</code></pre> <p>view:</p> <pre><code>val sketchImageView = SketchZoomImageView(context)\nsketchImageView.scrollBar = ScrollBarSpec(\n    color = androidx.compose.ui.graphics.Color.Red,\n    size = 6.dp,\n    margin = 12.dp,\n)\n</code></pre>"},{"location":"zh/scrollbar/#_3","title":"\u5173\u95ed\u6eda\u52a8\u6761","text":"<p>ZoomImage \u9ed8\u8ba4\u663e\u793a\u6eda\u52a8\u6761\uff0c\u4f60\u53ef\u4ee5\u5173\u95ed\u5b83</p> <p>compose:</p> <pre><code>SketchZoomAsyncImage(\n    uri = \"https://sample.com/sample.jpeg\",\n    contentDescription = \"view image\",\n    modifier = Modifier.fillMaxSize(),\n    scrollBar = null,\n)\n</code></pre> <p>view:</p> <pre><code>val sketchImageView = SketchZoomImageView(context)\nsketchImageView.scrollBar = null\n</code></pre>"},{"location":"zh/subsampling/#_1","title":"\u5b50\u91c7\u6837","text":"<p>\u7ffb\u8bd1\uff1aEnglish</p> <p>[!TIP] * \u4ee5\u4e0b\u793a\u4f8b\u4f18\u5148\u7528 Compose \u7248\u672c\u7684\u7ec4\u4ef6\u6765\u6f14\u793a * ZoomState.zoomable \u7b49\u4ef7\u4e8e ZoomImageView.zoomable * ZoomState.subsampling \u7b49\u4ef7\u4e8e ZoomImageView.subsampling</p> <p>\u6709\u4e00\u4e9b\u56fe\u7247\u7684\u5c3a\u5bf8\u5de8\u5927\uff0c\u5982\u679c\u628a\u5b83\u4eec\u5b8c\u6574\u7684\u8bfb\u5230\u5185\u5b58\u4f1a\u8ba9 App \u56e0\u5185\u5b58\u4e0d\u8db3\u800c\u5d29\u6e83\uff0c\u56fe\u7247\u52a0\u8f7d\u6846\u67b6\u901a\u5e38\u4f1a\u91c7\u6837\u540e\u518d\u52a0\u8f7d\uff0c\u8fd9\u65f6\u56fe\u7247\u7684\u5c3a\u5bf8\u4f1a\u53d8\u5c0f\uff0c\u4f46\u662f\u56fe\u7247\u7684\u5185\u5bb9\u4e5f\u4f1a\u53d8\u7684\u6a21\u7cca\u4e0d\u6e05</p> <p>\u6240\u4ee5\u5c31\u9700\u8981 ZoomImage \u5728\u7f29\u653e\u65f6\u80fd\u591f\u652f\u6301\u5b50\u91c7\u6837\uff0c\u7528\u6237\u6ed1\u52a8\u5230\u54ea\u91cc\u5c31\u5bf9\u54ea\u91cc\u8fdb\u884c\u5b50\u91c7\u6837\uff0c\u7136\u540e\u5c06\u6e05\u6670\u7684\u539f\u56fe\u56fe\u5757\u663e\u793a\u5230\u5c4f\u5e55\u4e0a\uff0c \u8fd9\u6837\u5c31\u80fd\u591f\u5728\u7f29\u653e\u65f6\u65e2\u663e\u793a\u6e05\u6670\u7684\u56fe\u7247\uff0c\u53c8\u4e0d\u4f1a\u8ba9 App \u5d29\u6e83</p>"},{"location":"zh/subsampling/#_2","title":"\u7279\u70b9","text":"<ul> <li>Exif Orientation. \u652f\u6301\u8bfb\u53d6\u56fe\u7247\u7684 Exif Orientation \u4fe1\u606f\uff0c\u7136\u540e\u65cb\u8f6c\u56fe\u7247</li> <li>\u52a8\u753b. \u5728\u663e\u793a Tile \u7684\u65f6\u5019\u652f\u6301\u900f\u660e\u5ea6\u52a8\u753b\uff0c\u8fc7\u6e21\u66f4\u81ea\u7136</li> <li>\u80cc\u666f\u56fe\u5feb. \u5207\u6362 sampleSize \u65f6\u56fe\u7247\u6e05\u6670\u5ea6\u9010\u7ea7\u53d8\u5316\uff0c\u8fc7\u6e21\u66f4\u81ea\u7136</li> <li>\u6682\u505c\u52a0\u8f7d\u56fe\u5757. \u8fde\u7eed\u53d8\u6362\u65f6\u6682\u505c\u52a0\u8f7d\u56fe\u5757\uff0c\u63d0\u9ad8\u6027\u80fd</li> <li>\u4e0d\u53ef\u89c1\u65f6\u505c\u6b62\u52a0\u8f7d\u56fe\u5757. \u76d1\u542c Lifecycle\uff0c\u5728 stop \u65f6\u505c\u6b62\u52a0\u8f7d\u56fe\u5757\u5e76\u91ca\u653e\u5df2\u52a0\u8f7d\u7684\u56fe\u5757\uff0c\u63d0\u9ad8\u6027\u80fd</li> <li>\u5185\u5b58\u7f13\u5b58. \u907f\u514d\u91cd\u590d\u89e3\u7801\uff0c\u63d0\u9ad8\u6027\u80fd</li> <li>\u53ef\u8bbf\u95ee\u5c5e\u6027. \u53ef\u4ee5\u8bfb\u53d6\u91c7\u6837\u5927\u5c0f\u3001\u56fe\u7247\u4fe1\u606f\u3001\u56fe\u5757\u5217\u8868\u7b49\u4fe1\u606f</li> </ul>"},{"location":"zh/subsampling/#_3","title":"\u524d\u7f6e\u6761\u4ef6","text":"<p>\u4ec0\u4e48\u60c5\u51b5\u4e0b\u624d\u4f1a\u5f00\u542f\u5b50\u91c7\u6837\u529f\u80fd\uff1f</p> <ul> <li>contentSize \u6bd4 contentOriginSize \u5c0f</li> <li>contentSize \u548c contentOriginSize \u7684\u8fb9\u7684\u7f29\u653e\u500d\u6570\u76f8\u5dee\u4e0d\u8d85\u8fc7 1f</li> <li>Android \u4e0a\u5fc5\u987b\u662f BitmapRegionDecoder \u652f\u6301\u7684\u7c7b\u578b\uff0c\u975e Android \u5e73\u53f0\u4e0d\u662f GIF \u5c31\u53ef\u4ee5</li> </ul>"},{"location":"zh/subsampling/#_4","title":"\u4f7f\u7528\u5b50\u91c7\u6837\u529f\u80fd","text":"<p>\u96c6\u6210\u4e86\u56fe\u7247\u52a0\u8f7d\u5e93\u7684\u7ec4\u4ef6\u65e0\u9700\u4efb\u4f55\u989d\u5916\u7684\u5de5\u4f5c\u5373\u53ef\u4f7f\u7528\u5b50\u91c7\u6837\u529f\u80fd</p> <p>ZoomImage \u548c ZoomImageView \u6ca1\u6709\u96c6\u6210\u56fe\u7247\u52a0\u8f7d\u5e93\uff0c\u9700\u8981\u989d\u5916\u8c03\u7528 <code>setSubsamplingImage()</code> \u65b9\u6cd5\u4ee5\u4f7f\u7528\u5b50\u91c7\u6837\u529f\u80fd</p> <p>\u793a\u4f8b\uff1a</p> <pre><code>val zoomState: ZoomState by rememberZoomState()\nval imageSource = remember {\n    val resUri = Res.getUri(\"files/huge_world.jpeg\")\n    ImageSource.fromComposeResource(resUri)\n}\nzoomState.setSubsamplingImage(imageSource)\nZoomImage(\n    painter = painterResource(Res.drawable.huge_world_thumbnail),\n    contentDescription = \"view image\",\n    modifier = Modifier.fillMaxSize(),\n    zoomState = zoomState,\n)\n</code></pre> <p>view:</p> <pre><code>val zoomImageView = ZoomImageView(context)\nzoomImageView.setImageResource(R.drawable.huge_world_thumbnail)\nval imageSource = ImageSource.fromResource(context, R.raw.huge_world)\nzoomImageView.setSubsamplingImage(imageSource)\n</code></pre>"},{"location":"zh/subsampling/#imagesource","title":"ImageSource","text":"<p>ImageSource \u8d1f\u8d23\u4e3a ZoomImage \u63d0\u4f9b\u56fe\u7247\u7684\u6570\u636e\u7528\u4e8e\u89e3\u7801\uff0cZoomImage \u63d0\u4f9b\u4e86\u591a\u79cd ImageSource \u7684\u5b9e\u73b0\uff0c\u4ee5\u652f\u6301\u4ece\u5404\u79cd\u6765\u6e90\u52a0\u8f7d\u56fe\u7247\uff0c\u5982\u4e0b\uff1a</p> <ul> <li>AssetImageSource\uff1a\u4ece Android \u7684 assets \u76ee\u5f55\u52a0\u8f7d\u56fe\u7247\u3002ImageSource.fromAsset(context, \"   huge_world.jpeg\")</li> <li>ByteArrayImageSource\uff1a\u4ece ByteArray   \u52a0\u8f7d\u56fe\u7247\u3002ImageSource.fromByteArray(byteArray)</li> <li>ComposeResourceImageSource\uff1a\u4ece Compose \u7684\u8d44\u6e90\u76ee\u5f55\u52a0\u8f7d\u56fe\u7247\u3002ImageSource.fromComposeResource(   Res.getUri(\"files/huge_world.jpeg\"))</li> <li>ContentImageSource\uff1a\u4ece Android \u7684 ContentProvider \u52a0\u8f7d\u56fe\u7247\u3002ImageSource.fromContent(context,   contentUri)</li> <li>FileImageSource\uff1a\u4ece\u6587\u4ef6\u52a0\u8f7d\u56fe\u7247\u3002ImageSource.fromFile(file)</li> <li>KotlinResourceImageSource\uff1a\u4ece\u684c\u9762\u6216 ios \u5e73\u53f0\u7684 Kotlin   \u8d44\u6e90\u76ee\u5f55\u52a0\u8f7d\u56fe\u7247\u3002ImageSource.fromKotlinResource(\"huge_world.jpeg\")</li> <li>ResourceImageSource\uff1a\u4ece Android \u7684 res \u76ee\u5f55\u52a0\u8f7d\u56fe\u7247\u3002ImageSource.fromResource(context,   R.raw.huge_world)</li> </ul>"},{"location":"zh/subsampling/#subsamplingimagegenerator","title":"*SubsamplingImageGenerator","text":"<p>Sketch\u3001Coil\u3001Glide\u3001Picasso \u7cfb\u5217\u7684\u7ec4\u4ef6\u5728\u56fe\u7247\u52a0\u8f7d\u6210\u529f\u540e\u90fd\u8981\u6839\u636e data \u6216 uri \u521b\u5efa SubsamplingImage \u4ee5\u652f\u6301\u5b50\u91c7\u6837\u529f\u80fd\uff0c\u5b83\u4eec\u90fd\u6709\u5176\u9ed8\u8ba4\u7684 SubsamplingImageGenerator \u5b9e\u73b0</p> <p>\u5982\u679c\u9ed8\u8ba4\u7684\u5b9e\u73b0\u5728\u521b\u5efa SubsamplingImage \u65f6\u65e0\u6cd5\u6b63\u786e\u7684\u5c06 model \u6216 data \u8f6c\u6362\u4e3a ImageSource \u6216\u4f60\u9700\u8981\u62e6\u622a\u521b\u5efa\u8fc7\u7a0b\uff0c\u90a3\u4e48\u4f60\u53ef\u4ee5\u81ea\u5b9a\u4e49\u4e00\u4e2a SubsamplingImageGenerator \u5e76\u5e94\u7528\u5b83\uff0c\u4e0b\u9762\u4ee5 Sketch \u7ec4\u4ef6\u4e3a\u4f8b\uff0c\u5176\u5b83\u7ec4\u4ef6\u5927\u540c\u5c0f\u5f02\uff1a</p> <pre><code>class MySketchComposeSubsamplingImageGenerator : SketchComposeSubsamplingImageGenerator {\n\n    override fun generateImage(\n        sketch: Sketch,\n        request: ImageRequest,\n        result: ImageResult.Success,\n        painter: Painter\n    ): SubsamplingImageGenerateResult? {\n        // \u6761\u4ef6\u4e0d\u6ee1\u8db3\u8df3\u8fc7\u5f53\u524d SubsamplingImageGenerator\n        if (true) {\n            return null\n        }\n\n        // \u6761\u4ef6\u4e0d\u6ee1\u8db3\u751f\u6210\u5931\u8d25\uff0c\u8fd4\u56de\u5931\u8d25\u7ed3\u679c\n        if (true) {\n            return SubsamplingImageGenerateResult.Error(\"message\")\n        }\n\n        // \u6210\u529f\n        val imageSource: ImageSource = ...\n        val imageInfo: ImageInfo = ...\n        val subsamplingImage = SubsamplingImage(imageSource, imageInfo)\n        return SubsamplingImageGenerateResult.Success(subsamplingImage)\n    }\n\n    override fun equals(other: Any?): Boolean {\n        if (this === other) return true\n        return other != null &amp;&amp; this::class == other::class\n    }\n\n    override fun hashCode(): Int {\n        return this::class.hashCode()\n    }\n\n    override fun toString(): String {\n        return \"MySketchComposeSubsamplingImageGenerator\"\n    }\n}\n\nval subsamplingImageGenerators =\n    remember { listOf(MySketchComposeSubsamplingImageGenerator()).toImmutableList() }\nval sketchZoomState = rememberSketchZoomState(subsamplingImageGenerators)\nSketchAsyncZoomImage(\n    zoomState = sketchZoomState,\n    ...\n)\n\n\nclass MySketchViewSubsamplingImageGenerator : SketchViewSubsamplingImageGenerator {\n\n    override fun generateImage(\n        sketch: Sketch,\n        request: ImageRequest,\n        result: ImageResult.Success,\n        drawable: Drawable\n    ): SubsamplingImageGenerateResult? {\n        // \u6761\u4ef6\u4e0d\u6ee1\u8db3\u8df3\u8fc7\u5f53\u524d SubsamplingImageGenerator\n        if (true) {\n            return null\n        }\n\n        // \u6761\u4ef6\u4e0d\u6ee1\u8db3\u751f\u6210\u5931\u8d25\uff0c\u8fd4\u56de\u5931\u8d25\u7ed3\u679c\n        if (true) {\n            return SubsamplingImageGenerateResult.Error(\"message\")\n        }\n\n        // \u6210\u529f\n        val imageSource: ImageSource = ...\n        val imageInfo: ImageInfo = ...\n        val subsamplingImage = SubsamplingImage(imageSource, imageInfo)\n        return SubsamplingImageGenerateResult.Success(subsamplingImage)\n    }\n\n    override fun equals(other: Any?): Boolean {\n        if (this === other) return true\n        return other != null &amp;&amp; this::class == other::class\n    }\n\n    override fun hashCode(): Int {\n        return this::class.hashCode()\n    }\n\n    override fun toString(): String {\n        return \"MySketchViewSubsamplingImageGenerator\"\n    }\n}\n\nval sketchZoomImageView = SketchZoomImageView(context)\nsketchZoomImageView.setSubsamplingImageGenerators(MySketchViewSubsamplingImageGenerator())\n</code></pre> <p>[!TIP] \u5982\u679c\u4f60\u81ea\u5b9a\u4e49\u4e86 mode \u6216 data\uff0c\u90a3\u4e48\u4f60\u5fc5\u9700\u8981\u81ea\u5b9a\u4e49\u4e00\u4e2a SubsamplingImageGenerator \u5e76\u5e94\u7528\u5b83\uff0c\u5426\u5219\u5c06\u65e0\u6cd5\u4f7f\u7528\u5b50\u91c7\u6837\u529f\u80fd</p>"},{"location":"zh/subsampling/#exif-orientation","title":"Exif Orientation","text":"<p>ZoomImage \u9ed8\u8ba4\u4f1a\u8bfb\u53d6\u56fe\u7247\u7684 Exif Orientation \u4fe1\u606f\uff0c\u7136\u540e\u65cb\u8f6c\u56fe\u7247\uff0c\u4f60\u4e0d\u80fd\u7981\u7528\u5b83</p>"},{"location":"zh/subsampling/#_5","title":"\u56fe\u5757\u52a8\u753b","text":"<p>ZoomImage \u5728\u663e\u793a Tile \u7684\u65f6\u5019\u652f\u6301\u900f\u660e\u5ea6\u52a8\u753b\uff0c\u9ed8\u8ba4\u5f00\u542f\u52a8\u753b\uff0c\u6301\u7eed\u65f6\u95f4 200 \u6beb\u79d2\uff0c\u5237\u65b0\u95f4\u9694 8 \u6beb\u79d2\uff0c\u4f60\u53ef\u4ee5\u901a\u8fc7 <code>tileAnimationSpec</code> \u53c2\u6570\u6765\u5173\u95ed\u52a8\u753b\u6216\u4fee\u6539\u52a8\u753b\u7684\u6301\u7eed\u65f6\u95f4\u548c\u5237\u65b0\u95f4\u9694</p> <p>\u793a\u4f8b\uff1a</p> <pre><code>val zoomState: ZoomState by rememberSketchZoomState()\n\n// \u5173\u95ed\u52a8\u753b\nzoomState.subsampling.tileAnimationSpec = TileAnimationSpec.None\n\n// \u4fee\u6539\u52a8\u753b\u7684\u6301\u7eed\u65f6\u95f4\u548c\u5237\u65b0\u95f4\u9694\nzoomState.subsampling.tileAnimationSpec = TileAnimationSpec(duration = 400, interval = 16)\n\nSketchZoomAsyncImage(\n    uri = \"https://sample.com/sample.jpeg\",\n    contentDescription = \"view image\",\n    modifier = Modifier.fillMaxSize(),\n    zoomState = zoomState,\n)\n</code></pre>"},{"location":"zh/subsampling/#_6","title":"\u6682\u505c\u52a0\u8f7d\u56fe\u5757","text":"<p>ZoomImage \u5c06\u8fde\u7eed\u53d8\u6362\u884c\u4e3a\u5206\u4e3a <code>SCALE</code>, <code>OFFSET</code>, <code>LOCATE</code>, <code>GESTURE</code>, <code>FLING</code> \u4e94\u79cd\u7c7b\u578b\uff0c\u652f\u6301\u914d\u7f6e\u6307\u5b9a\u7c7b\u578b\u7684\u8fde\u7eed\u53d8\u6362\u6682\u505c\u52a0\u8f7d\u56fe\u5757\uff0c\u8fd9\u6837\u53ef\u4ee5\u63d0\u9ad8\u6027\u80fd</p> <p>ZoomImage \u5728\u517c\u987e\u6027\u80fd\u548c\u4f53\u9a8c\u7684\u60c5\u51b5\u9ed8\u8ba4\u914d\u7f6e\u662f <code>SCALE</code>, <code>OFFSET</code>, <code>LOCATE</code> \u4e09\u79cd\u7c7b\u578b\u7684\u8fde\u7eed\u53d8\u6362\u4f1a\u6682\u505c\u52a0\u8f7d\u56fe\u5757\uff0c<code>GESTURE</code>, <code>FLING</code> \u4e24\u79cd\u7c7b\u578b\u4f1a\u5b9e\u65f6\u52a0\u8f7d\u56fe\u5757\uff0c \u4f60\u53ef\u4ee5\u901a\u8fc7 <code>pausedContinuousTransformTypes</code> \u5c5e\u6027\u6765\u914d\u7f6e\u5b83</p> <p>\u793a\u4f8b\uff1a</p> <pre><code>val zoomState: ZoomState by rememberSketchZoomState()\n\n// \u6240\u6709\u8fde\u7eed\u53d8\u6362\u7c7b\u578b\u90fd\u5b9e\u65f6\u52a0\u8f7d\u56fe\u5757\nzoomState.subsampling.pausedContinuousTransformTypes = 0\n\n// \u6240\u6709\u8fde\u7eed\u53d8\u6362\u7c7b\u578b\u90fd\u6682\u505c\u52a0\u8f7d\u56fe\u5757\nzoomState.subsampling.pausedContinuousTransformTypes =\n    TileManager.DefaultPausedContinuousTransformType or ContinuousTransformType.GESTURE or ContinuousTransformType.FLING\n\nSketchZoomAsyncImage(\n    uri = \"https://sample.com/sample.jpeg\",\n    contentDescription = \"view image\",\n    modifier = Modifier.fillMaxSize(),\n    zoomState = zoomState,\n)\n</code></pre>"},{"location":"zh/subsampling/#_7","title":"\u505c\u6b62\u52a0\u8f7d\u56fe\u5757","text":"<p>ZoomImage \u652f\u6301\u505c\u6b62\u5b50\u91c7\u6837\uff0c\u505c\u6b62\u540e\u4f1a\u91ca\u653e\u5df2\u52a0\u8f7d\u7684\u56fe\u5757\u5e76\u4e0d\u518d\u52a0\u8f7d\u65b0\u56fe\u5757\uff0c\u91cd\u542f\u540e\u81ea\u52a8\u91cd\u65b0\u52a0\u8f7d\u56fe\u5757\uff0c \u4f60\u53ef\u4ee5\u901a\u8fc7 <code>stopped</code> \u5c5e\u6027\u6765\u914d\u7f6e\u5b83</p> <p>\u793a\u4f8b\uff1a</p> <pre><code>val zoomState: ZoomState by rememberSketchZoomState()\n\n// stop\nzoomState.subsampling.stopped = true\n// restart\nzoomState.subsampling.stopped = false\n\nSketchZoomAsyncImage(\n    uri = \"https://sample.com/sample.jpeg\",\n    contentDescription = \"view image\",\n    modifier = Modifier.fillMaxSize(),\n    zoomState = zoomState,\n)\n</code></pre>"},{"location":"zh/subsampling/#lifecycle","title":"Lifecycle","text":"<p>ZoomImage \u9ed8\u8ba4\u4f1a\u81ea\u52a8\u83b7\u53d6\u6700\u8fd1\u7684 Lifecycle \u7136\u540e\u76d1\u542c\u5b83\u7684\u72b6\u6001\uff0c\u5728 Lifecycle stop \u6216 start \u65f6\u505c\u6b62\u6216\u91cd\u542f\u5b50\u91c7\u6837</p> <p>\u5728 View \u4e2d\u901a\u8fc7 View.findViewTreeLifecycleOwner() API \u83b7\u53d6\u5230\u6700\u8fd1\u7684 Lifecycle\uff1b\u5728 Compose \u901a\u8fc7 LocalLifecycleOwner.current API \u83b7\u53d6 Lifecycle</p> <p>\u5982\u679c\u4f60\u4e0d\u9700\u8981\u6b64\u529f\u80fd\u53ef\u4ee5\u901a\u8fc7 <code>disabledAutoStopWithLifecycle</code> \u5c5e\u6027\u5173\u95ed\u5b83\uff0c\u5982\u4e0b\uff1a</p> <pre><code>val zoomState: ZoomState by rememberSketchZoomState()\n\nzoomState.subsampling.disabledAutoStopWithLifecycle = true\n\nSketchZoomAsyncImage(\n    uri = \"https://sample.com/sample.jpeg\",\n    contentDescription = \"view image\",\n    modifier = Modifier.fillMaxSize(),\n    zoomState = zoomState,\n)\n</code></pre>"},{"location":"zh/subsampling/#_8","title":"\u80cc\u666f\u56fe\u5757","text":"<p>ZoomImage \u901a\u8fc7\u80cc\u666f\u56fe\u5757\u5b9e\u73b0\u4e86\u5728\u5207\u6362 sampleSize \u65f6\u968f\u7740 sampleSize \u7684\u53d8\u5316\u56fe\u7247\u6e05\u6670\u5ea6\u4e5f\u9010\u7ea7\u53d8\u5316\u7684\u6548\u679c\uff0c\u5e76\u4e14\u5728\u52a0\u8f7d\u65b0\u56fe\u5757\u7684\u8fc7\u7a0b\u4e2d\u4e5f\u4e0d\u4f1a\u9732\u51fa\u5e95\u56fe\uff0c\u8fd9\u6837\u5c31\u4fdd\u8bc1\u4e86\u6e05\u6670\u5ea6\u53d8\u5316\u7684\u8fde\u7eed\u6027\uff0c\u7528\u6237\u4f53\u9a8c\u66f4\u597d</p> <p>\u4f46\u662f\u6b64\u529f\u80fd\u4f7f\u7528\u4e86\u66f4\u591a\u7684\u5185\u5b58\uff0c\u5728\u6027\u80fd\u8f83\u5dee\u7684\u8bbe\u5907\u4e0a\u53ef\u80fd\u4f1a\u5bf9\u6d41\u7545\u6027\u6709\u5f71\u54cd\uff0c\u6b64\u529f\u80fd\u9ed8\u8ba4\u5f00\u542f\uff0c\u4f60\u53ef\u4ee5\u901a\u8fc7 <code>disabledBackgroundTiles</code> \u5c5e\u6027\u5173\u95ed\u5b83</p> <p>\u793a\u4f8b\uff1a</p> <pre><code>val zoomState: ZoomState by rememberSketchZoomState()\n\nzoomState.subsampling.disabledBackgroundTiles = true\n\nSketchZoomAsyncImage(\n    uri = \"https://sample.com/sample.jpeg\",\n    contentDescription = \"view image\",\n    modifier = Modifier.fillMaxSize(),\n    zoomState = zoomState,\n)\n</code></pre>"},{"location":"zh/subsampling/#_9","title":"\u5185\u5b58\u7f13\u5b58","text":"<p>\u5b50\u91c7\u6837\u529f\u80fd\u652f\u6301\u5185\u5b58\u7f13\u5b58\uff0c\u53ef\u4ee5\u5c06 Bitmap \u7f13\u5b58\u5728\u5185\u5b58\u4e2d\uff0c\u8fd9\u6837\u53ef\u4ee5\u907f\u514d\u91cd\u590d\u89e3\u7801\uff0c\u63d0\u9ad8\u6027\u80fd</p> <p>\u96c6\u6210\u4e86\u56fe\u7247\u52a0\u8f7d\u5e93\u7684\u7ec4\u4ef6\u65e0\u9700\u4efb\u4f55\u989d\u5916\u7684\u5de5\u4f5c\u5373\u53ef\u4f7f\u7528\u5185\u5b58\u7f13\u5b58\u529f\u80fd\uff0c\u800c\u6ca1\u6709\u96c6\u6210\u56fe\u7247\u52a0\u8f7d\u5e93\u7684\u7ec4\u4ef6\u9700\u8981\u5148\u5b9e\u73b0\u81ea\u5df1\u7684 TileImageCache \u7136\u540e\u8bbe\u7f6e <code>tileImageCache</code> \u5c5e\u6027\u624d\u80fd\u4f7f\u7528\u5185\u5b58\u7f13\u5b58\u529f\u80fd</p> <p>\u793a\u4f8b\uff1a</p> <pre><code>val zoomState: ZoomState by rememberSketchZoomState()\n\nzoomState.subsampling.tileImageCache = remember { MyTileImageCache() }\n\nSketchZoomAsyncImage(\n    uri = \"https://sample.com/sample.jpeg\",\n    contentDescription = \"view image\",\n    modifier = Modifier.fillMaxSize(),\n    zoomState = zoomState,\n)\n</code></pre> <p>\u8bbe\u7f6e\u4e86 tileImageCache \u5c5e\u6027\u540e\u5c31\u5f00\u542f\u4e86\u5185\u5b58\u7f13\u5b58\u529f\u80fd\uff0c\u8fd8\u53ef\u4ee5\u5728\u4e0d\u4fee\u6539 tileImageCache \u5c5e\u6027\u7684\u60c5\u51b5\u4e0b\u901a\u8fc7 <code>disabledTileImageCache</code> \u5c5e\u6027\u63a7\u5236\u4f7f\u7528\u5185\u5b58\u7f13\u5b58\u529f\u80fd</p> <p>\u793a\u4f8b\uff1a</p> <pre><code>val zoomState: ZoomState by rememberSketchZoomState()\n\n// \u7981\u7528\u5185\u5b58\u7f13\u5b58\nzoomState.subsampling.disabledTileImageCache = true\n// \u5141\u8bb8\u4f7f\u7528\u5185\u5b58\u7f13\u5b58\nzoomState.subsampling.disabledTileImageCache = false\n\nSketchZoomAsyncImage(\n    uri = \"https://sample.com/sample.jpeg\",\n    contentDescription = \"view image\",\n    modifier = Modifier.fillMaxSize(),\n    zoomState = zoomState,\n)\n</code></pre>"},{"location":"zh/subsampling/#regiondecoder","title":"RegionDecoder","text":"<p>ZoomImage \u5728 Android \u5e73\u53f0\u4e0a\u4f7f\u7528 BitmapRegionDecoder \u6765\u89e3\u7801\u56fe\u7247\uff0c\u975e Android \u5e73\u53f0\u4f7f\u7528 Skia \u6765\u89e3\u7801\u56fe\u7247\uff0c\u4f46\u5b83\u4eec\u652f\u6301\u7684\u56fe\u7247\u7c7b\u578b\u6709\u9650\uff0c\u4f60\u53ef\u4ee5\u901a\u8fc7 RegionDecoder \u63a5\u53e3\u6765\u6269\u5c55\u652f\u6301\u7684\u56fe\u7247\u7c7b\u578b</p> <p>\u5148\u5b9e\u73b0 RegionDecoder \u63a5\u53e3\u548c\u5b83\u7684 Factory \u63a5\u53e3\u5b9a\u4e49\u4f60\u7684 RegionDecoder\uff0c\u53c2\u8003 SkiaRegionDecoder \u548c AndroidRegionDecoder</p> <p>\u7136\u540e\u5728 SubsamplingState \u6216 SubsamplingEngine \u4e0a\u5e94\u7528\u4f60\u7684 RegionDecoder\uff0c\u5982\u4e0b\uff1a</p> <pre><code>val zoomState: ZoomState by rememberSketchZoomState()\n\nzoomState.subsampling.regionDecoders = listOf(MyRegionDecoder.Factory())\n\nSketchZoomAsyncImage(\n    uri = \"https://sample.com/sample.jpeg\",\n    contentDescription = \"view image\",\n    modifier = Modifier.fillMaxSize(),\n    zoomState = zoomState,\n)\n\nval sketchZoomImageView = SketchZoomImageView(context)\nsketchZoomImageView.subsampling.regionDecodersState.value = listOf(MyRegionDecoder.Factory())\n</code></pre>"},{"location":"zh/subsampling/#_10","title":"\u7981\u7528\u5b50\u91c7\u6837","text":"<p>\u5b50\u91c7\u6837\u529f\u80fd\u9ed8\u8ba4\u5f00\u542f\uff0c\u4f60\u53ef\u4ee5\u901a\u8fc7 disabled \u5c5e\u6027\u7981\u7528\u5b83\uff0c\u5982\u4e0b\uff1a</p> <pre><code>val zoomState: ZoomState by rememberSketchZoomState()\n\nzoomState.subsampling.disabled = true\n\nSketchZoomAsyncImage(\n    uri = \"https://sample.com/sample.jpeg\",\n    contentDescription = \"view image\",\n    modifier = Modifier.fillMaxSize(),\n    zoomState = zoomState,\n)\n</code></pre>"},{"location":"zh/subsampling/#_11","title":"\u53ef\u8bbf\u95ee\u5c5e\u6027","text":"<pre><code>// compose\nval zoomState: ZoomState by rememberSketchZoomState()\nSketchZoomAsyncImage(zoomState = zoomState)\nval subsampling: SubsamplingState = zoomState.subsampling\n\n// view\nval sketchZoomImageView = SketchZoomImageView(context)\nval subsampling: SubsamplingEngine = sketchZoomImageView.subsampling\n</code></pre> <p>[!TIP] * \u6ce8\u610f\uff1aview \u7248\u672c\u7684\u76f8\u5173\u5c5e\u6027\u7528 StateFlow \u5305\u88c5\uff0c\u6240\u4ee5\u5176\u540d\u5b57\u76f8\u6bd4 compose \u7248\u672c\u90fd\u4ee5 State \u4e3a\u540e\u7f00</p> <p>\u53ef\u4ee5\u8bfb\u53d6\u4e5f\u53ef\u4ee5\u8bbe\u7f6e\u7684\u5c5e\u6027:</p> <ul> <li><code>subsampling.disabled: Boolean</code>: \u662f\u5426\u7981\u7528\u5b50\u91c7\u6837\u529f\u80fd</li> <li><code>subsampling.tileImageCache: TileImageCache?</code>: Tile \u56fe\u5757\u7684\u5185\u5b58\u7f13\u5b58\uff0c\u9ed8\u8ba4\u4e3a null\uff0c\u96c6\u6210\u56fe\u7247\u52a0\u8f7d\u5668\u7684\u7ec4\u4ef6\u4f1a\u81ea\u52a8\u8bbe\u7f6e\u5b83</li> <li><code>subsampling.disabledTileImageCache: Boolean</code>: \u662f\u5426\u7981\u7528 Tile \u56fe\u5757\u7684\u5185\u5b58\u7f13\u5b58\uff0c\u9ed8\u8ba4\u4e3a false</li> <li><code>subsampling.tileAnimationSpec: TileAnimationSpec</code>: \u56fe\u5757\u52a8\u753b\u7684\u914d\u7f6e\uff0c\u9ed8\u8ba4\u4e3a   TileAnimationSpec.Default</li> <li><code>subsampling.pausedContinuousTransformTypes: Int</code>: \u6682\u505c\u52a0\u8f7d\u56fe\u5757\u7684\u8fde\u7eed\u53d8\u6362\u7c7b\u578b\u7684\u914d\u7f6e\uff0c\u53ef\u4ee5\u901a\u8fc7\u4f4d\u6216\u8fd0\u7b97\u7b26\u7ec4\u5408\u591a\u4e2a\u7c7b\u578b\uff0c\u9ed8\u8ba4\u4e3a   TileManager.DefaultPausedContinuousTransformType</li> <li><code>subsampling.disabledBackgroundTiles: Boolean</code>: \u662f\u5426\u7981\u7528\u80cc\u666f\u56fe\u5757\uff0c\u9ed8\u8ba4\u4e3a false</li> <li><code>subsampling.stopped: Boolean</code>: \u662f\u5426\u505c\u6b62\u52a0\u8f7d\u56fe\u5757\uff0c\u9ed8\u8ba4\u4e3a false</li> <li><code>subsampling.disabledAutoStopWithLifecycle: Boolean</code>: \u662f\u5426\u7981\u7528\u6839\u636e Lifecycle \u81ea\u52a8\u505c\u6b62\u52a0\u8f7d\u56fe\u5757\uff0c\u9ed8\u8ba4\u4e3a   false</li> <li><code>subsampling.regionDecoders: List&lt;RegionDecoder.Factory&gt;</code>: \u6dfb\u52a0\u81ea\u5b9a\u4e49\u7684 RegionDecoder\uff0c\u9ed8\u8ba4\u4e3a\u7a7a\u5217\u8868</li> <li><code>subsampling.showTileBounds: Boolean</code>: \u662f\u5426\u663e\u793a Tile \u7684\u8fb9\u754c\uff0c\u9ed8\u8ba4\u4e3a false</li> </ul> <p>\u53ea\u80fd\u8bfb\u53d6\u7684\u5c5e\u6027\uff1a</p> <ul> <li><code>subsampling.ready: Boolean</code>: \u662f\u5426\u5df2\u7ecf\u51c6\u5907\u597d\u4e86</li> <li><code>subsampling.imageInfo: ImageInfo</code>: \u56fe\u7247\u7684\u5c3a\u5bf8\u3001\u683c\u5f0f\u4fe1\u606f</li> <li><code>subsampling.tileGridSizeMap: Map&lt;Int, IntOffset&gt;</code>: \u78c1\u8d34\u7f51\u683c\u5927\u5c0f\u6620\u5c04\u8868</li> <li><code>subsampling.sampleSize: Int</code>: \u5f53\u524d\u91c7\u6837\u5927\u5c0f</li> <li><code>subsampling.imageLoadRect: IntRect</code>: \u539f\u56fe\u4e0a\u5f53\u524d\u5b9e\u9645\u52a0\u8f7d\u7684\u533a\u57df</li> <li><code>subsampling.foregroundTiles: List&lt;TileSnapshot&gt;</code>: \u5f53\u524d\u524d\u666f\u56fe\u5757\u5217\u8868</li> <li><code>subsampling.backgroundTiles: List&lt;TileSnapshot&gt;</code>: \u5f53\u524d\u80cc\u666f\u56fe\u5757\u5217\u8868</li> </ul> <p>\u53ef\u4ea4\u4e92\u7684\u65b9\u6cd5\uff1a</p> <ul> <li><code>subsampling.setImage(): Boolean</code>: \u8bbe\u7f6e\u5b50\u91c7\u6837\u56fe\u7247\uff0c\u8fd4\u56de\u662f\u5426\u6210\u529f\uff0c\u96c6\u6210\u56fe\u7247\u52a0\u8f7d\u5668\u7684\u7ec4\u4ef6\u4f1a\u81ea\u52a8\u8bbe\u7f6e\u8bbe\u7f6e\u5b50\u91c7\u6837\u56fe\u7247</li> </ul>"},{"location":"zh/subsampling/#_12","title":"\u76d1\u542c\u5c5e\u6027\u53d8\u5316","text":"<ul> <li>compose \u7248\u672c\u7684\u76f8\u5173\u5c5e\u6027\u662f\u7528 State \u5305\u88c5\u7684\uff0c\u5728 Composable \u51fd\u6570\u4e2d\u76f4\u63a5\u8bfb\u53d6\u5b83\u5373\u53ef\u5b9e\u73b0\u76d1\u542c</li> <li>view \u7684\u76f8\u5173\u5c5e\u6027\u662f\u7528 StateFlow \u5305\u88c5\uff0c\u8c03\u7528\u5176 collect \u51fd\u6570\u5373\u53ef\u5b9e\u73b0\u76d1\u542c</li> </ul>"}]}